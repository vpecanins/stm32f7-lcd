
Build/main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000200 l    d  .text	00000000 .text
08008308 l    d  .rodata	00000000 .rodata
0800afd4 l    d  .ARM	00000000 .ARM
20000000 l    d  .data	00000000 .data
200008c0 l    d  .bss	00000000 .bss
2000141c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 /tmp/ccB1bu2w.o
08001394 l       .text	00000000 LoopCopyDataInit
0800138c l       .text	00000000 CopyDataInit
080013a8 l       .text	00000000 LoopFillZerobss
080013a2 l       .text	00000000 FillZerobss
080013d0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 stm32f7xx_it.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_msp.c
00000000 l    df *ABS*	00000000 main.c
080010fe l     F .text	00000022 Error_Handler
00000000 l    df *ABS*	00000000 system_stm32f7xx.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
08002ac0 l     F .text	0000006a __sbprintf
08008330 l     O .rodata	00000010 zeroes.7023
08008340 l     O .rodata	00000010 blanks.7022
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002bf0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003cf0 l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
20000434 l     O .data	00000038 lconv
2000046c l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
080083b4 l     O .rodata	0000000c p05.5402
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
08004edc l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal.c
200008f4 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f7xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32746g_discovery_sdram.c
200008f8 l     O .bss	00000010 Command
20000908 l     O .bss	00000034 sdramHandle
2000093c l     O .bss	00000058 dma_handle.11419
20000994 l     O .bss	0000001c Timing
200008a4 l     O .data	00000001 sdramstatus.11380
00000000 l    df *ABS*	00000000 stm32746g_discovery_lcd.c
08006798 l     F .text	0000007c LL_FillBuffer
200009b0 l     O .bss	00000004 ActiveLayer
200009b4 l     O .bss	000000a8 hLtdcHandler
20000a5c l     O .bss	00000018 DrawProp
20000a74 l     O .bss	00000084 periph_clk_init_struct.11916
20000af8 l     O .bss	00000040 hDma2dHandler
00000000 l    df *ABS*	00000000 stm32746g_discovery.c
00000000 l    df *ABS*	00000000 lcd_log.c
00000000 l    df *ABS*	00000000 syscalls.c
20000b38 l     O .bss	00000004 heap_end.12028
00000000 l    df *ABS*	00000000 stm32f7xx_hal_dma2d.c
080073c0 l     F .text	00000080 DMA2D_SetConfig
00000000 l    df *ABS*	00000000 stm32f7xx_hal_ltdc.c
0800766c l     F .text	00000112 LTDC_SetConfig
00000000 l    df *ABS*	00000000 stm32f7xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_dma.c
08008008 l     F .text	0000002c DMA_CalcBaseAndBitshift
0800afcc l     O .rodata	00000008 flagBitshiftOffset.11415
00000000 l    df *ABS*	00000000 stm32f7xx_hal_sdram.c
00000000 l    df *ABS*	00000000 stm32f7xx_ll_fmc.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
080013d0  w    F .text	00000002 RTC_Alarm_IRQHandler
080084b0 g     O .rodata	00000010 APBAHBPrescTable
080013d0  w    F .text	00000002 EXTI2_IRQHandler
20000b40 g     O .bss	00000002 LCD_CacheBuffer_yptr_bottom_bak
080013d0  w    F .text	00000002 TIM8_CC_IRQHandler
08005498 g     F .text	00000024 _isatty_r
08000d44 g     F .text	00000012 .hidden __aeabi_dcmple
080070e0 g     F .text	00000012 LCD_LOG_Init
080069f8 g     F .text	00000034 BSP_LCD_DrawRect
08000c80 g     F .text	0000007a .hidden __cmpdf2
080054bc g     F .text	0000002c _lseek_r
080010f4 g     F .text	00000002 DebugMon_Handler
20000b42 g     O .bss	00000002 LCD_CacheBuffer_yptr_top_bak
080013d0  w    F .text	00000002 UART8_IRQHandler
080013d0  w    F .text	00000002 SPI4_IRQHandler
08000c80 g     F .text	0000007a .hidden __eqdf2
08008034 g     F .text	00000074 HAL_DMA_Init
08006844 g     F .text	00000078 BSP_LCD_LayerDefaultInit
080007f0 g     F .text	0000005a .hidden __floatdidf
08008182 g     F .text	00000086 FMC_SDRAM_Init
08001414 g     F .text	00000028 printf
08005a64 g     F .text	00000054 _wcrtomb_r
08006384 g     F .text	00000070 HAL_NVIC_SetPriority
080013d0  w    F .text	00000002 TIM1_CC_IRQHandler
08004eb4 g     F .text	00000020 __sseek
08003de0 g     F .text	0000000a __sinit
080013d0  w    F .text	00000002 DMA2_Stream5_IRQHandler
080059bc g     F .text	000000a8 __swbuf_r
080010ea g     F .text	00000002 HardFault_Handler
080013d0  w    F .text	00000002 DMA1_Stream5_IRQHandler
080047c0 g     F .text	00000002 __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
080010f8 g     F .text	00000004 SysTick_Handler
08006350 g     F .text	00000008 HAL_GPIO_WritePin
080013d0  w    F .text	00000002 PVD_IRQHandler
08006954 g     F .text	0000004c BSP_LCD_DrawHLine
080054e8 g     F .text	000000c6 memmove
0800749a g     F .text	00000040 HAL_DMA2D_Start
080013d0  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800afdc g       *ABS*	00000000 _sidata
080060bc g     F .text	00000034 HAL_RCC_GetHCLKFreq
080010f6 g     F .text	00000002 PendSV_Handler
080010e8 g     F .text	00000002 NMI_Handler
080063f4 g     F .text	00000018 HAL_NVIC_EnableIRQ
080047c4 g     F .text	0000004c _Balloc
0800afdc g       .ARM	00000000 __exidx_end
080013d0  w    F .text	00000002 CAN2_RX1_IRQHandler
080013d0  w    F .text	00000002 EXTI3_IRQHandler
08006040 g     F .text	0000007c HAL_RCC_GetSysClockFreq
08007058 g     F .text	00000014 BSP_LED_Off
08000c70 g     F .text	0000008a .hidden __gtdf2
080082f8 g     F .text	0000000c __errno
0800815e g     F .text	00000024 HAL_SDRAM_ProgramRefreshRate
080013d0  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
080010fc g     F .text	00000002 HAL_MspInit
08006b38 g     F .text	000000ac BSP_LCD_DisplayStringAt
080013d0  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08005170 g     F .text	00000028 _fstat_r
08006358 g     F .text	00000008 HAL_GPIO_TogglePin
080082ea g     F .text	0000000c FMC_SDRAM_ProgramRefreshRate
20000b3c g     O .bss	00000004 errno
08008304 g       .text	00000000 _etext
200008c0 g       .bss	00000000 _sbss
08007780 g     F .text	000000e8 HAL_LTDC_Init
08000d0c g     F .text	00000010 .hidden __aeabi_cdcmple
080068e0 g     F .text	00000018 BSP_LCD_SetBackColor
08007442 g     F .text	00000058 HAL_DMA2D_Init
080013d0  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08006484 g     F .text	00000074 HAL_PWREx_EnableOverDrive
080013d0  w    F .text	00000002 I2C3_ER_IRQHandler
08006170 g     F .text	000001e0 HAL_GPIO_Init
080070f4 g     F .text	0000006c LCD_LOG_SetHeader
08008208 g     F .text	00000096 FMC_SDRAM_Timing_Init
080002a0 g     F .text	00000134 memcpy
08000cfc g     F .text	00000020 .hidden __aeabi_cdrcmple
08003ce4 g     F .text	0000000c _cleanup_r
08000780 g     F .text	00000022 .hidden __floatsidf
08006a2c g     F .text	00000034 BSP_LCD_DrawPixel
08000c78 g     F .text	00000082 .hidden __ltdf2
080013d0  w    F .text	00000002 EXTI0_IRQHandler
080013d0  w    F .text	00000002 I2C2_EV_IRQHandler
08000dd0 g     F .text	00000000 .hidden __aeabi_uldivmod
080013d0  w    F .text	00000002 DMA1_Stream2_IRQHandler
080013d0  w    F .text	00000002 CAN1_RX0_IRQHandler
080013d0  w    F .text	00000002 FPU_IRQHandler
08006154  w    F .text	0000001a HAL_Delay
20000000 g     O .data	00000004 SystemCoreClock
08004de0 g     F .text	00000054 __fpclassifyd
08007440  w    F .text	00000002 HAL_DMA2D_MspInit
080013d0  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08007392 g     F .text	0000000a _fstat
080083c0 g     O .rodata	000000c8 __mprec_tens
080078ba g     F .text	00000006 HAL_LTDC_GetState
080010f0 g     F .text	00000002 UsageFault_Handler
080040b4 g     F .text	00000008 __locale_charset
080013d0  w    F .text	00000002 LTDC_ER_IRQHandler
080075a0 g     F .text	000000cc HAL_DMA2D_ConfigLayer
080013d0  w    F .text	00000002 CAN2_SCE_IRQHandler
200008c8 g     O .bss	00000004 __malloc_top_pad
080013d0  w    F .text	00000002 DMA2_Stream2_IRQHandler
200008c0 g       .bss	00000000 __bss_start__
08006cec g     F .text	00000058 BSP_LCD_FillRect
2000048c g     O .data	00000004 __mb_cur_max
08000760 g     F .text	0000001e .hidden __aeabi_ui2d
080040c8 g     F .text	00000008 _localeconv_r
08005198 g     F .text	00000300 __sfvwrite_r
08004940 g     F .text	00000012 __i2b
20000000 g       .data	00000000 _sdata
080013d0  w    F .text	00000002 SPI1_IRQHandler
08000e00 g     F .text	000002e2 .hidden __udivmoddi4
080004dc g     F .text	00000000 .hidden __aeabi_drsub
0800671c g     F .text	0000007c BSP_SDRAM_Init
08004e34 g     F .text	00000024 _sbrk_r
080013d0  w    F .text	00000002 TIM6_DAC_IRQHandler
080055b0 g     F .text	0000002c _read_r
080013d0  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
080013d0  w    F .text	00000002 DCMI_IRQHandler
08000d30 g     F .text	00000012 .hidden __aeabi_dcmplt
08005018 g     F .text	00000084 _fclose_r
080013d0  w    F .text	00000002 CAN2_RX0_IRQHandler
20000b44 g     O .bss	00000002 LCD_CacheBuffer_yptr_bottom
200008c4 g     O .bss	00000004 __malloc_max_sbrked_mem
0800640c g     F .text	0000002c HAL_SYSTICK_Config
080007a4 g     F .text	0000003a .hidden __extendsfdf2
08000aa0 g     F .text	000001d0 .hidden __aeabi_ddiv
080004e8 g     F .text	00000276 .hidden __adddf3
0800afd4 g       .ARM	00000000 __exidx_start
0800084c g     F .text	00000254 .hidden __aeabi_dmul
080013d0  w    F .text	00000002 DMA2_Stream3_IRQHandler
0800739c g     F .text	00000004 _isatty
08007868 g     F .text	00000052 HAL_LTDC_ConfigLayer
08001120 g     F .text	00000070 Log_demo
080055dc g     F .text	000003de _realloc_r
080013d0  w    F .text	00000002 SAI2_IRQHandler
0800514c g     F .text	00000022 _fputwc_r
08008488 g     O .rodata	00000028 __mprec_bigtens
08000760 g     F .text	0000001e .hidden __floatunsidf
0800733c g     F .text	00000034 _sbrk
08004bd4 g     F .text	0000003e __mcmp
20000b46 g     O .bss	00000002 LCD_CacheBuffer_xptr
080013d0  w    F .text	00000002 USART6_IRQHandler
080064f8 g     F .text	00000098 BSP_SDRAM_Initialization_sequence
08006910 g     F .text	00000018 BSP_LCD_GetFont
080013d0  w    F .text	00000002 USART3_IRQHandler
200008b0 g     O .data	00000008 Font16
2000141c g       .bss	00000000 _ebss
08001384  w    F .text	00000034 Reset_Handler
080048a4 g     F .text	00000040 __hi0bits
080013d0  w    F .text	00000002 CAN1_RX1_IRQHandler
08000d80 g     F .text	0000004e .hidden __fixdfsi
080080a8 g     F .text	00000046 HAL_DMA_DeInit
080013d0  w    F .text	00000002 UART5_IRQHandler
080013d0  w    F .text	00000002 DMA2_Stream0_IRQHandler
0800707c g     F .text	00000064 LCD_LOG_DeInit
08006114 g     F .text	00000024 HAL_Init
200008a8 g     O .data	00000008 Font12
080013d0  w    F .text	00000002 TIM4_IRQHandler
080004e8 g     F .text	00000276 .hidden __aeabi_dadd
08000c78 g     F .text	00000082 .hidden __ledf2
08004a84 g     F .text	000000a0 __pow5mult
080007e0 g     F .text	0000006a .hidden __aeabi_ul2d
080013d0  w    F .text	00000002 QUADSPI_IRQHandler
2000141c g       ._user_heap_stack	00000000 end
080013d0  w    F .text	00000002 I2C1_EV_IRQHandler
20000b48 g     O .bss	00000001 LCD_CacheBuffer_yptr_invert
080013d0  w    F .text	00000002 DMA1_Stream6_IRQHandler
08007044 g     F .text	00000014 BSP_LED_On
08000d6c g     F .text	00000012 .hidden __aeabi_dcmpgt
080013d0  w    F .text	00000002 DMA1_Stream1_IRQHandler
080013d0  w    F .text	00000002 UART4_IRQHandler
200008b8 g     O .data	00000008 Font24
08003dec g     F .text	00000002 __sfp_lock_acquire
08000200 g     F .text	00000000 memchr
2000141c g       .bss	00000000 __bss_end__
08003e90 g     F .text	000001d0 _free_r
080013d0  w    F .text	00000002 TIM3_IRQHandler
080013d0  w    F .text	00000002 RCC_IRQHandler
080040bc g     F .text	0000000c __locale_mb_cur_max
08000d58 g     F .text	00000012 .hidden __aeabi_dcmpge
080013d0  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08007200 g     F .text	0000013c __io_putchar
20000b49 g     O .bss	00000001 LCD_Lock
0800829e g     F .text	0000004c FMC_SDRAM_SendCommand
00000200 g       *ABS*	00000000 _Min_Heap_Size
080004e4 g     F .text	0000027a .hidden __aeabi_dsub
080013d0 g       .text	00000002 Default_Handler
2000089c g     O .data	00000004 __malloc_sbrk_base
080007e0 g     F .text	0000006a .hidden __floatundidf
080073a0 g     F .text	00000004 _lseek
08004b24 g     F .text	000000ae __lshift
08006814 g     F .text	00000018 BSP_LCD_GetXSize
080013d0  w    F .text	00000002 CEC_IRQHandler
080013d0  w    F .text	00000002 EXTI15_10_IRQHandler
080013d0  w    F .text	00000002 ADC_IRQHandler
08004954 g     F .text	00000130 __multiply
08005e84 g     F .text	000001bc HAL_RCC_ClockConfig
08006360 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200008cc g     O .bss	00000028 __malloc_current_mallinfo
08004d28 g     F .text	000000b6 __d2b
08006c10 g     F .text	000000dc BSP_LCD_DrawLine
0800ab58 g     O .rodata	00000474 Font12_Table
080013d0  w    F .text	00000002 DMA1_Stream7_IRQHandler
080013d0  w    F .text	00000002 SPI5_IRQHandler
080013d0  w    F .text	00000002 TIM7_IRQHandler
080013d0  w    F .text	00000002 SDMMC1_IRQHandler
08004ff4 g     F .text	00000024 _close_r
080013d0  w    F .text	00000002 CAN2_TX_IRQHandler
08000780 g     F .text	00000022 .hidden __aeabi_i2d
08006590  w    F .text	0000018c BSP_SDRAM_MspInit
20000b4a g     O .bss	00000001 LCD_Scrolled
080013d0  w    F .text	00000002 TIM5_IRQHandler
080084c0 g     O .rodata	00000be0 Font16_Table
080068bc g     F .text	0000000c BSP_LCD_SelectLayer
080013d0  w    F .text	00000002 DMA2_Stream7_IRQHandler
080013d0  w    F .text	00000002 I2C3_EV_IRQHandler
08002b2c g     F .text	000000c4 __swsetup_r
080010e4  w    F .text	00000002 .hidden __aeabi_ldiv0
080013d0  w    F .text	00000002 EXTI9_5_IRQHandler
08000aa0 g     F .text	000001d0 .hidden __divdf3
08006be4 g     F .text	0000002c BSP_LCD_DisplayStringAtLine
080013d0  w    F .text	00000002 RTC_WKUP_IRQHandler
20000490 g     O .data	00000408 __malloc_av_
080013d0  w    F .text	00000002 LTDC_IRQHandler
0800084c g     F .text	00000254 .hidden __muldf3
08004e58 g     F .text	00000022 __sread
080013d0  w    F .text	00000002 ETH_WKUP_IRQHandler
08006148  w    F .text	0000000c HAL_GetTick
080013d0  w    F .text	00000002 SPDIF_RX_IRQHandler
080047bc g     F .text	00000002 __malloc_lock
08006dc8  w    F .text	00000158 BSP_LCD_MspInit
08003cb8 g     F .text	0000002c _fflush_r
08004f94 g     F .text	0000005e _calloc_r
080013d0  w    F .text	00000002 SPI2_IRQHandler
080090a0 g     O .rodata	00001ab8 Font24_Table
080013d0  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08004720 g     F .text	0000009a memset
080010ec g     F .text	00000002 MemManage_Handler
20000b4c g     O .bss	00000002 LCD_CacheBuffer_yptr_top
08001190 g     F .text	000001f4 main
08006d44 g     F .text	00000050 BSP_LCD_ClearStringLine
200008c0 g     O .bss	00000004 __malloc_max_total_mem
080013d0  w    F .text	00000002 DMA1_Stream0_IRQHandler
080080ee  w    F .text	00000002 HAL_SDRAM_MspInit
080013d0  w    F .text	00000002 CAN1_TX_IRQHandler
080010f2 g     F .text	00000002 SVC_Handler
08004ed4 g     F .text	00000008 __sclose
08007178 g     F .text	00000088 LCD_LOG_UpdateDisplay
08002d18 g     F .text	00000e56 _dtoa_r
080041b0 g     F .text	00000570 _malloc_r
08005ab8 g     F .text	0000001a __ascii_wctomb
080007f0 g     F .text	0000005a .hidden __aeabi_l2d
20000b4e g     O .bss	00000001 LCD_ScrollActive
080068c8 g     F .text	00000018 BSP_LCD_SetTextColor
08006f20  w    F .text	0000001c BSP_LCD_ClockConfig
080013d0  w    F .text	00000002 EXTI4_IRQHandler
08003df4 g     F .text	0000009c _malloc_trim_r
20000b50 g     O .bss	000008c4 LCD_CacheBuffer
080013d4 g     F .text	00000040 SystemInit
080013d0  w    F .text	00000002 RNG_IRQHandler
08000c80 g     F .text	0000007a .hidden __nedf2
08006a60 g     F .text	000000d8 BSP_LCD_DisplayChar
0800777e  w    F .text	00000002 HAL_LTDC_MspInit
08004f68 g     F .text	0000002c _write_r
080060f0  w    F .text	00000024 HAL_InitTick
080013d0  w    F .text	00000002 ETH_IRQHandler
20000430 g     O .data	00000004 _impure_ptr
08003b70 g     F .text	00000148 __sflush_r
08006138  w    F .text	00000010 HAL_IncTick
080013d0  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
080069a0 g     F .text	00000058 BSP_LCD_DrawVLine
080013d0  w    F .text	00000002 WWDG_IRQHandler
080013d0  w    F .text	00000002 SPI6_IRQHandler
080013d0  w    F .text	00000002 I2C4_EV_IRQHandler
080013d0  w    F .text	00000002 TIM2_IRQHandler
080013d0  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
080013d0  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
080013d0  w    F .text	00000002 OTG_HS_IRQHandler
0800706c g     F .text	00000010 BSP_LED_Toggle
080013d0  w    F .text	00000002 DMA2D_IRQHandler
2004ffff g       *ABS*	00000000 _estack
080013d0  w    F .text	00000002 EXTI1_IRQHandler
08000d1c g     F .text	00000012 .hidden __aeabi_dcmpeq
08007370 g     F .text	0000001c _write
200008c0 g       .data	00000000 _edata
080068f8 g     F .text	00000018 BSP_LCD_SetFont
0800682c g     F .text	00000018 BSP_LCD_GetYSize
0800509c g     F .text	000000b0 __fputwc
080013d0  w    F .text	00000002 UART7_IRQHandler
20001414 g     O .bss	00000004 LCD_LineColor
080013d0  w    F .text	00000002 USART2_IRQHandler
08004e7c g     F .text	00000038 __swrite
08005ad4 g     F .text	000003b0 HAL_RCC_OscConfig
20000898 g     O .data	00000004 __malloc_trim_threshold
08000000 g     O .isr_vector	00000000 g_pfnVectors
08004060 g     F .text	00000052 _fwalk_reent
08004c14 g     F .text	00000114 __mdiff
08000d80 g     F .text	0000004e .hidden __aeabi_d2iz
080078c0 g     F .text	00000748 HAL_RCCEx_PeriphCLKConfig
080013d0  w    F .text	00000002 I2C2_ER_IRQHandler
08003df0 g     F .text	00000002 __sfp_lock_release
08006ff8 g     F .text	0000004c BSP_LED_Init
08006438 g     F .text	0000004c HAL_MPU_ConfigRegion
080013d0  w    F .text	00000002 DMA2_Stream1_IRQHandler
080073a4 g     F .text	0000001c _read
080010e4  w    F .text	00000002 .hidden __aeabi_idiv0
08006f3c g     F .text	000000bc BSP_LCD_Init
080013d0  w    F .text	00000002 CAN1_SCE_IRQHandler
080013d0  w    F .text	00000002 FLASH_IRQHandler
080013d0  w    F .text	00000002 DMA2_Stream4_IRQHandler
080010ee g     F .text	00000002 BusFault_Handler
080013d0  w    F .text	00000002 USART1_IRQHandler
080040d0 g     F .text	000000e0 __smakebuf_r
08000400 g     F .text	000000dc strlen
080013d0  w    F .text	00000002 OTG_FS_IRQHandler
080013d0  w    F .text	00000002 SPI3_IRQHandler
08000d0c g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000c70 g     F .text	0000008a .hidden __gedf2
080013d0  w    F .text	00000002 DMA1_Stream4_IRQHandler
08007160 g     F .text	00000018 LCD_LOG_ClearTextZone
200008a0 g     O .data	00000004 __wctomb
080074da g     F .text	000000c4 HAL_DMA2D_PollForTransfer
080013d0  w    F .text	00000002 I2C1_ER_IRQHandler
080013d0  w    F .text	00000002 FMC_IRQHandler
08004f54 g     F .text	00000012 __sprint_r
080007a4 g     F .text	0000003a .hidden __aeabi_f2d
08006928 g     F .text	0000002c BSP_LCD_Clear
080013d0  w    F .text	00000002 LPTIM1_IRQHandler
080080f0 g     F .text	00000040 HAL_SDRAM_Init
080004e4 g     F .text	0000027a .hidden __subdf3
0800143c g     F .text	00001684 _vfprintf_r
080013d0  w    F .text	00000002 I2C4_ER_IRQHandler
080048e4 g     F .text	0000005a __lo0bits
080013d0  w    F .text	00000002 DMA2_Stream6_IRQHandler
08006d94 g     F .text	00000034 BSP_LCD_DisplayOn
20001418 g     O .bss	00000002 LCD_ScrollBackStep
080013d0  w    F .text	00000002 SAI1_IRQHandler
080013d0  w    F .text	00000002 DMA1_Stream3_IRQHandler
0800738c g     F .text	00000006 _close
08008130 g     F .text	0000002e HAL_SDRAM_SendCommand
08004824 g     F .text	00000080 __multadd
08004810 g     F .text	00000012 _Bfree



Disassembly of section .text:

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <memcpy>:
 80002a0:	4684      	mov	ip, r0
 80002a2:	ea41 0300 	orr.w	r3, r1, r0
 80002a6:	f013 0303 	ands.w	r3, r3, #3
 80002aa:	d16d      	bne.n	8000388 <memcpy+0xe8>
 80002ac:	3a40      	subs	r2, #64	; 0x40
 80002ae:	d341      	bcc.n	8000334 <memcpy+0x94>
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	3a40      	subs	r2, #64	; 0x40
 8000332:	d2bd      	bcs.n	80002b0 <memcpy+0x10>
 8000334:	3230      	adds	r2, #48	; 0x30
 8000336:	d311      	bcc.n	800035c <memcpy+0xbc>
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	3a10      	subs	r2, #16
 800035a:	d2ed      	bcs.n	8000338 <memcpy+0x98>
 800035c:	320c      	adds	r2, #12
 800035e:	d305      	bcc.n	800036c <memcpy+0xcc>
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	3a04      	subs	r2, #4
 800036a:	d2f9      	bcs.n	8000360 <memcpy+0xc0>
 800036c:	3204      	adds	r2, #4
 800036e:	d008      	beq.n	8000382 <memcpy+0xe2>
 8000370:	07d2      	lsls	r2, r2, #31
 8000372:	bf1c      	itt	ne
 8000374:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000378:	f800 3b01 	strbne.w	r3, [r0], #1
 800037c:	d301      	bcc.n	8000382 <memcpy+0xe2>
 800037e:	880b      	ldrh	r3, [r1, #0]
 8000380:	8003      	strh	r3, [r0, #0]
 8000382:	4660      	mov	r0, ip
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	2a08      	cmp	r2, #8
 800038a:	d313      	bcc.n	80003b4 <memcpy+0x114>
 800038c:	078b      	lsls	r3, r1, #30
 800038e:	d08d      	beq.n	80002ac <memcpy+0xc>
 8000390:	f010 0303 	ands.w	r3, r0, #3
 8000394:	d08a      	beq.n	80002ac <memcpy+0xc>
 8000396:	f1c3 0304 	rsb	r3, r3, #4
 800039a:	1ad2      	subs	r2, r2, r3
 800039c:	07db      	lsls	r3, r3, #31
 800039e:	bf1c      	itt	ne
 80003a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003a4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003a8:	d380      	bcc.n	80002ac <memcpy+0xc>
 80003aa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003ae:	f820 3b02 	strh.w	r3, [r0], #2
 80003b2:	e77b      	b.n	80002ac <memcpy+0xc>
 80003b4:	3a04      	subs	r2, #4
 80003b6:	d3d9      	bcc.n	800036c <memcpy+0xcc>
 80003b8:	3a01      	subs	r2, #1
 80003ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003be:	f800 3b01 	strb.w	r3, [r0], #1
 80003c2:	d2f9      	bcs.n	80003b8 <memcpy+0x118>
 80003c4:	780b      	ldrb	r3, [r1, #0]
 80003c6:	7003      	strb	r3, [r0, #0]
 80003c8:	784b      	ldrb	r3, [r1, #1]
 80003ca:	7043      	strb	r3, [r0, #1]
 80003cc:	788b      	ldrb	r3, [r1, #2]
 80003ce:	7083      	strb	r3, [r0, #2]
 80003d0:	4660      	mov	r0, ip
 80003d2:	4770      	bx	lr
	...

08000400 <strlen>:
 8000400:	f890 f000 	pld	[r0]
 8000404:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000408:	f020 0107 	bic.w	r1, r0, #7
 800040c:	f06f 0c00 	mvn.w	ip, #0
 8000410:	f010 0407 	ands.w	r4, r0, #7
 8000414:	f891 f020 	pld	[r1, #32]
 8000418:	f040 8049 	bne.w	80004ae <strlen+0xae>
 800041c:	f04f 0400 	mov.w	r4, #0
 8000420:	f06f 0007 	mvn.w	r0, #7
 8000424:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000428:	f891 f040 	pld	[r1, #64]	; 0x40
 800042c:	f100 0008 	add.w	r0, r0, #8
 8000430:	fa82 f24c 	uadd8	r2, r2, ip
 8000434:	faa4 f28c 	sel	r2, r4, ip
 8000438:	fa83 f34c 	uadd8	r3, r3, ip
 800043c:	faa2 f38c 	sel	r3, r2, ip
 8000440:	bb4b      	cbnz	r3, 8000496 <strlen+0x96>
 8000442:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000446:	fa82 f24c 	uadd8	r2, r2, ip
 800044a:	f100 0008 	add.w	r0, r0, #8
 800044e:	faa4 f28c 	sel	r2, r4, ip
 8000452:	fa83 f34c 	uadd8	r3, r3, ip
 8000456:	faa2 f38c 	sel	r3, r2, ip
 800045a:	b9e3      	cbnz	r3, 8000496 <strlen+0x96>
 800045c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000460:	fa82 f24c 	uadd8	r2, r2, ip
 8000464:	f100 0008 	add.w	r0, r0, #8
 8000468:	faa4 f28c 	sel	r2, r4, ip
 800046c:	fa83 f34c 	uadd8	r3, r3, ip
 8000470:	faa2 f38c 	sel	r3, r2, ip
 8000474:	b97b      	cbnz	r3, 8000496 <strlen+0x96>
 8000476:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800047a:	f101 0120 	add.w	r1, r1, #32
 800047e:	fa82 f24c 	uadd8	r2, r2, ip
 8000482:	f100 0008 	add.w	r0, r0, #8
 8000486:	faa4 f28c 	sel	r2, r4, ip
 800048a:	fa83 f34c 	uadd8	r3, r3, ip
 800048e:	faa2 f38c 	sel	r3, r2, ip
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0c6      	beq.n	8000424 <strlen+0x24>
 8000496:	2a00      	cmp	r2, #0
 8000498:	bf04      	itt	eq
 800049a:	3004      	addeq	r0, #4
 800049c:	461a      	moveq	r2, r3
 800049e:	ba12      	rev	r2, r2
 80004a0:	fab2 f282 	clz	r2, r2
 80004a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80004a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80004ac:	4770      	bx	lr
 80004ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80004b2:	f004 0503 	and.w	r5, r4, #3
 80004b6:	f1c4 0000 	rsb	r0, r4, #0
 80004ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80004be:	f014 0f04 	tst.w	r4, #4
 80004c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80004c6:	fa0c f505 	lsl.w	r5, ip, r5
 80004ca:	ea62 0205 	orn	r2, r2, r5
 80004ce:	bf1c      	itt	ne
 80004d0:	ea63 0305 	ornne	r3, r3, r5
 80004d4:	4662      	movne	r2, ip
 80004d6:	f04f 0400 	mov.w	r4, #0
 80004da:	e7a9      	b.n	8000430 <strlen+0x30>

080004dc <__aeabi_drsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e002      	b.n	80004e8 <__adddf3>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dsub>:
 80004e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e8 <__adddf3>:
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004f2:	ea94 0f05 	teq	r4, r5
 80004f6:	bf08      	it	eq
 80004f8:	ea90 0f02 	teqeq	r0, r2
 80004fc:	bf1f      	itttt	ne
 80004fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000502:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000506:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800050a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800050e:	f000 80e2 	beq.w	80006d6 <__adddf3+0x1ee>
 8000512:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000516:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800051a:	bfb8      	it	lt
 800051c:	426d      	neglt	r5, r5
 800051e:	dd0c      	ble.n	800053a <__adddf3+0x52>
 8000520:	442c      	add	r4, r5
 8000522:	ea80 0202 	eor.w	r2, r0, r2
 8000526:	ea81 0303 	eor.w	r3, r1, r3
 800052a:	ea82 0000 	eor.w	r0, r2, r0
 800052e:	ea83 0101 	eor.w	r1, r3, r1
 8000532:	ea80 0202 	eor.w	r2, r0, r2
 8000536:	ea81 0303 	eor.w	r3, r1, r3
 800053a:	2d36      	cmp	r5, #54	; 0x36
 800053c:	bf88      	it	hi
 800053e:	bd30      	pophi	{r4, r5, pc}
 8000540:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000544:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000548:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800054c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000550:	d002      	beq.n	8000558 <__adddf3+0x70>
 8000552:	4240      	negs	r0, r0
 8000554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000558:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800055c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000560:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000564:	d002      	beq.n	800056c <__adddf3+0x84>
 8000566:	4252      	negs	r2, r2
 8000568:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800056c:	ea94 0f05 	teq	r4, r5
 8000570:	f000 80a7 	beq.w	80006c2 <__adddf3+0x1da>
 8000574:	f1a4 0401 	sub.w	r4, r4, #1
 8000578:	f1d5 0e20 	rsbs	lr, r5, #32
 800057c:	db0d      	blt.n	800059a <__adddf3+0xb2>
 800057e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000582:	fa22 f205 	lsr.w	r2, r2, r5
 8000586:	1880      	adds	r0, r0, r2
 8000588:	f141 0100 	adc.w	r1, r1, #0
 800058c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000590:	1880      	adds	r0, r0, r2
 8000592:	fa43 f305 	asr.w	r3, r3, r5
 8000596:	4159      	adcs	r1, r3
 8000598:	e00e      	b.n	80005b8 <__adddf3+0xd0>
 800059a:	f1a5 0520 	sub.w	r5, r5, #32
 800059e:	f10e 0e20 	add.w	lr, lr, #32
 80005a2:	2a01      	cmp	r2, #1
 80005a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a8:	bf28      	it	cs
 80005aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ae:	fa43 f305 	asr.w	r3, r3, r5
 80005b2:	18c0      	adds	r0, r0, r3
 80005b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	d507      	bpl.n	80005ce <__adddf3+0xe6>
 80005be:	f04f 0e00 	mov.w	lr, #0
 80005c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80005ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005d2:	d31b      	bcc.n	800060c <__adddf3+0x124>
 80005d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d8:	d30c      	bcc.n	80005f4 <__adddf3+0x10c>
 80005da:	0849      	lsrs	r1, r1, #1
 80005dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005e4:	f104 0401 	add.w	r4, r4, #1
 80005e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f0:	f080 809a 	bcs.w	8000728 <__adddf3+0x240>
 80005f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	ea41 0105 	orr.w	r1, r1, r5
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000610:	4140      	adcs	r0, r0
 8000612:	eb41 0101 	adc.w	r1, r1, r1
 8000616:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800061a:	f1a4 0401 	sub.w	r4, r4, #1
 800061e:	d1e9      	bne.n	80005f4 <__adddf3+0x10c>
 8000620:	f091 0f00 	teq	r1, #0
 8000624:	bf04      	itt	eq
 8000626:	4601      	moveq	r1, r0
 8000628:	2000      	moveq	r0, #0
 800062a:	fab1 f381 	clz	r3, r1
 800062e:	bf08      	it	eq
 8000630:	3320      	addeq	r3, #32
 8000632:	f1a3 030b 	sub.w	r3, r3, #11
 8000636:	f1b3 0220 	subs.w	r2, r3, #32
 800063a:	da0c      	bge.n	8000656 <__adddf3+0x16e>
 800063c:	320c      	adds	r2, #12
 800063e:	dd08      	ble.n	8000652 <__adddf3+0x16a>
 8000640:	f102 0c14 	add.w	ip, r2, #20
 8000644:	f1c2 020c 	rsb	r2, r2, #12
 8000648:	fa01 f00c 	lsl.w	r0, r1, ip
 800064c:	fa21 f102 	lsr.w	r1, r1, r2
 8000650:	e00c      	b.n	800066c <__adddf3+0x184>
 8000652:	f102 0214 	add.w	r2, r2, #20
 8000656:	bfd8      	it	le
 8000658:	f1c2 0c20 	rsble	ip, r2, #32
 800065c:	fa01 f102 	lsl.w	r1, r1, r2
 8000660:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000664:	bfdc      	itt	le
 8000666:	ea41 010c 	orrle.w	r1, r1, ip
 800066a:	4090      	lslle	r0, r2
 800066c:	1ae4      	subs	r4, r4, r3
 800066e:	bfa2      	ittt	ge
 8000670:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000674:	4329      	orrge	r1, r5
 8000676:	bd30      	popge	{r4, r5, pc}
 8000678:	ea6f 0404 	mvn.w	r4, r4
 800067c:	3c1f      	subs	r4, #31
 800067e:	da1c      	bge.n	80006ba <__adddf3+0x1d2>
 8000680:	340c      	adds	r4, #12
 8000682:	dc0e      	bgt.n	80006a2 <__adddf3+0x1ba>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0220 	rsb	r2, r4, #32
 800068c:	fa20 f004 	lsr.w	r0, r0, r4
 8000690:	fa01 f302 	lsl.w	r3, r1, r2
 8000694:	ea40 0003 	orr.w	r0, r0, r3
 8000698:	fa21 f304 	lsr.w	r3, r1, r4
 800069c:	ea45 0103 	orr.w	r1, r5, r3
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	f1c4 040c 	rsb	r4, r4, #12
 80006a6:	f1c4 0220 	rsb	r2, r4, #32
 80006aa:	fa20 f002 	lsr.w	r0, r0, r2
 80006ae:	fa01 f304 	lsl.w	r3, r1, r4
 80006b2:	ea40 0003 	orr.w	r0, r0, r3
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	fa21 f004 	lsr.w	r0, r1, r4
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	f094 0f00 	teq	r4, #0
 80006c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ca:	bf06      	itte	eq
 80006cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d0:	3401      	addeq	r4, #1
 80006d2:	3d01      	subne	r5, #1
 80006d4:	e74e      	b.n	8000574 <__adddf3+0x8c>
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf18      	it	ne
 80006dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e0:	d029      	beq.n	8000736 <__adddf3+0x24e>
 80006e2:	ea94 0f05 	teq	r4, r5
 80006e6:	bf08      	it	eq
 80006e8:	ea90 0f02 	teqeq	r0, r2
 80006ec:	d005      	beq.n	80006fa <__adddf3+0x212>
 80006ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80006f2:	bf04      	itt	eq
 80006f4:	4619      	moveq	r1, r3
 80006f6:	4610      	moveq	r0, r2
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	ea91 0f03 	teq	r1, r3
 80006fe:	bf1e      	ittt	ne
 8000700:	2100      	movne	r1, #0
 8000702:	2000      	movne	r0, #0
 8000704:	bd30      	popne	{r4, r5, pc}
 8000706:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800070a:	d105      	bne.n	8000718 <__adddf3+0x230>
 800070c:	0040      	lsls	r0, r0, #1
 800070e:	4149      	adcs	r1, r1
 8000710:	bf28      	it	cs
 8000712:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd30      	pop	{r4, r5, pc}
 8000718:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800071c:	bf3c      	itt	cc
 800071e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000722:	bd30      	popcc	{r4, r5, pc}
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800073a:	bf1a      	itte	ne
 800073c:	4619      	movne	r1, r3
 800073e:	4610      	movne	r0, r2
 8000740:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000744:	bf1c      	itt	ne
 8000746:	460b      	movne	r3, r1
 8000748:	4602      	movne	r2, r0
 800074a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800074e:	bf06      	itte	eq
 8000750:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000754:	ea91 0f03 	teqeq	r1, r3
 8000758:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	bf00      	nop

08000760 <__aeabi_ui2d>:
 8000760:	f090 0f00 	teq	r0, #0
 8000764:	bf04      	itt	eq
 8000766:	2100      	moveq	r1, #0
 8000768:	4770      	bxeq	lr
 800076a:	b530      	push	{r4, r5, lr}
 800076c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000770:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000774:	f04f 0500 	mov.w	r5, #0
 8000778:	f04f 0100 	mov.w	r1, #0
 800077c:	e750      	b.n	8000620 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_i2d>:
 8000780:	f090 0f00 	teq	r0, #0
 8000784:	bf04      	itt	eq
 8000786:	2100      	moveq	r1, #0
 8000788:	4770      	bxeq	lr
 800078a:	b530      	push	{r4, r5, lr}
 800078c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000790:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000794:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000798:	bf48      	it	mi
 800079a:	4240      	negmi	r0, r0
 800079c:	f04f 0100 	mov.w	r1, #0
 80007a0:	e73e      	b.n	8000620 <__adddf3+0x138>
 80007a2:	bf00      	nop

080007a4 <__aeabi_f2d>:
 80007a4:	0042      	lsls	r2, r0, #1
 80007a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007b2:	bf1f      	itttt	ne
 80007b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c0:	4770      	bxne	lr
 80007c2:	f092 0f00 	teq	r2, #0
 80007c6:	bf14      	ite	ne
 80007c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e720      	b.n	8000620 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aedc 	beq.w	80005ce <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6c1      	b.n	80005ce <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_dmul>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8de 	bleq	8000a28 <__aeabi_dmul+0x1dc>
 800086c:	442c      	add	r4, r5
 800086e:	ea81 0603 	eor.w	r6, r1, r3
 8000872:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000876:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800087a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800087e:	bf18      	it	ne
 8000880:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800088c:	d038      	beq.n	8000900 <__aeabi_dmul+0xb4>
 800088e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000892:	f04f 0500 	mov.w	r5, #0
 8000896:	fbe1 e502 	umlal	lr, r5, r1, r2
 800089a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800089e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008a2:	f04f 0600 	mov.w	r6, #0
 80008a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008aa:	f09c 0f00 	teq	ip, #0
 80008ae:	bf18      	it	ne
 80008b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008c0:	d204      	bcs.n	80008cc <__aeabi_dmul+0x80>
 80008c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008c6:	416d      	adcs	r5, r5
 80008c8:	eb46 0606 	adc.w	r6, r6, r6
 80008cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e4:	bf88      	it	hi
 80008e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ea:	d81e      	bhi.n	800092a <__aeabi_dmul+0xde>
 80008ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008f0:	bf08      	it	eq
 80008f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000904:	ea46 0101 	orr.w	r1, r6, r1
 8000908:	ea40 0002 	orr.w	r0, r0, r2
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	f300 80ab 	bgt.w	8000a84 <__aeabi_dmul+0x238>
 800092e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000932:	bfde      	ittt	le
 8000934:	2000      	movle	r0, #0
 8000936:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800093a:	bd70      	pople	{r4, r5, r6, pc}
 800093c:	f1c4 0400 	rsb	r4, r4, #0
 8000940:	3c20      	subs	r4, #32
 8000942:	da35      	bge.n	80009b0 <__aeabi_dmul+0x164>
 8000944:	340c      	adds	r4, #12
 8000946:	dc1b      	bgt.n	8000980 <__aeabi_dmul+0x134>
 8000948:	f104 0414 	add.w	r4, r4, #20
 800094c:	f1c4 0520 	rsb	r5, r4, #32
 8000950:	fa00 f305 	lsl.w	r3, r0, r5
 8000954:	fa20 f004 	lsr.w	r0, r0, r4
 8000958:	fa01 f205 	lsl.w	r2, r1, r5
 800095c:	ea40 0002 	orr.w	r0, r0, r2
 8000960:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000968:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800096c:	fa21 f604 	lsr.w	r6, r1, r4
 8000970:	eb42 0106 	adc.w	r1, r2, r6
 8000974:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000978:	bf08      	it	eq
 800097a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f1c4 040c 	rsb	r4, r4, #12
 8000984:	f1c4 0520 	rsb	r5, r4, #32
 8000988:	fa00 f304 	lsl.w	r3, r0, r4
 800098c:	fa20 f005 	lsr.w	r0, r0, r5
 8000990:	fa01 f204 	lsl.w	r2, r1, r4
 8000994:	ea40 0002 	orr.w	r0, r0, r2
 8000998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800099c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009a0:	f141 0100 	adc.w	r1, r1, #0
 80009a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a8:	bf08      	it	eq
 80009aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f1c4 0520 	rsb	r5, r4, #32
 80009b4:	fa00 f205 	lsl.w	r2, r0, r5
 80009b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009bc:	fa20 f304 	lsr.w	r3, r0, r4
 80009c0:	fa01 f205 	lsl.w	r2, r1, r5
 80009c4:	ea43 0302 	orr.w	r3, r3, r2
 80009c8:	fa21 f004 	lsr.w	r0, r1, r4
 80009cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009d0:	fa21 f204 	lsr.w	r2, r1, r4
 80009d4:	ea20 0002 	bic.w	r0, r0, r2
 80009d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e0:	bf08      	it	eq
 80009e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f094 0f00 	teq	r4, #0
 80009ec:	d10f      	bne.n	8000a0e <__aeabi_dmul+0x1c2>
 80009ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009f2:	0040      	lsls	r0, r0, #1
 80009f4:	eb41 0101 	adc.w	r1, r1, r1
 80009f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009fc:	bf08      	it	eq
 80009fe:	3c01      	subeq	r4, #1
 8000a00:	d0f7      	beq.n	80009f2 <__aeabi_dmul+0x1a6>
 8000a02:	ea41 0106 	orr.w	r1, r1, r6
 8000a06:	f095 0f00 	teq	r5, #0
 8000a0a:	bf18      	it	ne
 8000a0c:	4770      	bxne	lr
 8000a0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	eb43 0303 	adc.w	r3, r3, r3
 8000a18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a1c:	bf08      	it	eq
 8000a1e:	3d01      	subeq	r5, #1
 8000a20:	d0f7      	beq.n	8000a12 <__aeabi_dmul+0x1c6>
 8000a22:	ea43 0306 	orr.w	r3, r3, r6
 8000a26:	4770      	bx	lr
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a30:	bf18      	it	ne
 8000a32:	ea95 0f0c 	teqne	r5, ip
 8000a36:	d00c      	beq.n	8000a52 <__aeabi_dmul+0x206>
 8000a38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a3c:	bf18      	it	ne
 8000a3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a42:	d1d1      	bne.n	80009e8 <__aeabi_dmul+0x19c>
 8000a44:	ea81 0103 	eor.w	r1, r1, r3
 8000a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
 8000a52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a56:	bf06      	itte	eq
 8000a58:	4610      	moveq	r0, r2
 8000a5a:	4619      	moveq	r1, r3
 8000a5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a60:	d019      	beq.n	8000a96 <__aeabi_dmul+0x24a>
 8000a62:	ea94 0f0c 	teq	r4, ip
 8000a66:	d102      	bne.n	8000a6e <__aeabi_dmul+0x222>
 8000a68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a6c:	d113      	bne.n	8000a96 <__aeabi_dmul+0x24a>
 8000a6e:	ea95 0f0c 	teq	r5, ip
 8000a72:	d105      	bne.n	8000a80 <__aeabi_dmul+0x234>
 8000a74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a78:	bf1c      	itt	ne
 8000a7a:	4610      	movne	r0, r2
 8000a7c:	4619      	movne	r1, r3
 8000a7e:	d10a      	bne.n	8000a96 <__aeabi_dmul+0x24a>
 8000a80:	ea81 0103 	eor.w	r1, r1, r3
 8000a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}

08000aa0 <__aeabi_ddiv>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000aaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aae:	bf1d      	ittte	ne
 8000ab0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ab4:	ea94 0f0c 	teqne	r4, ip
 8000ab8:	ea95 0f0c 	teqne	r5, ip
 8000abc:	f000 f8a7 	bleq	8000c0e <__aeabi_ddiv+0x16e>
 8000ac0:	eba4 0405 	sub.w	r4, r4, r5
 8000ac4:	ea81 0e03 	eor.w	lr, r1, r3
 8000ac8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000acc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ad0:	f000 8088 	beq.w	8000be4 <__aeabi_ddiv+0x144>
 8000ad4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ad8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000adc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ae0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ae4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ae8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000aec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000af0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000af4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000af8:	429d      	cmp	r5, r3
 8000afa:	bf08      	it	eq
 8000afc:	4296      	cmpeq	r6, r2
 8000afe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b02:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b06:	d202      	bcs.n	8000b0e <__aeabi_ddiv+0x6e>
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b0e:	1ab6      	subs	r6, r6, r2
 8000b10:	eb65 0503 	sbc.w	r5, r5, r3
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b22:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b2a:	bf22      	ittt	cs
 8000b2c:	1ab6      	subcs	r6, r6, r2
 8000b2e:	4675      	movcs	r5, lr
 8000b30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b42:	bf22      	ittt	cs
 8000b44:	1ab6      	subcs	r6, r6, r2
 8000b46:	4675      	movcs	r5, lr
 8000b48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4c:	085b      	lsrs	r3, r3, #1
 8000b4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b5a:	bf22      	ittt	cs
 8000b5c:	1ab6      	subcs	r6, r6, r2
 8000b5e:	4675      	movcs	r5, lr
 8000b60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b72:	bf22      	ittt	cs
 8000b74:	1ab6      	subcs	r6, r6, r2
 8000b76:	4675      	movcs	r5, lr
 8000b78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b7c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b80:	d018      	beq.n	8000bb4 <__aeabi_ddiv+0x114>
 8000b82:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b9e:	d1c0      	bne.n	8000b22 <__aeabi_ddiv+0x82>
 8000ba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ba4:	d10b      	bne.n	8000bbe <__aeabi_ddiv+0x11e>
 8000ba6:	ea41 0100 	orr.w	r1, r1, r0
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bb2:	e7b6      	b.n	8000b22 <__aeabi_ddiv+0x82>
 8000bb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bb8:	bf04      	itt	eq
 8000bba:	4301      	orreq	r1, r0
 8000bbc:	2000      	moveq	r0, #0
 8000bbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bc2:	bf88      	it	hi
 8000bc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bc8:	f63f aeaf 	bhi.w	800092a <__aeabi_dmul+0xde>
 8000bcc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bd0:	bf04      	itt	eq
 8000bd2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bda:	f150 0000 	adcs.w	r0, r0, #0
 8000bde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000be8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bf0:	bfc2      	ittt	gt
 8000bf2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bfa:	bd70      	popgt	{r4, r5, r6, pc}
 8000bfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c00:	f04f 0e00 	mov.w	lr, #0
 8000c04:	3c01      	subs	r4, #1
 8000c06:	e690      	b.n	800092a <__aeabi_dmul+0xde>
 8000c08:	ea45 0e06 	orr.w	lr, r5, r6
 8000c0c:	e68d      	b.n	800092a <__aeabi_dmul+0xde>
 8000c0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c12:	ea94 0f0c 	teq	r4, ip
 8000c16:	bf08      	it	eq
 8000c18:	ea95 0f0c 	teqeq	r5, ip
 8000c1c:	f43f af3b 	beq.w	8000a96 <__aeabi_dmul+0x24a>
 8000c20:	ea94 0f0c 	teq	r4, ip
 8000c24:	d10a      	bne.n	8000c3c <__aeabi_ddiv+0x19c>
 8000c26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c2a:	f47f af34 	bne.w	8000a96 <__aeabi_dmul+0x24a>
 8000c2e:	ea95 0f0c 	teq	r5, ip
 8000c32:	f47f af25 	bne.w	8000a80 <__aeabi_dmul+0x234>
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	e72c      	b.n	8000a96 <__aeabi_dmul+0x24a>
 8000c3c:	ea95 0f0c 	teq	r5, ip
 8000c40:	d106      	bne.n	8000c50 <__aeabi_ddiv+0x1b0>
 8000c42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c46:	f43f aefd 	beq.w	8000a44 <__aeabi_dmul+0x1f8>
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	e722      	b.n	8000a96 <__aeabi_dmul+0x24a>
 8000c50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c54:	bf18      	it	ne
 8000c56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c5a:	f47f aec5 	bne.w	80009e8 <__aeabi_dmul+0x19c>
 8000c5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c62:	f47f af0d 	bne.w	8000a80 <__aeabi_dmul+0x234>
 8000c66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c6a:	f47f aeeb 	bne.w	8000a44 <__aeabi_dmul+0x1f8>
 8000c6e:	e712      	b.n	8000a96 <__aeabi_dmul+0x24a>

08000c70 <__gedf2>:
 8000c70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c74:	e006      	b.n	8000c84 <__cmpdf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__ledf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	e002      	b.n	8000c84 <__cmpdf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__cmpdf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c94:	bf18      	it	ne
 8000c96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c9a:	d01b      	beq.n	8000cd4 <__cmpdf2+0x54>
 8000c9c:	b001      	add	sp, #4
 8000c9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ca2:	bf0c      	ite	eq
 8000ca4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ca8:	ea91 0f03 	teqne	r1, r3
 8000cac:	bf02      	ittt	eq
 8000cae:	ea90 0f02 	teqeq	r0, r2
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	4770      	bxeq	lr
 8000cb6:	f110 0f00 	cmn.w	r0, #0
 8000cba:	ea91 0f03 	teq	r1, r3
 8000cbe:	bf58      	it	pl
 8000cc0:	4299      	cmppl	r1, r3
 8000cc2:	bf08      	it	eq
 8000cc4:	4290      	cmpeq	r0, r2
 8000cc6:	bf2c      	ite	cs
 8000cc8:	17d8      	asrcs	r0, r3, #31
 8000cca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cce:	f040 0001 	orr.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cdc:	d102      	bne.n	8000ce4 <__cmpdf2+0x64>
 8000cde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ce2:	d107      	bne.n	8000cf4 <__cmpdf2+0x74>
 8000ce4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cec:	d1d6      	bne.n	8000c9c <__cmpdf2+0x1c>
 8000cee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cf2:	d0d3      	beq.n	8000c9c <__cmpdf2+0x1c>
 8000cf4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <__aeabi_cdrcmple>:
 8000cfc:	4684      	mov	ip, r0
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4662      	mov	r2, ip
 8000d02:	468c      	mov	ip, r1
 8000d04:	4619      	mov	r1, r3
 8000d06:	4663      	mov	r3, ip
 8000d08:	e000      	b.n	8000d0c <__aeabi_cdcmpeq>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_cdcmpeq>:
 8000d0c:	b501      	push	{r0, lr}
 8000d0e:	f7ff ffb7 	bl	8000c80 <__cmpdf2>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	bf48      	it	mi
 8000d16:	f110 0f00 	cmnmi.w	r0, #0
 8000d1a:	bd01      	pop	{r0, pc}

08000d1c <__aeabi_dcmpeq>:
 8000d1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d20:	f7ff fff4 	bl	8000d0c <__aeabi_cdcmpeq>
 8000d24:	bf0c      	ite	eq
 8000d26:	2001      	moveq	r0, #1
 8000d28:	2000      	movne	r0, #0
 8000d2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2e:	bf00      	nop

08000d30 <__aeabi_dcmplt>:
 8000d30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d34:	f7ff ffea 	bl	8000d0c <__aeabi_cdcmpeq>
 8000d38:	bf34      	ite	cc
 8000d3a:	2001      	movcc	r0, #1
 8000d3c:	2000      	movcs	r0, #0
 8000d3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d42:	bf00      	nop

08000d44 <__aeabi_dcmple>:
 8000d44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d48:	f7ff ffe0 	bl	8000d0c <__aeabi_cdcmpeq>
 8000d4c:	bf94      	ite	ls
 8000d4e:	2001      	movls	r0, #1
 8000d50:	2000      	movhi	r0, #0
 8000d52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d56:	bf00      	nop

08000d58 <__aeabi_dcmpge>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff ffce 	bl	8000cfc <__aeabi_cdrcmple>
 8000d60:	bf94      	ite	ls
 8000d62:	2001      	movls	r0, #1
 8000d64:	2000      	movhi	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dcmpgt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffc4 	bl	8000cfc <__aeabi_cdrcmple>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_d2iz>:
 8000d80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d88:	d215      	bcs.n	8000db6 <__aeabi_d2iz+0x36>
 8000d8a:	d511      	bpl.n	8000db0 <__aeabi_d2iz+0x30>
 8000d8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d94:	d912      	bls.n	8000dbc <__aeabi_d2iz+0x3c>
 8000d96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000da2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000da6:	fa23 f002 	lsr.w	r0, r3, r2
 8000daa:	bf18      	it	ne
 8000dac:	4240      	negne	r0, r0
 8000dae:	4770      	bx	lr
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4770      	bx	lr
 8000db6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dba:	d105      	bne.n	8000dc8 <__aeabi_d2iz+0x48>
 8000dbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000dc0:	bf08      	it	eq
 8000dc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dc6:	4770      	bx	lr
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__aeabi_uldivmod>:
 8000dd0:	b953      	cbnz	r3, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd2:	b94a      	cbnz	r2, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	bf08      	it	eq
 8000dd8:	2800      	cmpeq	r0, #0
 8000dda:	bf1c      	itt	ne
 8000ddc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000de0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000de4:	f000 b97e 	b.w	80010e4 <__aeabi_idiv0>
 8000de8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df0:	f000 f806 	bl	8000e00 <__udivmoddi4>
 8000df4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dfc:	b004      	add	sp, #16
 8000dfe:	4770      	bx	lr

08000e00 <__udivmoddi4>:
 8000e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e04:	468c      	mov	ip, r1
 8000e06:	460e      	mov	r6, r1
 8000e08:	4604      	mov	r4, r0
 8000e0a:	9d08      	ldr	r5, [sp, #32]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d150      	bne.n	8000eb2 <__udivmoddi4+0xb2>
 8000e10:	428a      	cmp	r2, r1
 8000e12:	4617      	mov	r7, r2
 8000e14:	d96c      	bls.n	8000ef0 <__udivmoddi4+0xf0>
 8000e16:	fab2 fe82 	clz	lr, r2
 8000e1a:	f1be 0f00 	cmp.w	lr, #0
 8000e1e:	d00b      	beq.n	8000e38 <__udivmoddi4+0x38>
 8000e20:	f1ce 0420 	rsb	r4, lr, #32
 8000e24:	fa20 f404 	lsr.w	r4, r0, r4
 8000e28:	fa01 f60e 	lsl.w	r6, r1, lr
 8000e2c:	ea44 0c06 	orr.w	ip, r4, r6
 8000e30:	fa02 f70e 	lsl.w	r7, r2, lr
 8000e34:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e3c:	0c22      	lsrs	r2, r4, #16
 8000e3e:	fbbc f0f9 	udiv	r0, ip, r9
 8000e42:	fa1f f887 	uxth.w	r8, r7
 8000e46:	fb09 c610 	mls	r6, r9, r0, ip
 8000e4a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	42b3      	cmp	r3, r6
 8000e54:	d909      	bls.n	8000e6a <__udivmoddi4+0x6a>
 8000e56:	19f6      	adds	r6, r6, r7
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e5c:	f080 8122 	bcs.w	80010a4 <__udivmoddi4+0x2a4>
 8000e60:	42b3      	cmp	r3, r6
 8000e62:	f240 811f 	bls.w	80010a4 <__udivmoddi4+0x2a4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	443e      	add	r6, r7
 8000e6a:	1af6      	subs	r6, r6, r3
 8000e6c:	b2a2      	uxth	r2, r4
 8000e6e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000e72:	fb09 6613 	mls	r6, r9, r3, r6
 8000e76:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000e7a:	fb03 f808 	mul.w	r8, r3, r8
 8000e7e:	45a0      	cmp	r8, r4
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0x96>
 8000e82:	19e4      	adds	r4, r4, r7
 8000e84:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000e88:	f080 810a 	bcs.w	80010a0 <__udivmoddi4+0x2a0>
 8000e8c:	45a0      	cmp	r8, r4
 8000e8e:	f240 8107 	bls.w	80010a0 <__udivmoddi4+0x2a0>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ebc8 0404 	rsb	r4, r8, r4
 8000e9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2d00      	cmp	r5, #0
 8000ea2:	d062      	beq.n	8000f6a <__udivmoddi4+0x16a>
 8000ea4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	602c      	str	r4, [r5, #0]
 8000eac:	606b      	str	r3, [r5, #4]
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0xc6>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d055      	beq.n	8000f66 <__udivmoddi4+0x166>
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	fab3 f183 	clz	r1, r3
 8000eca:	2900      	cmp	r1, #0
 8000ecc:	f040 8090 	bne.w	8000ff0 <__udivmoddi4+0x1f0>
 8000ed0:	42b3      	cmp	r3, r6
 8000ed2:	d302      	bcc.n	8000eda <__udivmoddi4+0xda>
 8000ed4:	4282      	cmp	r2, r0
 8000ed6:	f200 80f8 	bhi.w	80010ca <__udivmoddi4+0x2ca>
 8000eda:	1a84      	subs	r4, r0, r2
 8000edc:	eb66 0603 	sbc.w	r6, r6, r3
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	46b4      	mov	ip, r6
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d040      	beq.n	8000f6a <__udivmoddi4+0x16a>
 8000ee8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	b912      	cbnz	r2, 8000ef8 <__udivmoddi4+0xf8>
 8000ef2:	2701      	movs	r7, #1
 8000ef4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ef8:	fab7 fe87 	clz	lr, r7
 8000efc:	f1be 0f00 	cmp.w	lr, #0
 8000f00:	d135      	bne.n	8000f6e <__udivmoddi4+0x16e>
 8000f02:	1bf3      	subs	r3, r6, r7
 8000f04:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f08:	fa1f fc87 	uxth.w	ip, r7
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f12:	0c22      	lsrs	r2, r4, #16
 8000f14:	fb08 3610 	mls	r6, r8, r0, r3
 8000f18:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000f1c:	fb0c f300 	mul.w	r3, ip, r0
 8000f20:	42b3      	cmp	r3, r6
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x134>
 8000f24:	19f6      	adds	r6, r6, r7
 8000f26:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x132>
 8000f2c:	42b3      	cmp	r3, r6
 8000f2e:	f200 80ce 	bhi.w	80010ce <__udivmoddi4+0x2ce>
 8000f32:	4610      	mov	r0, r2
 8000f34:	1af6      	subs	r6, r6, r3
 8000f36:	b2a2      	uxth	r2, r4
 8000f38:	fbb6 f3f8 	udiv	r3, r6, r8
 8000f3c:	fb08 6613 	mls	r6, r8, r3, r6
 8000f40:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000f44:	fb0c fc03 	mul.w	ip, ip, r3
 8000f48:	45a4      	cmp	ip, r4
 8000f4a:	d907      	bls.n	8000f5c <__udivmoddi4+0x15c>
 8000f4c:	19e4      	adds	r4, r4, r7
 8000f4e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0x15a>
 8000f54:	45a4      	cmp	ip, r4
 8000f56:	f200 80b5 	bhi.w	80010c4 <__udivmoddi4+0x2c4>
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	ebcc 0404 	rsb	r4, ip, r4
 8000f60:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f64:	e79c      	b.n	8000ea0 <__udivmoddi4+0xa0>
 8000f66:	4629      	mov	r1, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1ce 0120 	rsb	r1, lr, #32
 8000f72:	fa06 f30e 	lsl.w	r3, r6, lr
 8000f76:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f7a:	fa20 f901 	lsr.w	r9, r0, r1
 8000f7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f82:	40ce      	lsrs	r6, r1
 8000f84:	ea49 0903 	orr.w	r9, r9, r3
 8000f88:	fbb6 faf8 	udiv	sl, r6, r8
 8000f8c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000f90:	fb08 661a 	mls	r6, r8, sl, r6
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000f9c:	fb0a f20c 	mul.w	r2, sl, ip
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000fa6:	d90a      	bls.n	8000fbe <__udivmoddi4+0x1be>
 8000fa8:	19db      	adds	r3, r3, r7
 8000faa:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 8000fae:	f080 8087 	bcs.w	80010c0 <__udivmoddi4+0x2c0>
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	f240 8084 	bls.w	80010c0 <__udivmoddi4+0x2c0>
 8000fb8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000fbc:	443b      	add	r3, r7
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	fa1f f989 	uxth.w	r9, r9
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000fd0:	fb01 f60c 	mul.w	r6, r1, ip
 8000fd4:	429e      	cmp	r6, r3
 8000fd6:	d907      	bls.n	8000fe8 <__udivmoddi4+0x1e8>
 8000fd8:	19db      	adds	r3, r3, r7
 8000fda:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000fde:	d26b      	bcs.n	80010b8 <__udivmoddi4+0x2b8>
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d969      	bls.n	80010b8 <__udivmoddi4+0x2b8>
 8000fe4:	3902      	subs	r1, #2
 8000fe6:	443b      	add	r3, r7
 8000fe8:	1b9b      	subs	r3, r3, r6
 8000fea:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000fee:	e78e      	b.n	8000f0e <__udivmoddi4+0x10e>
 8000ff0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ff4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ff8:	408b      	lsls	r3, r1
 8000ffa:	4323      	orrs	r3, r4
 8000ffc:	fa20 f70e 	lsr.w	r7, r0, lr
 8001000:	fa06 f401 	lsl.w	r4, r6, r1
 8001004:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001008:	fa26 f60e 	lsr.w	r6, r6, lr
 800100c:	433c      	orrs	r4, r7
 800100e:	fbb6 f9fc 	udiv	r9, r6, ip
 8001012:	0c27      	lsrs	r7, r4, #16
 8001014:	fb0c 6619 	mls	r6, ip, r9, r6
 8001018:	fa1f f883 	uxth.w	r8, r3
 800101c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8001020:	fb09 f708 	mul.w	r7, r9, r8
 8001024:	42b7      	cmp	r7, r6
 8001026:	fa02 f201 	lsl.w	r2, r2, r1
 800102a:	fa00 fa01 	lsl.w	sl, r0, r1
 800102e:	d908      	bls.n	8001042 <__udivmoddi4+0x242>
 8001030:	18f6      	adds	r6, r6, r3
 8001032:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001036:	d241      	bcs.n	80010bc <__udivmoddi4+0x2bc>
 8001038:	42b7      	cmp	r7, r6
 800103a:	d93f      	bls.n	80010bc <__udivmoddi4+0x2bc>
 800103c:	f1a9 0902 	sub.w	r9, r9, #2
 8001040:	441e      	add	r6, r3
 8001042:	1bf6      	subs	r6, r6, r7
 8001044:	b2a0      	uxth	r0, r4
 8001046:	fbb6 f4fc 	udiv	r4, r6, ip
 800104a:	fb0c 6614 	mls	r6, ip, r4, r6
 800104e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8001052:	fb04 f808 	mul.w	r8, r4, r8
 8001056:	45b8      	cmp	r8, r7
 8001058:	d907      	bls.n	800106a <__udivmoddi4+0x26a>
 800105a:	18ff      	adds	r7, r7, r3
 800105c:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
 8001060:	d228      	bcs.n	80010b4 <__udivmoddi4+0x2b4>
 8001062:	45b8      	cmp	r8, r7
 8001064:	d926      	bls.n	80010b4 <__udivmoddi4+0x2b4>
 8001066:	3c02      	subs	r4, #2
 8001068:	441f      	add	r7, r3
 800106a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800106e:	ebc8 0707 	rsb	r7, r8, r7
 8001072:	fba0 8902 	umull	r8, r9, r0, r2
 8001076:	454f      	cmp	r7, r9
 8001078:	4644      	mov	r4, r8
 800107a:	464e      	mov	r6, r9
 800107c:	d314      	bcc.n	80010a8 <__udivmoddi4+0x2a8>
 800107e:	d029      	beq.n	80010d4 <__udivmoddi4+0x2d4>
 8001080:	b365      	cbz	r5, 80010dc <__udivmoddi4+0x2dc>
 8001082:	ebba 0304 	subs.w	r3, sl, r4
 8001086:	eb67 0706 	sbc.w	r7, r7, r6
 800108a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800108e:	40cb      	lsrs	r3, r1
 8001090:	40cf      	lsrs	r7, r1
 8001092:	ea4e 0303 	orr.w	r3, lr, r3
 8001096:	e885 0088 	stmia.w	r5, {r3, r7}
 800109a:	2100      	movs	r1, #0
 800109c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a0:	4613      	mov	r3, r2
 80010a2:	e6f8      	b.n	8000e96 <__udivmoddi4+0x96>
 80010a4:	4610      	mov	r0, r2
 80010a6:	e6e0      	b.n	8000e6a <__udivmoddi4+0x6a>
 80010a8:	ebb8 0402 	subs.w	r4, r8, r2
 80010ac:	eb69 0603 	sbc.w	r6, r9, r3
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7e5      	b.n	8001080 <__udivmoddi4+0x280>
 80010b4:	4604      	mov	r4, r0
 80010b6:	e7d8      	b.n	800106a <__udivmoddi4+0x26a>
 80010b8:	4611      	mov	r1, r2
 80010ba:	e795      	b.n	8000fe8 <__udivmoddi4+0x1e8>
 80010bc:	4681      	mov	r9, r0
 80010be:	e7c0      	b.n	8001042 <__udivmoddi4+0x242>
 80010c0:	468a      	mov	sl, r1
 80010c2:	e77c      	b.n	8000fbe <__udivmoddi4+0x1be>
 80010c4:	3b02      	subs	r3, #2
 80010c6:	443c      	add	r4, r7
 80010c8:	e748      	b.n	8000f5c <__udivmoddi4+0x15c>
 80010ca:	4608      	mov	r0, r1
 80010cc:	e70a      	b.n	8000ee4 <__udivmoddi4+0xe4>
 80010ce:	3802      	subs	r0, #2
 80010d0:	443e      	add	r6, r7
 80010d2:	e72f      	b.n	8000f34 <__udivmoddi4+0x134>
 80010d4:	45c2      	cmp	sl, r8
 80010d6:	d3e7      	bcc.n	80010a8 <__udivmoddi4+0x2a8>
 80010d8:	463e      	mov	r6, r7
 80010da:	e7d1      	b.n	8001080 <__udivmoddi4+0x280>
 80010dc:	4629      	mov	r1, r5
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	bf00      	nop

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <NMI_Handler>:
 80010e8:	4770      	bx	lr

080010ea <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler>

080010ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler>

080010ee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler>

080010f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler>

080010f2 <SVC_Handler>:
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80010f8:	f005 b81e 	b.w	8006138 <HAL_IncTick>

080010fc <HAL_MspInit>:
 80010fc:	4770      	bx	lr

080010fe <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80010fe:	b510      	push	{r4, lr}
 8001100:	2403      	movs	r4, #3
  uint8_t i=0;
  /* User may add here some code to deal with this error */
  while(1)
  {
      for (i=0; i<3; i++) {
          BSP_LED_Toggle(LED1);
 8001102:	2000      	movs	r0, #0
 8001104:	3c01      	subs	r4, #1
 8001106:	f005 ffb1 	bl	800706c <BSP_LED_Toggle>
          HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f005 f822 	bl	8006154 <HAL_Delay>
{
  uint8_t i=0;
  /* User may add here some code to deal with this error */
  while(1)
  {
      for (i=0; i<3; i++) {
 8001110:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001114:	d1f5      	bne.n	8001102 <Error_Handler+0x4>
          BSP_LED_Toggle(LED1);
          HAL_Delay(100);
      }
      HAL_Delay(500);
 8001116:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111a:	f005 f81b 	bl	8006154 <HAL_Delay>
  }
 800111e:	e7ef      	b.n	8001100 <Error_Handler+0x2>

08001120 <Log_demo>:
  * @brief  LCD Log demo
  * @param  None
  * @retval None
  */
void Log_demo(void)
{
 8001120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Initialize LCD Log module */
  LCD_LOG_Init();

  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 8001124:	2400      	movs	r4, #0

  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_ErrLog ("This is Line %d \n", i);
 8001126:	4e14      	ldr	r6, [pc, #80]	; (8001178 <Log_demo+0x58>)
 8001128:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800118c <Log_demo+0x6c>
void Log_demo(void)
{
  uint8_t   i = 0;

  /* Initialize LCD Log module */
  LCD_LOG_Init();
 800112c:	f005 ffd8 	bl	80070e0 <LCD_LOG_Init>

  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <Log_demo+0x5c>)
 8001132:	f005 ffdf 	bl	80070f4 <LCD_LOG_SetHeader>

  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_ErrLog ("This is Line %d \n", i);
 8001136:	4812      	ldr	r0, [pc, #72]	; (8001180 <Log_demo+0x60>)
 8001138:	f8c6 8000 	str.w	r8, [r6]
 800113c:	f000 f96a 	bl	8001414 <printf>
 8001140:	4621      	mov	r1, r4
 8001142:	3401      	adds	r4, #1
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <Log_demo+0x64>)
 8001146:	f000 f965 	bl	8001414 <printf>
 800114a:	4d0f      	ldr	r5, [pc, #60]	; (8001188 <Log_demo+0x68>)

  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Log Example");

  /* Output User logs */
  for (i = 0; i < 10; i++)
 800114c:	2c0a      	cmp	r4, #10
 800114e:	4f0a      	ldr	r7, [pc, #40]	; (8001178 <Log_demo+0x58>)
  {
    LCD_ErrLog ("This is Line %d \n", i);
 8001150:	6035      	str	r5, [r6, #0]

  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Log Example");

  /* Output User logs */
  for (i = 0; i < 10; i++)
 8001152:	d1f0      	bne.n	8001136 <Log_demo+0x16>
  }

  HAL_Delay(500);

  /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 8001154:	2400      	movs	r4, #0
  for (i = 0; i < 10; i++)
  {
    LCD_ErrLog ("This is Line %d \n", i);
  }

  HAL_Delay(500);
 8001156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115a:	f004 fffb 	bl	8006154 <HAL_Delay>

  /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 800115e:	f005 ffff 	bl	8007160 <LCD_LOG_ClearTextZone>

  /* Output new user logs */
  for (i = 0; i < 30; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8001162:	4621      	mov	r1, r4
 8001164:	3401      	adds	r4, #1
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <Log_demo+0x64>)
 8001168:	603d      	str	r5, [r7, #0]
 800116a:	f000 f953 	bl	8001414 <printf>

  /* Clear Old logs */
  LCD_LOG_ClearTextZone();

  /* Output new user logs */
  for (i = 0; i < 30; i++)
 800116e:	2c1e      	cmp	r4, #30
 8001170:	d1f7      	bne.n	8001162 <Log_demo+0x42>
  {
    LCD_UsrLog ("This is Line %d \n", i);
  }
  
}
 8001172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001176:	bf00      	nop
 8001178:	20001414 	.word	0x20001414
 800117c:	08008308 	.word	0x08008308
 8001180:	08008314 	.word	0x08008314
 8001184:	0800831c 	.word	0x0800831c
 8001188:	ff000080 	.word	0xff000080
 800118c:	ffff0000 	.word	0xffff0000

08001190 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001190:	b570      	push	{r4, r5, r6, lr}
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Disable(void)
{
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001192:	4c77      	ldr	r4, [pc, #476]	; (8001370 <main+0x1e0>)
 8001194:	b094      	sub	sp, #80	; 0x50
  
  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 8001196:	4e77      	ldr	r6, [pc, #476]	; (8001374 <main+0x1e4>)
  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001198:	2500      	movs	r5, #0
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Disable(void)
{
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800119a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800119c:	a808      	add	r0, sp, #32
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
 800119e:	4a76      	ldr	r2, [pc, #472]	; (8001378 <main+0x1e8>)
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a4:	6263      	str	r3, [r4, #36]	; 0x24
  
  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 80011a6:	6873      	ldr	r3, [r6, #4]
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6073      	str	r3, [r6, #4]
  
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011ae:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0x20010000;
 80011b0:	9209      	str	r2, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80011b2:	2211      	movs	r2, #17
  
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011b4:	f88d 3020 	strb.w	r3, [sp, #32]
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80011b8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011bc:	2203      	movs	r2, #3
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80011be:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011c2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011c6:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011ca:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011ce:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011d2:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
  MPU_InitStruct.SubRegionDisable = 0x00;
 80011d6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80011da:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011de:	f005 f92b 	bl	8006438 <HAL_MPU_ConfigRegion>
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011e2:	2305      	movs	r3, #5
 80011e4:	6073      	str	r3, [r6, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6263      	str	r3, [r4, #36]	; 0x24
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011ee:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80011f2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011f6:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fa:	6963      	ldr	r3, [r4, #20]
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	6163      	str	r3, [r4, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001202:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001206:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800120a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800120e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001212:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001216:	f3c2 334e 	ubfx	r3, r2, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800121a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800121e:	0159      	lsls	r1, r3, #5
 8001220:	f643 70e0 	movw	r0, #16352	; 0x3fe0
 8001224:	4008      	ands	r0, r1
    ccsidr = SCB->CCSIDR;

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001226:	4611      	mov	r1, r2
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001228:	ea40 7681 	orr.w	r6, r0, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 800122c:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001230:	4d4f      	ldr	r5, [pc, #316]	; (8001370 <main+0x1e0>)
 8001232:	f8c4 6260 	str.w	r6, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8001236:	d2f7      	bcs.n	8001228 <main+0x98>
    } while(sets--);
 8001238:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800123c:	d2ef      	bcs.n	800121e <main+0x8e>
 800123e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001242:	696b      	ldr	r3, [r5, #20]
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	616b      	str	r3, [r5, #20]
 800124a:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800124e:	f3bf 8f6f 	isb	sy
       - Configure the Flash ART accelerator on ITCM interface
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001252:	f004 ff5f 	bl	8006114 <HAL_Init>
  HAL_StatusTypeDef ret = HAL_OK;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <main+0x1ec>)
 8001258:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2402      	movs	r4, #2
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800125e:	a808      	add	r0, sp, #32
  HAL_StatusTypeDef ret = HAL_OK;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001264:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	9b01      	ldr	r3, [sp, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <main+0x1f0>)
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001282:	9508      	str	r5, [sp, #32]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128a:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_PWR_CLK_ENABLE();

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	9b02      	ldr	r3, [sp, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001294:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800129c:	2319      	movs	r3, #25
 800129e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80012a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012a4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80012a6:	2308      	movs	r3, #8
 80012a8:	9313      	str	r3, [sp, #76]	; 0x4c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80012aa:	f004 fc13 	bl	8005ad4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) Error_Handler();
 80012ae:	b108      	cbz	r0, 80012b4 <main+0x124>
 80012b0:	f7ff ff25 	bl	80010fe <Error_Handler>

  /* activate the OverDrive to reach the 180 Mhz Frequency */
  ret = HAL_PWREx_ActivateOverDrive();
 80012b4:	f005 f8e6 	bl	8006484 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) Error_Handler();
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d1f9      	bne.n	80012b0 <main+0x120>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80012bc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) Error_Handler();
 80012c0:	2105      	movs	r1, #5
 80012c2:	a803      	add	r0, sp, #12
  ret = HAL_PWREx_ActivateOverDrive();
  if(ret != HAL_OK) Error_Handler();

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80012c4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if(ret != HAL_OK) Error_Handler();

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012cc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	9307      	str	r3, [sp, #28]

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) Error_Handler();
 80012d4:	f004 fdd6 	bl	8005e84 <HAL_RCC_ClockConfig>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1e9      	bne.n	80012b0 <main+0x120>
  HAL_Init();

  /* Configure the System clock to have a frequency of 216 MHz */
  SystemClock_Config();

  BSP_LED_Init(LED1);
 80012dc:	f005 fe8c 	bl	8006ff8 <BSP_LED_Init>
  BSP_SDRAM_Init();
 80012e0:	f005 fa1c 	bl	800671c <BSP_SDRAM_Init>

  /* Add your application code here
     */

  /* Initialize LCD */
  if( BSP_LCD_Init() != LCD_OK) Error_Handler();
 80012e4:	f005 fe2a 	bl	8006f3c <BSP_LCD_Init>
 80012e8:	4604      	mov	r4, r0
 80012ea:	2800      	cmp	r0, #0
 80012ec:	d1e0      	bne.n	80012b0 <main+0x120>
  
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 80012ee:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80012f2:	4628      	mov	r0, r5
 80012f4:	f005 faa6 	bl	8006844 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 80012f8:	4628      	mov	r0, r5
 80012fa:	f005 fadf 	bl	80068bc <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80012fe:	f005 fd49 	bl	8006d94 <BSP_LCD_DisplayOn>
  
  /* Set draw settings */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001302:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001306:	f005 fb0f 	bl	8006928 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800130a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800130e:	f005 fadb 	bl	80068c8 <BSP_LCD_SetTextColor>
  
  /* Draw test frame */
  uint16_t x0 = 0;
  uint16_t y0 = 0;
  uint16_t x1 = BSP_LCD_GetXSize() - 1 - x0;
 8001312:	f005 fa7f 	bl	8006814 <BSP_LCD_GetXSize>
 8001316:	3801      	subs	r0, #1
 8001318:	b286      	uxth	r6, r0
  uint16_t y1 = BSP_LCD_GetYSize() - 1 - y0;
 800131a:	f005 fa87 	bl	800682c <BSP_LCD_GetYSize>
 800131e:	3801      	subs	r0, #1
  
  BSP_LCD_DrawRect(x0, y0, x1-x0, y1-y0);
 8001320:	4632      	mov	r2, r6
 8001322:	4621      	mov	r1, r4
  
  /* Draw test frame */
  uint16_t x0 = 0;
  uint16_t y0 = 0;
  uint16_t x1 = BSP_LCD_GetXSize() - 1 - x0;
  uint16_t y1 = BSP_LCD_GetYSize() - 1 - y0;
 8001324:	b285      	uxth	r5, r0
  
  BSP_LCD_DrawRect(x0, y0, x1-x0, y1-y0);
 8001326:	4620      	mov	r0, r4
 8001328:	462b      	mov	r3, r5
 800132a:	f005 fb65 	bl	80069f8 <BSP_LCD_DrawRect>
  BSP_LCD_DrawLine(x0, y0, x1, y1);
 800132e:	462b      	mov	r3, r5
 8001330:	4632      	mov	r2, r6
 8001332:	4621      	mov	r1, r4
 8001334:	4620      	mov	r0, r4
 8001336:	f005 fc6b 	bl	8006c10 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(x0, y1, x1, y0);
 800133a:	4623      	mov	r3, r4
 800133c:	4632      	mov	r2, r6
 800133e:	4629      	mov	r1, r5
 8001340:	4620      	mov	r0, r4
 8001342:	f005 fc65 	bl	8006c10 <BSP_LCD_DrawLine>
  
  HAL_Delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134a:	f004 ff03 	bl	8006154 <HAL_Delay>
  
  Log_demo();
 800134e:	f7ff fee7 	bl	8001120 <Log_demo>
  
  /* Infinite loop */
  while (1)
  {
      BSP_LED_On(LED1);
 8001352:	2000      	movs	r0, #0
 8001354:	f005 fe76 	bl	8007044 <BSP_LED_On>
      HAL_Delay(100);
 8001358:	2064      	movs	r0, #100	; 0x64
 800135a:	f004 fefb 	bl	8006154 <HAL_Delay>
      BSP_LED_Off(LED1);
 800135e:	2000      	movs	r0, #0
 8001360:	f005 fe7a 	bl	8007058 <BSP_LED_Off>
      HAL_Delay(400);
 8001364:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001368:	f004 fef4 	bl	8006154 <HAL_Delay>
 800136c:	e7f1      	b.n	8001352 <main+0x1c2>
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	e000ed90 	.word	0xe000ed90
 8001378:	20010000 	.word	0x20010000
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001384:	f8df d030 	ldr.w	sp, [pc, #48]	; 80013b8 <LoopFillZerobss+0x10>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001388:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800138a:	e003      	b.n	8001394 <LoopCopyDataInit>

0800138c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800138e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001390:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001392:	3104      	adds	r1, #4

08001394 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001398:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800139c:	d3f6      	bcc.n	800138c <CopyDataInit>
  ldr  r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80013a0:	e002      	b.n	80013a8 <LoopFillZerobss>

080013a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013a4:	f842 3b04 	str.w	r3, [r2], #4

080013a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80013aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013ac:	d3f9      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ae:	f000 f811 	bl	80013d4 <SystemInit>
   * needed for printf to LCD. [Victor]
   *
   *  bl __libc_init_array
   */
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff feed 	bl	8001190 <main>
  bx  lr    
 80013b6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	2004ffff 	.word	0x2004ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80013bc:	0800afdc 	.word	0x0800afdc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013c4:	200008c0 	.word	0x200008c0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80013c8:	200008c0 	.word	0x200008c0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013cc:	2000141c 	.word	0x2000141c

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <SystemInit+0x34>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013d6:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	f042 0201 	orr.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013e0:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <SystemInit+0x38>)
 80013f0:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013fe:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <SystemInit+0x3c>)
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	24003010 	.word	0x24003010
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <printf>:
 8001414:	b40f      	push	{r0, r1, r2, r3}
 8001416:	b500      	push	{lr}
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <printf+0x24>)
 800141a:	b083      	sub	sp, #12
 800141c:	ab04      	add	r3, sp, #16
 800141e:	6808      	ldr	r0, [r1, #0]
 8001420:	f853 2b04 	ldr.w	r2, [r3], #4
 8001424:	6881      	ldr	r1, [r0, #8]
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	f000 f808 	bl	800143c <_vfprintf_r>
 800142c:	b003      	add	sp, #12
 800142e:	f85d eb04 	ldr.w	lr, [sp], #4
 8001432:	b004      	add	sp, #16
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000430 	.word	0x20000430

0800143c <_vfprintf_r>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	b0bf      	sub	sp, #252	; 0xfc
 8001442:	461c      	mov	r4, r3
 8001444:	468a      	mov	sl, r1
 8001446:	9208      	str	r2, [sp, #32]
 8001448:	4605      	mov	r5, r0
 800144a:	9009      	str	r0, [sp, #36]	; 0x24
 800144c:	f002 fe3c 	bl	80040c8 <_localeconv_r>
 8001450:	6803      	ldr	r3, [r0, #0]
 8001452:	9314      	str	r3, [sp, #80]	; 0x50
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffd3 	bl	8000400 <strlen>
 800145a:	940d      	str	r4, [sp, #52]	; 0x34
 800145c:	9015      	str	r0, [sp, #84]	; 0x54
 800145e:	b11d      	cbz	r5, 8001468 <_vfprintf_r+0x2c>
 8001460:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8122 	beq.w	80016ac <_vfprintf_r+0x270>
 8001468:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 800146c:	b293      	uxth	r3, r2
 800146e:	0499      	lsls	r1, r3, #18
 8001470:	d40a      	bmi.n	8001488 <_vfprintf_r+0x4c>
 8001472:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8001476:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 800147a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800147e:	f8aa 300c 	strh.w	r3, [sl, #12]
 8001482:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
 8001486:	b29b      	uxth	r3, r3
 8001488:	071a      	lsls	r2, r3, #28
 800148a:	f140 80da 	bpl.w	8001642 <_vfprintf_r+0x206>
 800148e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8001492:	2a00      	cmp	r2, #0
 8001494:	f000 80d5 	beq.w	8001642 <_vfprintf_r+0x206>
 8001498:	f003 031a 	and.w	r3, r3, #26
 800149c:	2b0a      	cmp	r3, #10
 800149e:	f000 80de 	beq.w	800165e <_vfprintf_r+0x222>
 80014a2:	2300      	movs	r3, #0
 80014a4:	461a      	mov	r2, r3
 80014a6:	9311      	str	r3, [sp, #68]	; 0x44
 80014a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80014aa:	9322      	str	r3, [sp, #136]	; 0x88
 80014ac:	9316      	str	r3, [sp, #88]	; 0x58
 80014ae:	930a      	str	r3, [sp, #40]	; 0x28
 80014b0:	ab2e      	add	r3, sp, #184	; 0xb8
 80014b2:	9321      	str	r3, [sp, #132]	; 0x84
 80014b4:	4699      	mov	r9, r3
 80014b6:	9212      	str	r2, [sp, #72]	; 0x48
 80014b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80014ba:	9c08      	ldr	r4, [sp, #32]
 80014bc:	7823      	ldrb	r3, [r4, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80f8 	beq.w	80016b4 <_vfprintf_r+0x278>
 80014c4:	2b25      	cmp	r3, #37	; 0x25
 80014c6:	d102      	bne.n	80014ce <_vfprintf_r+0x92>
 80014c8:	e0f4      	b.n	80016b4 <_vfprintf_r+0x278>
 80014ca:	2b25      	cmp	r3, #37	; 0x25
 80014cc:	d003      	beq.n	80014d6 <_vfprintf_r+0x9a>
 80014ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f9      	bne.n	80014ca <_vfprintf_r+0x8e>
 80014d6:	9b08      	ldr	r3, [sp, #32]
 80014d8:	1ae5      	subs	r5, r4, r3
 80014da:	b195      	cbz	r5, 8001502 <_vfprintf_r+0xc6>
 80014dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80014de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80014e0:	9908      	ldr	r1, [sp, #32]
 80014e2:	f8c9 1000 	str.w	r1, [r9]
 80014e6:	3301      	adds	r3, #1
 80014e8:	442a      	add	r2, r5
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	f8c9 5004 	str.w	r5, [r9, #4]
 80014f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80014f2:	9322      	str	r3, [sp, #136]	; 0x88
 80014f4:	f300 80c1 	bgt.w	800167a <_vfprintf_r+0x23e>
 80014f8:	f109 0908 	add.w	r9, r9, #8
 80014fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014fe:	442b      	add	r3, r5
 8001500:	930a      	str	r3, [sp, #40]	; 0x28
 8001502:	7823      	ldrb	r3, [r4, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80c1 	beq.w	800168c <_vfprintf_r+0x250>
 800150a:	2300      	movs	r3, #0
 800150c:	461a      	mov	r2, r3
 800150e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8001512:	4619      	mov	r1, r3
 8001514:	930b      	str	r3, [sp, #44]	; 0x2c
 8001516:	9306      	str	r3, [sp, #24]
 8001518:	1c63      	adds	r3, r4, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8001520:	7863      	ldrb	r3, [r4, #1]
 8001522:	465e      	mov	r6, fp
 8001524:	3001      	adds	r0, #1
 8001526:	f1a3 0420 	sub.w	r4, r3, #32
 800152a:	2c58      	cmp	r4, #88	; 0x58
 800152c:	f200 8415 	bhi.w	8001d5a <_vfprintf_r+0x91e>
 8001530:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001534:	041303cd 	.word	0x041303cd
 8001538:	03d40413 	.word	0x03d40413
 800153c:	04130413 	.word	0x04130413
 8001540:	04130413 	.word	0x04130413
 8001544:	04130413 	.word	0x04130413
 8001548:	037700c2 	.word	0x037700c2
 800154c:	005d0413 	.word	0x005d0413
 8001550:	041300ce 	.word	0x041300ce
 8001554:	00ef00e9 	.word	0x00ef00e9
 8001558:	00ef00ef 	.word	0x00ef00ef
 800155c:	00ef00ef 	.word	0x00ef00ef
 8001560:	00ef00ef 	.word	0x00ef00ef
 8001564:	00ef00ef 	.word	0x00ef00ef
 8001568:	04130413 	.word	0x04130413
 800156c:	04130413 	.word	0x04130413
 8001570:	04130413 	.word	0x04130413
 8001574:	04130413 	.word	0x04130413
 8001578:	04130413 	.word	0x04130413
 800157c:	026800ff 	.word	0x026800ff
 8001580:	02680413 	.word	0x02680413
 8001584:	04130413 	.word	0x04130413
 8001588:	04130413 	.word	0x04130413
 800158c:	0413029f 	.word	0x0413029f
 8001590:	02a50413 	.word	0x02a50413
 8001594:	04130413 	.word	0x04130413
 8001598:	04130413 	.word	0x04130413
 800159c:	02e90413 	.word	0x02e90413
 80015a0:	04130413 	.word	0x04130413
 80015a4:	04130318 	.word	0x04130318
 80015a8:	04130413 	.word	0x04130413
 80015ac:	04130413 	.word	0x04130413
 80015b0:	04130413 	.word	0x04130413
 80015b4:	04130413 	.word	0x04130413
 80015b8:	035a0413 	.word	0x035a0413
 80015bc:	026803da 	.word	0x026803da
 80015c0:	02680268 	.word	0x02680268
 80015c4:	03da03e3 	.word	0x03da03e3
 80015c8:	04130413 	.word	0x04130413
 80015cc:	041303e9 	.word	0x041303e9
 80015d0:	036e03f2 	.word	0x036e03f2
 80015d4:	037b0063 	.word	0x037b0063
 80015d8:	038a0413 	.word	0x038a0413
 80015dc:	03ae0413 	.word	0x03ae0413
 80015e0:	04130413 	.word	0x04130413
 80015e4:	03b7      	.short	0x03b7
 80015e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80015e8:	930d      	str	r3, [sp, #52]	; 0x34
 80015ea:	4264      	negs	r4, r4
 80015ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80015ee:	9b06      	ldr	r3, [sp, #24]
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	9306      	str	r3, [sp, #24]
 80015f6:	7803      	ldrb	r3, [r0, #0]
 80015f8:	e794      	b.n	8001524 <_vfprintf_r+0xe8>
 80015fa:	9008      	str	r0, [sp, #32]
 80015fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80015fe:	2100      	movs	r1, #0
 8001600:	6804      	ldr	r4, [r0, #0]
 8001602:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001606:	1d07      	adds	r7, r0, #4
 8001608:	9806      	ldr	r0, [sp, #24]
 800160a:	2330      	movs	r3, #48	; 0x30
 800160c:	2278      	movs	r2, #120	; 0x78
 800160e:	428e      	cmp	r6, r1
 8001610:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8001614:	46b3      	mov	fp, r6
 8001616:	f04f 0500 	mov.w	r5, #0
 800161a:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800161e:	f040 0302 	orr.w	r3, r0, #2
 8001622:	f2c0 83b8 	blt.w	8001d96 <_vfprintf_r+0x95a>
 8001626:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	9306      	str	r3, [sp, #24]
 8001630:	ea54 0305 	orrs.w	r3, r4, r5
 8001634:	970d      	str	r7, [sp, #52]	; 0x34
 8001636:	f000 8383 	beq.w	8001d40 <_vfprintf_r+0x904>
 800163a:	460f      	mov	r7, r1
 800163c:	920f      	str	r2, [sp, #60]	; 0x3c
 800163e:	48a6      	ldr	r0, [pc, #664]	; (80018d8 <_vfprintf_r+0x49c>)
 8001640:	e2c2      	b.n	8001bc8 <_vfprintf_r+0x78c>
 8001642:	4651      	mov	r1, sl
 8001644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001646:	f001 fa71 	bl	8002b2c <__swsetup_r>
 800164a:	2800      	cmp	r0, #0
 800164c:	f041 800a 	bne.w	8002664 <_vfprintf_r+0x1228>
 8001650:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8001654:	f003 031a 	and.w	r3, r3, #26
 8001658:	2b0a      	cmp	r3, #10
 800165a:	f47f af22 	bne.w	80014a2 <_vfprintf_r+0x66>
 800165e:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f6ff af1d 	blt.w	80014a2 <_vfprintf_r+0x66>
 8001668:	4623      	mov	r3, r4
 800166a:	9a08      	ldr	r2, [sp, #32]
 800166c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800166e:	4651      	mov	r1, sl
 8001670:	f001 fa26 	bl	8002ac0 <__sbprintf>
 8001674:	b03f      	add	sp, #252	; 0xfc
 8001676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800167a:	aa21      	add	r2, sp, #132	; 0x84
 800167c:	4651      	mov	r1, sl
 800167e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001680:	f003 fc68 	bl	8004f54 <__sprint_r>
 8001684:	b948      	cbnz	r0, 800169a <_vfprintf_r+0x25e>
 8001686:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800168a:	e737      	b.n	80014fc <_vfprintf_r+0xc0>
 800168c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800168e:	b123      	cbz	r3, 800169a <_vfprintf_r+0x25e>
 8001690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001692:	aa21      	add	r2, sp, #132	; 0x84
 8001694:	4651      	mov	r1, sl
 8001696:	f003 fc5d 	bl	8004f54 <__sprint_r>
 800169a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800169e:	0659      	lsls	r1, r3, #25
 80016a0:	f100 87e0 	bmi.w	8002664 <_vfprintf_r+0x1228>
 80016a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80016a6:	b03f      	add	sp, #252	; 0xfc
 80016a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016ae:	f002 fb97 	bl	8003de0 <__sinit>
 80016b2:	e6d9      	b.n	8001468 <_vfprintf_r+0x2c>
 80016b4:	9c08      	ldr	r4, [sp, #32]
 80016b6:	e724      	b.n	8001502 <_vfprintf_r+0xc6>
 80016b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80016be:	461c      	mov	r4, r3
 80016c0:	2c00      	cmp	r4, #0
 80016c2:	462b      	mov	r3, r5
 80016c4:	f103 0304 	add.w	r3, r3, #4
 80016c8:	db8d      	blt.n	80015e6 <_vfprintf_r+0x1aa>
 80016ca:	930d      	str	r3, [sp, #52]	; 0x34
 80016cc:	7803      	ldrb	r3, [r0, #0]
 80016ce:	e729      	b.n	8001524 <_vfprintf_r+0xe8>
 80016d0:	7803      	ldrb	r3, [r0, #0]
 80016d2:	2b2a      	cmp	r3, #42	; 0x2a
 80016d4:	f100 0501 	add.w	r5, r0, #1
 80016d8:	f001 81a5 	beq.w	8002a26 <_vfprintf_r+0x15ea>
 80016dc:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80016e0:	2c09      	cmp	r4, #9
 80016e2:	bf98      	it	ls
 80016e4:	2600      	movls	r6, #0
 80016e6:	f201 8100 	bhi.w	80028ea <_vfprintf_r+0x14ae>
 80016ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80016ee:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80016f2:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 80016f6:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80016fa:	2c09      	cmp	r4, #9
 80016fc:	d9f5      	bls.n	80016ea <_vfprintf_r+0x2ae>
 80016fe:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8001702:	4628      	mov	r0, r5
 8001704:	e70f      	b.n	8001526 <_vfprintf_r+0xea>
 8001706:	9b06      	ldr	r3, [sp, #24]
 8001708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170c:	9306      	str	r3, [sp, #24]
 800170e:	7803      	ldrb	r3, [r0, #0]
 8001710:	e708      	b.n	8001524 <_vfprintf_r+0xe8>
 8001712:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001716:	2300      	movs	r3, #0
 8001718:	461d      	mov	r5, r3
 800171a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800171e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001722:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8001726:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800172a:	2c09      	cmp	r4, #9
 800172c:	d9f5      	bls.n	800171a <_vfprintf_r+0x2de>
 800172e:	950b      	str	r5, [sp, #44]	; 0x2c
 8001730:	e6f9      	b.n	8001526 <_vfprintf_r+0xea>
 8001732:	930f      	str	r3, [sp, #60]	; 0x3c
 8001734:	46b3      	mov	fp, r6
 8001736:	9008      	str	r0, [sp, #32]
 8001738:	2a00      	cmp	r2, #0
 800173a:	f041 819e 	bne.w	8002a7a <_vfprintf_r+0x163e>
 800173e:	9b06      	ldr	r3, [sp, #24]
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	9306      	str	r3, [sp, #24]
 8001746:	9b06      	ldr	r3, [sp, #24]
 8001748:	069f      	lsls	r7, r3, #26
 800174a:	f140 84cb 	bpl.w	80020e4 <_vfprintf_r+0xca8>
 800174e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001750:	3707      	adds	r7, #7
 8001752:	f027 0707 	bic.w	r7, r7, #7
 8001756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800175a:	f107 0108 	add.w	r1, r7, #8
 800175e:	910d      	str	r1, [sp, #52]	; 0x34
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	2a00      	cmp	r2, #0
 8001766:	f173 0300 	sbcs.w	r3, r3, #0
 800176a:	f2c0 8615 	blt.w	8002398 <_vfprintf_r+0xf5c>
 800176e:	f1bb 0f00 	cmp.w	fp, #0
 8001772:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8001776:	f2c0 854f 	blt.w	8002218 <_vfprintf_r+0xddc>
 800177a:	9b06      	ldr	r3, [sp, #24]
 800177c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001780:	9306      	str	r3, [sp, #24]
 8001782:	ea54 0305 	orrs.w	r3, r4, r5
 8001786:	f000 81e3 	beq.w	8001b50 <_vfprintf_r+0x714>
 800178a:	2d00      	cmp	r5, #0
 800178c:	bf08      	it	eq
 800178e:	2c0a      	cmpeq	r4, #10
 8001790:	f0c0 81e3 	bcc.w	8001b5a <_vfprintf_r+0x71e>
 8001794:	ae2e      	add	r6, sp, #184	; 0xb8
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	220a      	movs	r2, #10
 800179c:	2300      	movs	r3, #0
 800179e:	f7ff fb17 	bl	8000dd0 <__aeabi_uldivmod>
 80017a2:	3230      	adds	r2, #48	; 0x30
 80017a4:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80017a8:	4620      	mov	r0, r4
 80017aa:	4629      	mov	r1, r5
 80017ac:	2300      	movs	r3, #0
 80017ae:	220a      	movs	r2, #10
 80017b0:	f7ff fb0e 	bl	8000dd0 <__aeabi_uldivmod>
 80017b4:	4604      	mov	r4, r0
 80017b6:	460d      	mov	r5, r1
 80017b8:	ea54 0305 	orrs.w	r3, r4, r5
 80017bc:	d1eb      	bne.n	8001796 <_vfprintf_r+0x35a>
 80017be:	ab2e      	add	r3, sp, #184	; 0xb8
 80017c0:	1b9b      	subs	r3, r3, r6
 80017c2:	930c      	str	r3, [sp, #48]	; 0x30
 80017c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017c6:	455b      	cmp	r3, fp
 80017c8:	bfb8      	it	lt
 80017ca:	465b      	movlt	r3, fp
 80017cc:	9307      	str	r3, [sp, #28]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9310      	str	r3, [sp, #64]	; 0x40
 80017d2:	b117      	cbz	r7, 80017da <_vfprintf_r+0x39e>
 80017d4:	9b07      	ldr	r3, [sp, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	9307      	str	r3, [sp, #28]
 80017da:	9b06      	ldr	r3, [sp, #24]
 80017dc:	f013 0302 	ands.w	r3, r3, #2
 80017e0:	930e      	str	r3, [sp, #56]	; 0x38
 80017e2:	d002      	beq.n	80017ea <_vfprintf_r+0x3ae>
 80017e4:	9b07      	ldr	r3, [sp, #28]
 80017e6:	3302      	adds	r3, #2
 80017e8:	9307      	str	r3, [sp, #28]
 80017ea:	9b06      	ldr	r3, [sp, #24]
 80017ec:	f013 0884 	ands.w	r8, r3, #132	; 0x84
 80017f0:	f040 82de 	bne.w	8001db0 <_vfprintf_r+0x974>
 80017f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017f6:	9a07      	ldr	r2, [sp, #28]
 80017f8:	1a9d      	subs	r5, r3, r2
 80017fa:	2d00      	cmp	r5, #0
 80017fc:	f340 82d8 	ble.w	8001db0 <_vfprintf_r+0x974>
 8001800:	2d10      	cmp	r5, #16
 8001802:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001804:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001806:	4f35      	ldr	r7, [pc, #212]	; (80018dc <_vfprintf_r+0x4a0>)
 8001808:	dd21      	ble.n	800184e <_vfprintf_r+0x412>
 800180a:	464b      	mov	r3, r9
 800180c:	2410      	movs	r4, #16
 800180e:	46b1      	mov	r9, r6
 8001810:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001812:	e004      	b.n	800181e <_vfprintf_r+0x3e2>
 8001814:	3d10      	subs	r5, #16
 8001816:	2d10      	cmp	r5, #16
 8001818:	f103 0308 	add.w	r3, r3, #8
 800181c:	dd15      	ble.n	800184a <_vfprintf_r+0x40e>
 800181e:	3201      	adds	r2, #1
 8001820:	3110      	adds	r1, #16
 8001822:	2a07      	cmp	r2, #7
 8001824:	9123      	str	r1, [sp, #140]	; 0x8c
 8001826:	9222      	str	r2, [sp, #136]	; 0x88
 8001828:	601f      	str	r7, [r3, #0]
 800182a:	605c      	str	r4, [r3, #4]
 800182c:	ddf2      	ble.n	8001814 <_vfprintf_r+0x3d8>
 800182e:	aa21      	add	r2, sp, #132	; 0x84
 8001830:	4651      	mov	r1, sl
 8001832:	4630      	mov	r0, r6
 8001834:	f003 fb8e 	bl	8004f54 <__sprint_r>
 8001838:	2800      	cmp	r0, #0
 800183a:	f47f af2e 	bne.w	800169a <_vfprintf_r+0x25e>
 800183e:	3d10      	subs	r5, #16
 8001840:	2d10      	cmp	r5, #16
 8001842:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001844:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001846:	ab2e      	add	r3, sp, #184	; 0xb8
 8001848:	dce9      	bgt.n	800181e <_vfprintf_r+0x3e2>
 800184a:	464e      	mov	r6, r9
 800184c:	4699      	mov	r9, r3
 800184e:	3201      	adds	r2, #1
 8001850:	186c      	adds	r4, r5, r1
 8001852:	2a07      	cmp	r2, #7
 8001854:	9423      	str	r4, [sp, #140]	; 0x8c
 8001856:	9222      	str	r2, [sp, #136]	; 0x88
 8001858:	f8c9 7000 	str.w	r7, [r9]
 800185c:	f8c9 5004 	str.w	r5, [r9, #4]
 8001860:	f300 8431 	bgt.w	80020c6 <_vfprintf_r+0xc8a>
 8001864:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8001868:	f109 0908 	add.w	r9, r9, #8
 800186c:	b177      	cbz	r7, 800188c <_vfprintf_r+0x450>
 800186e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001870:	3301      	adds	r3, #1
 8001872:	3401      	adds	r4, #1
 8001874:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8001878:	2201      	movs	r2, #1
 800187a:	2b07      	cmp	r3, #7
 800187c:	9423      	str	r4, [sp, #140]	; 0x8c
 800187e:	9322      	str	r3, [sp, #136]	; 0x88
 8001880:	e889 0006 	stmia.w	r9, {r1, r2}
 8001884:	f300 83aa 	bgt.w	8001fdc <_vfprintf_r+0xba0>
 8001888:	f109 0908 	add.w	r9, r9, #8
 800188c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800188e:	b16b      	cbz	r3, 80018ac <_vfprintf_r+0x470>
 8001890:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001892:	3301      	adds	r3, #1
 8001894:	3402      	adds	r4, #2
 8001896:	a91a      	add	r1, sp, #104	; 0x68
 8001898:	2202      	movs	r2, #2
 800189a:	2b07      	cmp	r3, #7
 800189c:	9423      	str	r4, [sp, #140]	; 0x8c
 800189e:	9322      	str	r3, [sp, #136]	; 0x88
 80018a0:	e889 0006 	stmia.w	r9, {r1, r2}
 80018a4:	f300 83a6 	bgt.w	8001ff4 <_vfprintf_r+0xbb8>
 80018a8:	f109 0908 	add.w	r9, r9, #8
 80018ac:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80018b0:	f000 82e2 	beq.w	8001e78 <_vfprintf_r+0xa3c>
 80018b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018b6:	ebc3 070b 	rsb	r7, r3, fp
 80018ba:	2f00      	cmp	r7, #0
 80018bc:	dd3e      	ble.n	800193c <_vfprintf_r+0x500>
 80018be:	2f10      	cmp	r7, #16
 80018c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018c2:	f8df 801c 	ldr.w	r8, [pc, #28]	; 80018e0 <_vfprintf_r+0x4a4>
 80018c6:	dd2c      	ble.n	8001922 <_vfprintf_r+0x4e6>
 80018c8:	4642      	mov	r2, r8
 80018ca:	f04f 0b10 	mov.w	fp, #16
 80018ce:	46b0      	mov	r8, r6
 80018d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80018d2:	4616      	mov	r6, r2
 80018d4:	e00b      	b.n	80018ee <_vfprintf_r+0x4b2>
 80018d6:	bf00      	nop
 80018d8:	08008374 	.word	0x08008374
 80018dc:	08008340 	.word	0x08008340
 80018e0:	08008330 	.word	0x08008330
 80018e4:	3f10      	subs	r7, #16
 80018e6:	2f10      	cmp	r7, #16
 80018e8:	f109 0908 	add.w	r9, r9, #8
 80018ec:	dd16      	ble.n	800191c <_vfprintf_r+0x4e0>
 80018ee:	3301      	adds	r3, #1
 80018f0:	3410      	adds	r4, #16
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	9423      	str	r4, [sp, #140]	; 0x8c
 80018f6:	9322      	str	r3, [sp, #136]	; 0x88
 80018f8:	e889 0840 	stmia.w	r9, {r6, fp}
 80018fc:	ddf2      	ble.n	80018e4 <_vfprintf_r+0x4a8>
 80018fe:	aa21      	add	r2, sp, #132	; 0x84
 8001900:	4651      	mov	r1, sl
 8001902:	4628      	mov	r0, r5
 8001904:	f003 fb26 	bl	8004f54 <__sprint_r>
 8001908:	2800      	cmp	r0, #0
 800190a:	f47f aec6 	bne.w	800169a <_vfprintf_r+0x25e>
 800190e:	3f10      	subs	r7, #16
 8001910:	2f10      	cmp	r7, #16
 8001912:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001916:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800191a:	dce8      	bgt.n	80018ee <_vfprintf_r+0x4b2>
 800191c:	4632      	mov	r2, r6
 800191e:	4646      	mov	r6, r8
 8001920:	4690      	mov	r8, r2
 8001922:	3301      	adds	r3, #1
 8001924:	443c      	add	r4, r7
 8001926:	2b07      	cmp	r3, #7
 8001928:	9423      	str	r4, [sp, #140]	; 0x8c
 800192a:	9322      	str	r3, [sp, #136]	; 0x88
 800192c:	f8c9 8000 	str.w	r8, [r9]
 8001930:	f8c9 7004 	str.w	r7, [r9, #4]
 8001934:	f300 8346 	bgt.w	8001fc4 <_vfprintf_r+0xb88>
 8001938:	f109 0908 	add.w	r9, r9, #8
 800193c:	9b06      	ldr	r3, [sp, #24]
 800193e:	05dd      	lsls	r5, r3, #23
 8001940:	f100 8238 	bmi.w	8001db4 <_vfprintf_r+0x978>
 8001944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001948:	f8c9 6000 	str.w	r6, [r9]
 800194c:	3301      	adds	r3, #1
 800194e:	440c      	add	r4, r1
 8001950:	2b07      	cmp	r3, #7
 8001952:	9423      	str	r4, [sp, #140]	; 0x8c
 8001954:	f8c9 1004 	str.w	r1, [r9, #4]
 8001958:	9322      	str	r3, [sp, #136]	; 0x88
 800195a:	f300 8317 	bgt.w	8001f8c <_vfprintf_r+0xb50>
 800195e:	f109 0908 	add.w	r9, r9, #8
 8001962:	9b06      	ldr	r3, [sp, #24]
 8001964:	0758      	lsls	r0, r3, #29
 8001966:	d53d      	bpl.n	80019e4 <_vfprintf_r+0x5a8>
 8001968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800196a:	9a07      	ldr	r2, [sp, #28]
 800196c:	1a9d      	subs	r5, r3, r2
 800196e:	2d00      	cmp	r5, #0
 8001970:	dd38      	ble.n	80019e4 <_vfprintf_r+0x5a8>
 8001972:	2d10      	cmp	r5, #16
 8001974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001976:	4fb0      	ldr	r7, [pc, #704]	; (8001c38 <_vfprintf_r+0x7fc>)
 8001978:	dd21      	ble.n	80019be <_vfprintf_r+0x582>
 800197a:	2610      	movs	r6, #16
 800197c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8001980:	e004      	b.n	800198c <_vfprintf_r+0x550>
 8001982:	3d10      	subs	r5, #16
 8001984:	2d10      	cmp	r5, #16
 8001986:	f109 0908 	add.w	r9, r9, #8
 800198a:	dd18      	ble.n	80019be <_vfprintf_r+0x582>
 800198c:	3301      	adds	r3, #1
 800198e:	3410      	adds	r4, #16
 8001990:	2b07      	cmp	r3, #7
 8001992:	9423      	str	r4, [sp, #140]	; 0x8c
 8001994:	9322      	str	r3, [sp, #136]	; 0x88
 8001996:	f8c9 7000 	str.w	r7, [r9]
 800199a:	f8c9 6004 	str.w	r6, [r9, #4]
 800199e:	ddf0      	ble.n	8001982 <_vfprintf_r+0x546>
 80019a0:	aa21      	add	r2, sp, #132	; 0x84
 80019a2:	4651      	mov	r1, sl
 80019a4:	4640      	mov	r0, r8
 80019a6:	f003 fad5 	bl	8004f54 <__sprint_r>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	f47f ae75 	bne.w	800169a <_vfprintf_r+0x25e>
 80019b0:	3d10      	subs	r5, #16
 80019b2:	2d10      	cmp	r5, #16
 80019b4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80019b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80019b8:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80019bc:	dce6      	bgt.n	800198c <_vfprintf_r+0x550>
 80019be:	3301      	adds	r3, #1
 80019c0:	442c      	add	r4, r5
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	9423      	str	r4, [sp, #140]	; 0x8c
 80019c6:	9322      	str	r3, [sp, #136]	; 0x88
 80019c8:	f8c9 7000 	str.w	r7, [r9]
 80019cc:	f8c9 5004 	str.w	r5, [r9, #4]
 80019d0:	dd08      	ble.n	80019e4 <_vfprintf_r+0x5a8>
 80019d2:	aa21      	add	r2, sp, #132	; 0x84
 80019d4:	4651      	mov	r1, sl
 80019d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019d8:	f003 fabc 	bl	8004f54 <__sprint_r>
 80019dc:	2800      	cmp	r0, #0
 80019de:	f47f ae5c 	bne.w	800169a <_vfprintf_r+0x25e>
 80019e2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80019e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80019e8:	9907      	ldr	r1, [sp, #28]
 80019ea:	428a      	cmp	r2, r1
 80019ec:	bfac      	ite	ge
 80019ee:	189b      	addge	r3, r3, r2
 80019f0:	185b      	addlt	r3, r3, r1
 80019f2:	930a      	str	r3, [sp, #40]	; 0x28
 80019f4:	2c00      	cmp	r4, #0
 80019f6:	f040 82db 	bne.w	8001fb0 <_vfprintf_r+0xb74>
 80019fa:	2300      	movs	r3, #0
 80019fc:	9322      	str	r3, [sp, #136]	; 0x88
 80019fe:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8001a02:	e55a      	b.n	80014ba <_vfprintf_r+0x7e>
 8001a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a06:	46b3      	mov	fp, r6
 8001a08:	9008      	str	r0, [sp, #32]
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	f041 8031 	bne.w	8002a72 <_vfprintf_r+0x1636>
 8001a10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001a12:	3707      	adds	r7, #7
 8001a14:	f027 0307 	bic.w	r3, r7, #7
 8001a18:	f103 0208 	add.w	r2, r3, #8
 8001a1c:	920d      	str	r2, [sp, #52]	; 0x34
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	9212      	str	r2, [sp, #72]	; 0x48
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	9313      	str	r3, [sp, #76]	; 0x4c
 8001a26:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001a28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	f003 f9d7 	bl	8004de0 <__fpclassifyd>
 8001a32:	2801      	cmp	r0, #1
 8001a34:	f040 84c1 	bne.w	80023ba <_vfprintf_r+0xf7e>
 8001a38:	4628      	mov	r0, r5
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f7ff f976 	bl	8000d30 <__aeabi_dcmplt>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	f040 86ce 	bne.w	80027e6 <_vfprintf_r+0x13aa>
 8001a4a:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8001a4e:	9906      	ldr	r1, [sp, #24]
 8001a50:	4e7a      	ldr	r6, [pc, #488]	; (8001c3c <_vfprintf_r+0x800>)
 8001a52:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <_vfprintf_r+0x804>)
 8001a54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001a58:	9106      	str	r1, [sp, #24]
 8001a5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	f04f 0b00 	mov.w	fp, #0
 8001a62:	9207      	str	r2, [sp, #28]
 8001a64:	2947      	cmp	r1, #71	; 0x47
 8001a66:	bfd8      	it	le
 8001a68:	461e      	movle	r6, r3
 8001a6a:	920c      	str	r2, [sp, #48]	; 0x30
 8001a6c:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8001a70:	e6af      	b.n	80017d2 <_vfprintf_r+0x396>
 8001a72:	9b06      	ldr	r3, [sp, #24]
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	9306      	str	r3, [sp, #24]
 8001a7a:	7803      	ldrb	r3, [r0, #0]
 8001a7c:	e552      	b.n	8001524 <_vfprintf_r+0xe8>
 8001a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a80:	46b3      	mov	fp, r6
 8001a82:	9008      	str	r0, [sp, #32]
 8001a84:	2a00      	cmp	r2, #0
 8001a86:	f040 87fc 	bne.w	8002a82 <_vfprintf_r+0x1646>
 8001a8a:	9b06      	ldr	r3, [sp, #24]
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	9306      	str	r3, [sp, #24]
 8001a92:	9a06      	ldr	r2, [sp, #24]
 8001a94:	f012 0320 	ands.w	r3, r2, #32
 8001a98:	f000 833e 	beq.w	8002118 <_vfprintf_r+0xcdc>
 8001a9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001a9e:	3707      	adds	r7, #7
 8001aa0:	f027 0307 	bic.w	r3, r7, #7
 8001aa4:	2700      	movs	r7, #0
 8001aa6:	f103 0108 	add.w	r1, r3, #8
 8001aaa:	45bb      	cmp	fp, r7
 8001aac:	910d      	str	r1, [sp, #52]	; 0x34
 8001aae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ab2:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8001ab6:	f2c0 8555 	blt.w	8002564 <_vfprintf_r+0x1128>
 8001aba:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001abe:	9306      	str	r3, [sp, #24]
 8001ac0:	ea54 0305 	orrs.w	r3, r4, r5
 8001ac4:	f000 815f 	beq.w	8001d86 <_vfprintf_r+0x94a>
 8001ac8:	ae2e      	add	r6, sp, #184	; 0xb8
 8001aca:	08e2      	lsrs	r2, r4, #3
 8001acc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8001ad0:	08e9      	lsrs	r1, r5, #3
 8001ad2:	f004 0307 	and.w	r3, r4, #7
 8001ad6:	460d      	mov	r5, r1
 8001ad8:	4614      	mov	r4, r2
 8001ada:	3330      	adds	r3, #48	; 0x30
 8001adc:	ea54 0205 	orrs.w	r2, r4, r5
 8001ae0:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001ae4:	d1f1      	bne.n	8001aca <_vfprintf_r+0x68e>
 8001ae6:	9a06      	ldr	r2, [sp, #24]
 8001ae8:	07d2      	lsls	r2, r2, #31
 8001aea:	f57f ae68 	bpl.w	80017be <_vfprintf_r+0x382>
 8001aee:	2b30      	cmp	r3, #48	; 0x30
 8001af0:	f43f ae65 	beq.w	80017be <_vfprintf_r+0x382>
 8001af4:	2230      	movs	r2, #48	; 0x30
 8001af6:	1e73      	subs	r3, r6, #1
 8001af8:	f806 2c01 	strb.w	r2, [r6, #-1]
 8001afc:	aa2e      	add	r2, sp, #184	; 0xb8
 8001afe:	1ad2      	subs	r2, r2, r3
 8001b00:	920c      	str	r2, [sp, #48]	; 0x30
 8001b02:	461e      	mov	r6, r3
 8001b04:	e65e      	b.n	80017c4 <_vfprintf_r+0x388>
 8001b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b08:	46b3      	mov	fp, r6
 8001b0a:	9008      	str	r0, [sp, #32]
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	f040 87c3 	bne.w	8002a98 <_vfprintf_r+0x165c>
 8001b12:	9b06      	ldr	r3, [sp, #24]
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	9306      	str	r3, [sp, #24]
 8001b1a:	9a06      	ldr	r2, [sp, #24]
 8001b1c:	f012 0320 	ands.w	r3, r2, #32
 8001b20:	f000 8340 	beq.w	80021a4 <_vfprintf_r+0xd68>
 8001b24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001b26:	3707      	adds	r7, #7
 8001b28:	f027 0307 	bic.w	r3, r7, #7
 8001b2c:	2700      	movs	r7, #0
 8001b2e:	f103 0108 	add.w	r1, r3, #8
 8001b32:	45bb      	cmp	fp, r7
 8001b34:	910d      	str	r1, [sp, #52]	; 0x34
 8001b36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b3a:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8001b3e:	f2c0 836b 	blt.w	8002218 <_vfprintf_r+0xddc>
 8001b42:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001b46:	9306      	str	r3, [sp, #24]
 8001b48:	ea54 0305 	orrs.w	r3, r4, r5
 8001b4c:	f47f ae1d 	bne.w	800178a <_vfprintf_r+0x34e>
 8001b50:	f1bb 0f00 	cmp.w	fp, #0
 8001b54:	f000 80fb 	beq.w	8001d4e <_vfprintf_r+0x912>
 8001b58:	2400      	movs	r4, #0
 8001b5a:	ae3e      	add	r6, sp, #248	; 0xf8
 8001b5c:	3430      	adds	r4, #48	; 0x30
 8001b5e:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8001b62:	e62c      	b.n	80017be <_vfprintf_r+0x382>
 8001b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b66:	46b3      	mov	fp, r6
 8001b68:	9008      	str	r0, [sp, #32]
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	f040 8790 	bne.w	8002a90 <_vfprintf_r+0x1654>
 8001b70:	9b06      	ldr	r3, [sp, #24]
 8001b72:	4834      	ldr	r0, [pc, #208]	; (8001c44 <_vfprintf_r+0x808>)
 8001b74:	069c      	lsls	r4, r3, #26
 8001b76:	f140 809f 	bpl.w	8001cb8 <_vfprintf_r+0x87c>
 8001b7a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001b7c:	3707      	adds	r7, #7
 8001b7e:	f027 0307 	bic.w	r3, r7, #7
 8001b82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b86:	f103 0208 	add.w	r2, r3, #8
 8001b8a:	920d      	str	r2, [sp, #52]	; 0x34
 8001b8c:	9a06      	ldr	r2, [sp, #24]
 8001b8e:	f012 0701 	ands.w	r7, r2, #1
 8001b92:	f000 823b 	beq.w	800200c <_vfprintf_r+0xbd0>
 8001b96:	ea54 0305 	orrs.w	r3, r4, r5
 8001b9a:	f000 84f7 	beq.w	800258c <_vfprintf_r+0x1150>
 8001b9e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8001ba2:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8001ba6:	2700      	movs	r7, #0
 8001ba8:	9a06      	ldr	r2, [sp, #24]
 8001baa:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8001bae:	2330      	movs	r3, #48	; 0x30
 8001bb0:	45bb      	cmp	fp, r7
 8001bb2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8001bb6:	f042 0302 	orr.w	r3, r2, #2
 8001bba:	f2c0 860b 	blt.w	80027d4 <_vfprintf_r+0x1398>
 8001bbe:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	9306      	str	r3, [sp, #24]
 8001bc8:	ae2e      	add	r6, sp, #184	; 0xb8
 8001bca:	0923      	lsrs	r3, r4, #4
 8001bcc:	f004 010f 	and.w	r1, r4, #15
 8001bd0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8001bd4:	092a      	lsrs	r2, r5, #4
 8001bd6:	461c      	mov	r4, r3
 8001bd8:	4615      	mov	r5, r2
 8001bda:	5c43      	ldrb	r3, [r0, r1]
 8001bdc:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001be0:	ea54 0305 	orrs.w	r3, r4, r5
 8001be4:	d1f1      	bne.n	8001bca <_vfprintf_r+0x78e>
 8001be6:	e5ea      	b.n	80017be <_vfprintf_r+0x382>
 8001be8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bec:	680a      	ldr	r2, [r1, #0]
 8001bee:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	461f      	mov	r7, r3
 8001bf8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8001bfc:	3204      	adds	r2, #4
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9008      	str	r0, [sp, #32]
 8001c02:	9307      	str	r3, [sp, #28]
 8001c04:	46bb      	mov	fp, r7
 8001c06:	9710      	str	r7, [sp, #64]	; 0x40
 8001c08:	920d      	str	r2, [sp, #52]	; 0x34
 8001c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8001c0c:	ae24      	add	r6, sp, #144	; 0x90
 8001c0e:	e5e4      	b.n	80017da <_vfprintf_r+0x39e>
 8001c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c12:	46b3      	mov	fp, r6
 8001c14:	9008      	str	r0, [sp, #32]
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	f43f af3b 	beq.w	8001a92 <_vfprintf_r+0x656>
 8001c1c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001c20:	e737      	b.n	8001a92 <_vfprintf_r+0x656>
 8001c22:	7803      	ldrb	r3, [r0, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	212b      	movs	r1, #43	; 0x2b
 8001c28:	e47c      	b.n	8001524 <_vfprintf_r+0xe8>
 8001c2a:	9b06      	ldr	r3, [sp, #24]
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	9306      	str	r3, [sp, #24]
 8001c32:	7803      	ldrb	r3, [r0, #0]
 8001c34:	e476      	b.n	8001524 <_vfprintf_r+0xe8>
 8001c36:	bf00      	nop
 8001c38:	08008340 	.word	0x08008340
 8001c3c:	08008354 	.word	0x08008354
 8001c40:	08008350 	.word	0x08008350
 8001c44:	08008360 	.word	0x08008360
 8001c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c4c:	46b3      	mov	fp, r6
 8001c4e:	6816      	ldr	r6, [r2, #0]
 8001c50:	9008      	str	r0, [sp, #32]
 8001c52:	2400      	movs	r4, #0
 8001c54:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
 8001c58:	1d17      	adds	r7, r2, #4
 8001c5a:	2e00      	cmp	r6, #0
 8001c5c:	f000 859c 	beq.w	8002798 <_vfprintf_r+0x135c>
 8001c60:	f1bb 0f00 	cmp.w	fp, #0
 8001c64:	f2c0 8567 	blt.w	8002736 <_vfprintf_r+0x12fa>
 8001c68:	465a      	mov	r2, fp
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	f7fe fac7 	bl	8000200 <memchr>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	f000 85e9 	beq.w	800284a <_vfprintf_r+0x140e>
 8001c78:	1b83      	subs	r3, r0, r6
 8001c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8001c7c:	46a3      	mov	fp, r4
 8001c7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c82:	970d      	str	r7, [sp, #52]	; 0x34
 8001c84:	9307      	str	r3, [sp, #28]
 8001c86:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8001c8a:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8001c8e:	e5a0      	b.n	80017d2 <_vfprintf_r+0x396>
 8001c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c92:	46b3      	mov	fp, r6
 8001c94:	9008      	str	r0, [sp, #32]
 8001c96:	2a00      	cmp	r2, #0
 8001c98:	f43f af3f 	beq.w	8001b1a <_vfprintf_r+0x6de>
 8001c9c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001ca0:	e73b      	b.n	8001b1a <_vfprintf_r+0x6de>
 8001ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ca4:	46b3      	mov	fp, r6
 8001ca6:	9008      	str	r0, [sp, #32]
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	f040 86f9 	bne.w	8002aa0 <_vfprintf_r+0x1664>
 8001cae:	9b06      	ldr	r3, [sp, #24]
 8001cb0:	48bc      	ldr	r0, [pc, #752]	; (8001fa4 <_vfprintf_r+0xb68>)
 8001cb2:	069c      	lsls	r4, r3, #26
 8001cb4:	f53f af61 	bmi.w	8001b7a <_vfprintf_r+0x73e>
 8001cb8:	9b06      	ldr	r3, [sp, #24]
 8001cba:	06d9      	lsls	r1, r3, #27
 8001cbc:	f140 841c 	bpl.w	80024f8 <_vfprintf_r+0x10bc>
 8001cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	6814      	ldr	r4, [r2, #0]
 8001cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8001cca:	2500      	movs	r5, #0
 8001ccc:	e75e      	b.n	8001b8c <_vfprintf_r+0x750>
 8001cce:	7803      	ldrb	r3, [r0, #0]
 8001cd0:	2900      	cmp	r1, #0
 8001cd2:	f47f ac27 	bne.w	8001524 <_vfprintf_r+0xe8>
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2120      	movs	r1, #32
 8001cda:	e423      	b.n	8001524 <_vfprintf_r+0xe8>
 8001cdc:	9b06      	ldr	r3, [sp, #24]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	9306      	str	r3, [sp, #24]
 8001ce4:	7803      	ldrb	r3, [r0, #0]
 8001ce6:	e41d      	b.n	8001524 <_vfprintf_r+0xe8>
 8001ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8001cea:	46b3      	mov	fp, r6
 8001cec:	9008      	str	r0, [sp, #32]
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	f43f ad29 	beq.w	8001746 <_vfprintf_r+0x30a>
 8001cf4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001cf8:	e525      	b.n	8001746 <_vfprintf_r+0x30a>
 8001cfa:	9b06      	ldr	r3, [sp, #24]
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d00:	9306      	str	r3, [sp, #24]
 8001d02:	7803      	ldrb	r3, [r0, #0]
 8001d04:	e40e      	b.n	8001524 <_vfprintf_r+0xe8>
 8001d06:	7803      	ldrb	r3, [r0, #0]
 8001d08:	2b6c      	cmp	r3, #108	; 0x6c
 8001d0a:	f000 84e6 	beq.w	80026da <_vfprintf_r+0x129e>
 8001d0e:	9c06      	ldr	r4, [sp, #24]
 8001d10:	f044 0410 	orr.w	r4, r4, #16
 8001d14:	9406      	str	r4, [sp, #24]
 8001d16:	e405      	b.n	8001524 <_vfprintf_r+0xe8>
 8001d18:	9008      	str	r0, [sp, #32]
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	f040 86ca 	bne.w	8002ab4 <_vfprintf_r+0x1678>
 8001d20:	9b06      	ldr	r3, [sp, #24]
 8001d22:	069f      	lsls	r7, r3, #26
 8001d24:	f140 83d1 	bpl.w	80024ca <_vfprintf_r+0x108e>
 8001d28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d2c:	6813      	ldr	r3, [r2, #0]
 8001d2e:	17cd      	asrs	r5, r1, #31
 8001d30:	4608      	mov	r0, r1
 8001d32:	3204      	adds	r2, #4
 8001d34:	4629      	mov	r1, r5
 8001d36:	920d      	str	r2, [sp, #52]	; 0x34
 8001d38:	e9c3 0100 	strd	r0, r1, [r3]
 8001d3c:	f7ff bbbd 	b.w	80014ba <_vfprintf_r+0x7e>
 8001d40:	4898      	ldr	r0, [pc, #608]	; (8001fa4 <_vfprintf_r+0xb68>)
 8001d42:	920f      	str	r2, [sp, #60]	; 0x3c
 8001d44:	f1bb 0f00 	cmp.w	fp, #0
 8001d48:	f040 8171 	bne.w	800202e <_vfprintf_r+0xbf2>
 8001d4c:	465f      	mov	r7, fp
 8001d4e:	f04f 0b00 	mov.w	fp, #0
 8001d52:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8001d56:	ae2e      	add	r6, sp, #184	; 0xb8
 8001d58:	e534      	b.n	80017c4 <_vfprintf_r+0x388>
 8001d5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d5c:	9008      	str	r0, [sp, #32]
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	f040 86a4 	bne.w	8002aac <_vfprintf_r+0x1670>
 8001d64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	f43f ac90 	beq.w	800168c <_vfprintf_r+0x250>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2101      	movs	r1, #1
 8001d70:	461f      	mov	r7, r3
 8001d72:	9107      	str	r1, [sp, #28]
 8001d74:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8001d78:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8001d80:	910c      	str	r1, [sp, #48]	; 0x30
 8001d82:	ae24      	add	r6, sp, #144	; 0x90
 8001d84:	e529      	b.n	80017da <_vfprintf_r+0x39e>
 8001d86:	f1bb 0f00 	cmp.w	fp, #0
 8001d8a:	f000 854f 	beq.w	800282c <_vfprintf_r+0x13f0>
 8001d8e:	2700      	movs	r7, #0
 8001d90:	2400      	movs	r4, #0
 8001d92:	2500      	movs	r5, #0
 8001d94:	e698      	b.n	8001ac8 <_vfprintf_r+0x68c>
 8001d96:	4883      	ldr	r0, [pc, #524]	; (8001fa4 <_vfprintf_r+0xb68>)
 8001d98:	9306      	str	r3, [sp, #24]
 8001d9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8001d9c:	ea54 0305 	orrs.w	r3, r4, r5
 8001da0:	970d      	str	r7, [sp, #52]	; 0x34
 8001da2:	f04f 0700 	mov.w	r7, #0
 8001da6:	f47f af0f 	bne.w	8001bc8 <_vfprintf_r+0x78c>
 8001daa:	2400      	movs	r4, #0
 8001dac:	2500      	movs	r5, #0
 8001dae:	e70b      	b.n	8001bc8 <_vfprintf_r+0x78c>
 8001db0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001db2:	e55b      	b.n	800186c <_vfprintf_r+0x430>
 8001db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001db6:	2b65      	cmp	r3, #101	; 0x65
 8001db8:	f340 80a0 	ble.w	8001efc <_vfprintf_r+0xac0>
 8001dbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001dbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f7fe ffaa 	bl	8000d1c <__aeabi_dcmpeq>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	f000 8132 	beq.w	8002032 <_vfprintf_r+0xbf6>
 8001dce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001dd0:	4a75      	ldr	r2, [pc, #468]	; (8001fa8 <_vfprintf_r+0xb6c>)
 8001dd2:	f8c9 2000 	str.w	r2, [r9]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	3401      	adds	r4, #1
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2b07      	cmp	r3, #7
 8001dde:	9423      	str	r4, [sp, #140]	; 0x8c
 8001de0:	9322      	str	r3, [sp, #136]	; 0x88
 8001de2:	f8c9 2004 	str.w	r2, [r9, #4]
 8001de6:	f300 83dd 	bgt.w	80025a4 <_vfprintf_r+0x1168>
 8001dea:	f109 0908 	add.w	r9, r9, #8
 8001dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001df0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001df2:	4293      	cmp	r3, r2
 8001df4:	db03      	blt.n	8001dfe <_vfprintf_r+0x9c2>
 8001df6:	9b06      	ldr	r3, [sp, #24]
 8001df8:	07d8      	lsls	r0, r3, #31
 8001dfa:	f57f adb2 	bpl.w	8001962 <_vfprintf_r+0x526>
 8001dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e00:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001e02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001e04:	f8c9 2000 	str.w	r2, [r9]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	440c      	add	r4, r1
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	9423      	str	r4, [sp, #140]	; 0x8c
 8001e10:	f8c9 1004 	str.w	r1, [r9, #4]
 8001e14:	9322      	str	r3, [sp, #136]	; 0x88
 8001e16:	f300 8468 	bgt.w	80026ea <_vfprintf_r+0x12ae>
 8001e1a:	f109 0908 	add.w	r9, r9, #8
 8001e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001e20:	1e5d      	subs	r5, r3, #1
 8001e22:	2d00      	cmp	r5, #0
 8001e24:	f77f ad9d 	ble.w	8001962 <_vfprintf_r+0x526>
 8001e28:	2d10      	cmp	r5, #16
 8001e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e2c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8001fac <_vfprintf_r+0xb70>
 8001e30:	f340 81d3 	ble.w	80021da <_vfprintf_r+0xd9e>
 8001e34:	4647      	mov	r7, r8
 8001e36:	2610      	movs	r6, #16
 8001e38:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8001e3c:	e005      	b.n	8001e4a <_vfprintf_r+0xa0e>
 8001e3e:	f109 0908 	add.w	r9, r9, #8
 8001e42:	3d10      	subs	r5, #16
 8001e44:	2d10      	cmp	r5, #16
 8001e46:	f340 81c7 	ble.w	80021d8 <_vfprintf_r+0xd9c>
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	3410      	adds	r4, #16
 8001e4e:	2b07      	cmp	r3, #7
 8001e50:	9423      	str	r4, [sp, #140]	; 0x8c
 8001e52:	9322      	str	r3, [sp, #136]	; 0x88
 8001e54:	f8c9 7000 	str.w	r7, [r9]
 8001e58:	f8c9 6004 	str.w	r6, [r9, #4]
 8001e5c:	ddef      	ble.n	8001e3e <_vfprintf_r+0xa02>
 8001e5e:	aa21      	add	r2, sp, #132	; 0x84
 8001e60:	4651      	mov	r1, sl
 8001e62:	4640      	mov	r0, r8
 8001e64:	f003 f876 	bl	8004f54 <__sprint_r>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	f47f ac16 	bne.w	800169a <_vfprintf_r+0x25e>
 8001e6e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001e70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e72:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8001e76:	e7e4      	b.n	8001e42 <_vfprintf_r+0xa06>
 8001e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e7a:	9a07      	ldr	r2, [sp, #28]
 8001e7c:	1a9f      	subs	r7, r3, r2
 8001e7e:	2f00      	cmp	r7, #0
 8001e80:	f77f ad18 	ble.w	80018b4 <_vfprintf_r+0x478>
 8001e84:	2f10      	cmp	r7, #16
 8001e86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e88:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8001fac <_vfprintf_r+0xb70>
 8001e8c:	dd28      	ble.n	8001ee0 <_vfprintf_r+0xaa4>
 8001e8e:	4641      	mov	r1, r8
 8001e90:	4622      	mov	r2, r4
 8001e92:	46b0      	mov	r8, r6
 8001e94:	2510      	movs	r5, #16
 8001e96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001e98:	460e      	mov	r6, r1
 8001e9a:	e004      	b.n	8001ea6 <_vfprintf_r+0xa6a>
 8001e9c:	3f10      	subs	r7, #16
 8001e9e:	2f10      	cmp	r7, #16
 8001ea0:	f109 0908 	add.w	r9, r9, #8
 8001ea4:	dd18      	ble.n	8001ed8 <_vfprintf_r+0xa9c>
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	3210      	adds	r2, #16
 8001eaa:	2b07      	cmp	r3, #7
 8001eac:	9223      	str	r2, [sp, #140]	; 0x8c
 8001eae:	9322      	str	r3, [sp, #136]	; 0x88
 8001eb0:	f8c9 6000 	str.w	r6, [r9]
 8001eb4:	f8c9 5004 	str.w	r5, [r9, #4]
 8001eb8:	ddf0      	ble.n	8001e9c <_vfprintf_r+0xa60>
 8001eba:	aa21      	add	r2, sp, #132	; 0x84
 8001ebc:	4651      	mov	r1, sl
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f003 f848 	bl	8004f54 <__sprint_r>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	f47f abe8 	bne.w	800169a <_vfprintf_r+0x25e>
 8001eca:	3f10      	subs	r7, #16
 8001ecc:	2f10      	cmp	r7, #16
 8001ece:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ed2:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8001ed6:	dce6      	bgt.n	8001ea6 <_vfprintf_r+0xa6a>
 8001ed8:	4614      	mov	r4, r2
 8001eda:	4632      	mov	r2, r6
 8001edc:	4646      	mov	r6, r8
 8001ede:	4690      	mov	r8, r2
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	443c      	add	r4, r7
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	9423      	str	r4, [sp, #140]	; 0x8c
 8001ee8:	9322      	str	r3, [sp, #136]	; 0x88
 8001eea:	f8c9 8000 	str.w	r8, [r9]
 8001eee:	f8c9 7004 	str.w	r7, [r9, #4]
 8001ef2:	f300 8244 	bgt.w	800237e <_vfprintf_r+0xf42>
 8001ef6:	f109 0908 	add.w	r9, r9, #8
 8001efa:	e4db      	b.n	80018b4 <_vfprintf_r+0x478>
 8001efc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001efe:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	f340 81f9 	ble.w	80022f8 <_vfprintf_r+0xebc>
 8001f06:	3501      	adds	r5, #1
 8001f08:	3401      	adds	r4, #1
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2d07      	cmp	r5, #7
 8001f0e:	9423      	str	r4, [sp, #140]	; 0x8c
 8001f10:	9522      	str	r5, [sp, #136]	; 0x88
 8001f12:	f8c9 6000 	str.w	r6, [r9]
 8001f16:	f8c9 3004 	str.w	r3, [r9, #4]
 8001f1a:	f300 820a 	bgt.w	8002332 <_vfprintf_r+0xef6>
 8001f1e:	f109 0908 	add.w	r9, r9, #8
 8001f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001f24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001f26:	f8c9 3000 	str.w	r3, [r9]
 8001f2a:	3501      	adds	r5, #1
 8001f2c:	4414      	add	r4, r2
 8001f2e:	2d07      	cmp	r5, #7
 8001f30:	9423      	str	r4, [sp, #140]	; 0x8c
 8001f32:	9522      	str	r5, [sp, #136]	; 0x88
 8001f34:	f8c9 2004 	str.w	r2, [r9, #4]
 8001f38:	f300 8208 	bgt.w	800234c <_vfprintf_r+0xf10>
 8001f3c:	f109 0908 	add.w	r9, r9, #8
 8001f40:	2300      	movs	r3, #0
 8001f42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001f44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001f46:	2200      	movs	r2, #0
 8001f48:	f7fe fee8 	bl	8000d1c <__aeabi_dcmpeq>
 8001f4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	f040 80fe 	bne.w	8002150 <_vfprintf_r+0xd14>
 8001f54:	3b01      	subs	r3, #1
 8001f56:	3501      	adds	r5, #1
 8001f58:	3601      	adds	r6, #1
 8001f5a:	441c      	add	r4, r3
 8001f5c:	2d07      	cmp	r5, #7
 8001f5e:	9522      	str	r5, [sp, #136]	; 0x88
 8001f60:	9423      	str	r4, [sp, #140]	; 0x8c
 8001f62:	f8c9 6000 	str.w	r6, [r9]
 8001f66:	f8c9 3004 	str.w	r3, [r9, #4]
 8001f6a:	f300 81d5 	bgt.w	8002318 <_vfprintf_r+0xedc>
 8001f6e:	f109 0908 	add.w	r9, r9, #8
 8001f72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001f74:	f8c9 2004 	str.w	r2, [r9, #4]
 8001f78:	3501      	adds	r5, #1
 8001f7a:	4414      	add	r4, r2
 8001f7c:	ab1d      	add	r3, sp, #116	; 0x74
 8001f7e:	2d07      	cmp	r5, #7
 8001f80:	9423      	str	r4, [sp, #140]	; 0x8c
 8001f82:	9522      	str	r5, [sp, #136]	; 0x88
 8001f84:	f8c9 3000 	str.w	r3, [r9]
 8001f88:	f77f ace9 	ble.w	800195e <_vfprintf_r+0x522>
 8001f8c:	aa21      	add	r2, sp, #132	; 0x84
 8001f8e:	4651      	mov	r1, sl
 8001f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f92:	f002 ffdf 	bl	8004f54 <__sprint_r>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	f47f ab7f 	bne.w	800169a <_vfprintf_r+0x25e>
 8001f9c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001f9e:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8001fa2:	e4de      	b.n	8001962 <_vfprintf_r+0x526>
 8001fa4:	08008374 	.word	0x08008374
 8001fa8:	08008390 	.word	0x08008390
 8001fac:	08008330 	.word	0x08008330
 8001fb0:	aa21      	add	r2, sp, #132	; 0x84
 8001fb2:	4651      	mov	r1, sl
 8001fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fb6:	f002 ffcd 	bl	8004f54 <__sprint_r>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	f43f ad1d 	beq.w	80019fa <_vfprintf_r+0x5be>
 8001fc0:	f7ff bb6b 	b.w	800169a <_vfprintf_r+0x25e>
 8001fc4:	aa21      	add	r2, sp, #132	; 0x84
 8001fc6:	4651      	mov	r1, sl
 8001fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fca:	f002 ffc3 	bl	8004f54 <__sprint_r>
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	f47f ab63 	bne.w	800169a <_vfprintf_r+0x25e>
 8001fd4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001fd6:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8001fda:	e4af      	b.n	800193c <_vfprintf_r+0x500>
 8001fdc:	aa21      	add	r2, sp, #132	; 0x84
 8001fde:	4651      	mov	r1, sl
 8001fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fe2:	f002 ffb7 	bl	8004f54 <__sprint_r>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	f47f ab57 	bne.w	800169a <_vfprintf_r+0x25e>
 8001fec:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001fee:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8001ff2:	e44b      	b.n	800188c <_vfprintf_r+0x450>
 8001ff4:	aa21      	add	r2, sp, #132	; 0x84
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ffa:	f002 ffab 	bl	8004f54 <__sprint_r>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	f47f ab4b 	bne.w	800169a <_vfprintf_r+0x25e>
 8002004:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002006:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800200a:	e44f      	b.n	80018ac <_vfprintf_r+0x470>
 800200c:	f1bb 0f00 	cmp.w	fp, #0
 8002010:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8002014:	f2c0 8323 	blt.w	800265e <_vfprintf_r+0x1222>
 8002018:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800201c:	9306      	str	r3, [sp, #24]
 800201e:	ea54 0305 	orrs.w	r3, r4, r5
 8002022:	f47f add1 	bne.w	8001bc8 <_vfprintf_r+0x78c>
 8002026:	f1bb 0f00 	cmp.w	fp, #0
 800202a:	f43f ae8f 	beq.w	8001d4c <_vfprintf_r+0x910>
 800202e:	2700      	movs	r7, #0
 8002030:	e6bb      	b.n	8001daa <_vfprintf_r+0x96e>
 8002032:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002034:	2d00      	cmp	r5, #0
 8002036:	f340 82c1 	ble.w	80025bc <_vfprintf_r+0x1180>
 800203a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800203c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800203e:	4293      	cmp	r3, r2
 8002040:	bfa8      	it	ge
 8002042:	4613      	movge	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	461d      	mov	r5, r3
 8002048:	dd0d      	ble.n	8002066 <_vfprintf_r+0xc2a>
 800204a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800204c:	f8c9 6000 	str.w	r6, [r9]
 8002050:	3301      	adds	r3, #1
 8002052:	442c      	add	r4, r5
 8002054:	2b07      	cmp	r3, #7
 8002056:	9423      	str	r4, [sp, #140]	; 0x8c
 8002058:	f8c9 5004 	str.w	r5, [r9, #4]
 800205c:	9322      	str	r3, [sp, #136]	; 0x88
 800205e:	f300 8372 	bgt.w	8002746 <_vfprintf_r+0x130a>
 8002062:	f109 0908 	add.w	r9, r9, #8
 8002066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002068:	2d00      	cmp	r5, #0
 800206a:	bfa8      	it	ge
 800206c:	1b5b      	subge	r3, r3, r5
 800206e:	2b00      	cmp	r3, #0
 8002070:	461d      	mov	r5, r3
 8002072:	f340 80e1 	ble.w	8002238 <_vfprintf_r+0xdfc>
 8002076:	2d10      	cmp	r5, #16
 8002078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800207a:	f8df 87f8 	ldr.w	r8, [pc, #2040]	; 8002874 <_vfprintf_r+0x1438>
 800207e:	f340 8277 	ble.w	8002570 <_vfprintf_r+0x1134>
 8002082:	4642      	mov	r2, r8
 8002084:	2710      	movs	r7, #16
 8002086:	46b0      	mov	r8, r6
 8002088:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800208c:	4616      	mov	r6, r2
 800208e:	e005      	b.n	800209c <_vfprintf_r+0xc60>
 8002090:	f109 0908 	add.w	r9, r9, #8
 8002094:	3d10      	subs	r5, #16
 8002096:	2d10      	cmp	r5, #16
 8002098:	f340 8267 	ble.w	800256a <_vfprintf_r+0x112e>
 800209c:	3301      	adds	r3, #1
 800209e:	3410      	adds	r4, #16
 80020a0:	2b07      	cmp	r3, #7
 80020a2:	9423      	str	r4, [sp, #140]	; 0x8c
 80020a4:	9322      	str	r3, [sp, #136]	; 0x88
 80020a6:	e889 00c0 	stmia.w	r9, {r6, r7}
 80020aa:	ddf1      	ble.n	8002090 <_vfprintf_r+0xc54>
 80020ac:	aa21      	add	r2, sp, #132	; 0x84
 80020ae:	4651      	mov	r1, sl
 80020b0:	4658      	mov	r0, fp
 80020b2:	f002 ff4f 	bl	8004f54 <__sprint_r>
 80020b6:	2800      	cmp	r0, #0
 80020b8:	f47f aaef 	bne.w	800169a <_vfprintf_r+0x25e>
 80020bc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80020be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80020c0:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80020c4:	e7e6      	b.n	8002094 <_vfprintf_r+0xc58>
 80020c6:	aa21      	add	r2, sp, #132	; 0x84
 80020c8:	4651      	mov	r1, sl
 80020ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020cc:	f002 ff42 	bl	8004f54 <__sprint_r>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	f47f aae2 	bne.w	800169a <_vfprintf_r+0x25e>
 80020d6:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 80020da:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80020dc:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80020e0:	f7ff bbc4 	b.w	800186c <_vfprintf_r+0x430>
 80020e4:	9b06      	ldr	r3, [sp, #24]
 80020e6:	06de      	lsls	r6, r3, #27
 80020e8:	d40c      	bmi.n	8002104 <_vfprintf_r+0xcc8>
 80020ea:	9b06      	ldr	r3, [sp, #24]
 80020ec:	065d      	lsls	r5, r3, #25
 80020ee:	d509      	bpl.n	8002104 <_vfprintf_r+0xcc8>
 80020f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80020f2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80020f6:	3104      	adds	r1, #4
 80020f8:	17e5      	asrs	r5, r4, #31
 80020fa:	4622      	mov	r2, r4
 80020fc:	462b      	mov	r3, r5
 80020fe:	910d      	str	r1, [sp, #52]	; 0x34
 8002100:	f7ff bb30 	b.w	8001764 <_vfprintf_r+0x328>
 8002104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002106:	6814      	ldr	r4, [r2, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	3304      	adds	r3, #4
 800210c:	17e5      	asrs	r5, r4, #31
 800210e:	930d      	str	r3, [sp, #52]	; 0x34
 8002110:	4622      	mov	r2, r4
 8002112:	462b      	mov	r3, r5
 8002114:	f7ff bb26 	b.w	8001764 <_vfprintf_r+0x328>
 8002118:	9906      	ldr	r1, [sp, #24]
 800211a:	f011 0210 	ands.w	r2, r1, #16
 800211e:	f000 81f9 	beq.w	8002514 <_vfprintf_r+0x10d8>
 8002122:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002124:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002128:	f1bb 0f00 	cmp.w	fp, #0
 800212c:	6804      	ldr	r4, [r0, #0]
 800212e:	f100 0704 	add.w	r7, r0, #4
 8002132:	f04f 0500 	mov.w	r5, #0
 8002136:	f2c0 8214 	blt.w	8002562 <_vfprintf_r+0x1126>
 800213a:	460a      	mov	r2, r1
 800213c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002140:	9206      	str	r2, [sp, #24]
 8002142:	ea54 0205 	orrs.w	r2, r4, r5
 8002146:	970d      	str	r7, [sp, #52]	; 0x34
 8002148:	f43f ae1d 	beq.w	8001d86 <_vfprintf_r+0x94a>
 800214c:	461f      	mov	r7, r3
 800214e:	e4bb      	b.n	8001ac8 <_vfprintf_r+0x68c>
 8002150:	1e5e      	subs	r6, r3, #1
 8002152:	2e00      	cmp	r6, #0
 8002154:	f77f af0d 	ble.w	8001f72 <_vfprintf_r+0xb36>
 8002158:	2e10      	cmp	r6, #16
 800215a:	f8df 8718 	ldr.w	r8, [pc, #1816]	; 8002874 <_vfprintf_r+0x1438>
 800215e:	f340 8102 	ble.w	8002366 <_vfprintf_r+0xf2a>
 8002162:	2710      	movs	r7, #16
 8002164:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8002168:	e005      	b.n	8002176 <_vfprintf_r+0xd3a>
 800216a:	f109 0908 	add.w	r9, r9, #8
 800216e:	3e10      	subs	r6, #16
 8002170:	2e10      	cmp	r6, #16
 8002172:	f340 80f8 	ble.w	8002366 <_vfprintf_r+0xf2a>
 8002176:	3501      	adds	r5, #1
 8002178:	3410      	adds	r4, #16
 800217a:	2d07      	cmp	r5, #7
 800217c:	9423      	str	r4, [sp, #140]	; 0x8c
 800217e:	9522      	str	r5, [sp, #136]	; 0x88
 8002180:	f8c9 8000 	str.w	r8, [r9]
 8002184:	f8c9 7004 	str.w	r7, [r9, #4]
 8002188:	ddef      	ble.n	800216a <_vfprintf_r+0xd2e>
 800218a:	aa21      	add	r2, sp, #132	; 0x84
 800218c:	4651      	mov	r1, sl
 800218e:	4658      	mov	r0, fp
 8002190:	f002 fee0 	bl	8004f54 <__sprint_r>
 8002194:	2800      	cmp	r0, #0
 8002196:	f47f aa80 	bne.w	800169a <_vfprintf_r+0x25e>
 800219a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800219c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800219e:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80021a2:	e7e4      	b.n	800216e <_vfprintf_r+0xd32>
 80021a4:	9906      	ldr	r1, [sp, #24]
 80021a6:	f011 0210 	ands.w	r2, r1, #16
 80021aa:	d022      	beq.n	80021f2 <_vfprintf_r+0xdb6>
 80021ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80021ae:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80021b2:	f1bb 0f00 	cmp.w	fp, #0
 80021b6:	6804      	ldr	r4, [r0, #0]
 80021b8:	f100 0704 	add.w	r7, r0, #4
 80021bc:	f04f 0500 	mov.w	r5, #0
 80021c0:	db28      	blt.n	8002214 <_vfprintf_r+0xdd8>
 80021c2:	460a      	mov	r2, r1
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	9206      	str	r2, [sp, #24]
 80021ca:	ea54 0205 	orrs.w	r2, r4, r5
 80021ce:	970d      	str	r7, [sp, #52]	; 0x34
 80021d0:	461f      	mov	r7, r3
 80021d2:	f47f aada 	bne.w	800178a <_vfprintf_r+0x34e>
 80021d6:	e4bb      	b.n	8001b50 <_vfprintf_r+0x714>
 80021d8:	46b8      	mov	r8, r7
 80021da:	3301      	adds	r3, #1
 80021dc:	442c      	add	r4, r5
 80021de:	2b07      	cmp	r3, #7
 80021e0:	9423      	str	r4, [sp, #140]	; 0x8c
 80021e2:	9322      	str	r3, [sp, #136]	; 0x88
 80021e4:	f8c9 8000 	str.w	r8, [r9]
 80021e8:	f8c9 5004 	str.w	r5, [r9, #4]
 80021ec:	f77f abb7 	ble.w	800195e <_vfprintf_r+0x522>
 80021f0:	e6cc      	b.n	8001f8c <_vfprintf_r+0xb50>
 80021f2:	9906      	ldr	r1, [sp, #24]
 80021f4:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80021f8:	f040 824b 	bne.w	8002692 <_vfprintf_r+0x1256>
 80021fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80021fe:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002202:	f1bb 0f00 	cmp.w	fp, #0
 8002206:	680c      	ldr	r4, [r1, #0]
 8002208:	f101 0704 	add.w	r7, r1, #4
 800220c:	f04f 0500 	mov.w	r5, #0
 8002210:	f280 8159 	bge.w	80024c6 <_vfprintf_r+0x108a>
 8002214:	970d      	str	r7, [sp, #52]	; 0x34
 8002216:	461f      	mov	r7, r3
 8002218:	ea54 0305 	orrs.w	r3, r4, r5
 800221c:	f47f aab5 	bne.w	800178a <_vfprintf_r+0x34e>
 8002220:	e49b      	b.n	8001b5a <_vfprintf_r+0x71e>
 8002222:	aa21      	add	r2, sp, #132	; 0x84
 8002224:	4651      	mov	r1, sl
 8002226:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002228:	f002 fe94 	bl	8004f54 <__sprint_r>
 800222c:	2800      	cmp	r0, #0
 800222e:	f47f aa34 	bne.w	800169a <_vfprintf_r+0x25e>
 8002232:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002234:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002238:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800223a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800223c:	4432      	add	r2, r6
 800223e:	4617      	mov	r7, r2
 8002240:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002242:	4293      	cmp	r3, r2
 8002244:	db47      	blt.n	80022d6 <_vfprintf_r+0xe9a>
 8002246:	9a06      	ldr	r2, [sp, #24]
 8002248:	07d2      	lsls	r2, r2, #31
 800224a:	d444      	bmi.n	80022d6 <_vfprintf_r+0xe9a>
 800224c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800224e:	440e      	add	r6, r1
 8002250:	1bf5      	subs	r5, r6, r7
 8002252:	1acb      	subs	r3, r1, r3
 8002254:	429d      	cmp	r5, r3
 8002256:	bfa8      	it	ge
 8002258:	461d      	movge	r5, r3
 800225a:	2d00      	cmp	r5, #0
 800225c:	462e      	mov	r6, r5
 800225e:	dd0d      	ble.n	800227c <_vfprintf_r+0xe40>
 8002260:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002262:	f8c9 7000 	str.w	r7, [r9]
 8002266:	3201      	adds	r2, #1
 8002268:	442c      	add	r4, r5
 800226a:	2a07      	cmp	r2, #7
 800226c:	9423      	str	r4, [sp, #140]	; 0x8c
 800226e:	f8c9 5004 	str.w	r5, [r9, #4]
 8002272:	9222      	str	r2, [sp, #136]	; 0x88
 8002274:	f300 829f 	bgt.w	80027b6 <_vfprintf_r+0x137a>
 8002278:	f109 0908 	add.w	r9, r9, #8
 800227c:	2e00      	cmp	r6, #0
 800227e:	bfac      	ite	ge
 8002280:	1b9d      	subge	r5, r3, r6
 8002282:	461d      	movlt	r5, r3
 8002284:	2d00      	cmp	r5, #0
 8002286:	f77f ab6c 	ble.w	8001962 <_vfprintf_r+0x526>
 800228a:	2d10      	cmp	r5, #16
 800228c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800228e:	f8df 85e4 	ldr.w	r8, [pc, #1508]	; 8002874 <_vfprintf_r+0x1438>
 8002292:	dda2      	ble.n	80021da <_vfprintf_r+0xd9e>
 8002294:	4647      	mov	r7, r8
 8002296:	2610      	movs	r6, #16
 8002298:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800229c:	e004      	b.n	80022a8 <_vfprintf_r+0xe6c>
 800229e:	f109 0908 	add.w	r9, r9, #8
 80022a2:	3d10      	subs	r5, #16
 80022a4:	2d10      	cmp	r5, #16
 80022a6:	dd97      	ble.n	80021d8 <_vfprintf_r+0xd9c>
 80022a8:	3301      	adds	r3, #1
 80022aa:	3410      	adds	r4, #16
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	9423      	str	r4, [sp, #140]	; 0x8c
 80022b0:	9322      	str	r3, [sp, #136]	; 0x88
 80022b2:	f8c9 7000 	str.w	r7, [r9]
 80022b6:	f8c9 6004 	str.w	r6, [r9, #4]
 80022ba:	ddf0      	ble.n	800229e <_vfprintf_r+0xe62>
 80022bc:	aa21      	add	r2, sp, #132	; 0x84
 80022be:	4651      	mov	r1, sl
 80022c0:	4640      	mov	r0, r8
 80022c2:	f002 fe47 	bl	8004f54 <__sprint_r>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	f47f a9e7 	bne.w	800169a <_vfprintf_r+0x25e>
 80022cc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80022ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80022d0:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80022d4:	e7e5      	b.n	80022a2 <_vfprintf_r+0xe66>
 80022d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80022d8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80022da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80022dc:	f8c9 1000 	str.w	r1, [r9]
 80022e0:	3201      	adds	r2, #1
 80022e2:	4404      	add	r4, r0
 80022e4:	2a07      	cmp	r2, #7
 80022e6:	9423      	str	r4, [sp, #140]	; 0x8c
 80022e8:	f8c9 0004 	str.w	r0, [r9, #4]
 80022ec:	9222      	str	r2, [sp, #136]	; 0x88
 80022ee:	f300 8236 	bgt.w	800275e <_vfprintf_r+0x1322>
 80022f2:	f109 0908 	add.w	r9, r9, #8
 80022f6:	e7a9      	b.n	800224c <_vfprintf_r+0xe10>
 80022f8:	9b06      	ldr	r3, [sp, #24]
 80022fa:	07df      	lsls	r7, r3, #31
 80022fc:	f53f ae03 	bmi.w	8001f06 <_vfprintf_r+0xaca>
 8002300:	3501      	adds	r5, #1
 8002302:	3401      	adds	r4, #1
 8002304:	2301      	movs	r3, #1
 8002306:	2d07      	cmp	r5, #7
 8002308:	9423      	str	r4, [sp, #140]	; 0x8c
 800230a:	9522      	str	r5, [sp, #136]	; 0x88
 800230c:	f8c9 6000 	str.w	r6, [r9]
 8002310:	f8c9 3004 	str.w	r3, [r9, #4]
 8002314:	f77f ae2b 	ble.w	8001f6e <_vfprintf_r+0xb32>
 8002318:	aa21      	add	r2, sp, #132	; 0x84
 800231a:	4651      	mov	r1, sl
 800231c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800231e:	f002 fe19 	bl	8004f54 <__sprint_r>
 8002322:	2800      	cmp	r0, #0
 8002324:	f47f a9b9 	bne.w	800169a <_vfprintf_r+0x25e>
 8002328:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800232a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800232c:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002330:	e61f      	b.n	8001f72 <_vfprintf_r+0xb36>
 8002332:	aa21      	add	r2, sp, #132	; 0x84
 8002334:	4651      	mov	r1, sl
 8002336:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002338:	f002 fe0c 	bl	8004f54 <__sprint_r>
 800233c:	2800      	cmp	r0, #0
 800233e:	f47f a9ac 	bne.w	800169a <_vfprintf_r+0x25e>
 8002342:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002344:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8002346:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800234a:	e5ea      	b.n	8001f22 <_vfprintf_r+0xae6>
 800234c:	aa21      	add	r2, sp, #132	; 0x84
 800234e:	4651      	mov	r1, sl
 8002350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002352:	f002 fdff 	bl	8004f54 <__sprint_r>
 8002356:	2800      	cmp	r0, #0
 8002358:	f47f a99f 	bne.w	800169a <_vfprintf_r+0x25e>
 800235c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800235e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8002360:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002364:	e5ec      	b.n	8001f40 <_vfprintf_r+0xb04>
 8002366:	3501      	adds	r5, #1
 8002368:	4434      	add	r4, r6
 800236a:	2d07      	cmp	r5, #7
 800236c:	9423      	str	r4, [sp, #140]	; 0x8c
 800236e:	9522      	str	r5, [sp, #136]	; 0x88
 8002370:	f8c9 8000 	str.w	r8, [r9]
 8002374:	f8c9 6004 	str.w	r6, [r9, #4]
 8002378:	f77f adf9 	ble.w	8001f6e <_vfprintf_r+0xb32>
 800237c:	e7cc      	b.n	8002318 <_vfprintf_r+0xedc>
 800237e:	aa21      	add	r2, sp, #132	; 0x84
 8002380:	4651      	mov	r1, sl
 8002382:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002384:	f002 fde6 	bl	8004f54 <__sprint_r>
 8002388:	2800      	cmp	r0, #0
 800238a:	f47f a986 	bne.w	800169a <_vfprintf_r+0x25e>
 800238e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002390:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002394:	f7ff ba8e 	b.w	80018b4 <_vfprintf_r+0x478>
 8002398:	4264      	negs	r4, r4
 800239a:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800239e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80023a2:	f1bb 0f00 	cmp.w	fp, #0
 80023a6:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 80023aa:	f6ff a9ee 	blt.w	800178a <_vfprintf_r+0x34e>
 80023ae:	9b06      	ldr	r3, [sp, #24]
 80023b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b4:	9306      	str	r3, [sp, #24]
 80023b6:	f7ff b9e8 	b.w	800178a <_vfprintf_r+0x34e>
 80023ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 80023bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80023be:	f002 fd0f 	bl	8004de0 <__fpclassifyd>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	f000 8152 	beq.w	800266c <_vfprintf_r+0x1230>
 80023c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80023ca:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80023ce:	f023 0320 	bic.w	r3, r3, #32
 80023d2:	9307      	str	r3, [sp, #28]
 80023d4:	f000 82b8 	beq.w	8002948 <_vfprintf_r+0x150c>
 80023d8:	2b47      	cmp	r3, #71	; 0x47
 80023da:	d104      	bne.n	80023e6 <_vfprintf_r+0xfaa>
 80023dc:	f1bb 0f00 	cmp.w	fp, #0
 80023e0:	bf08      	it	eq
 80023e2:	f04f 0b01 	moveq.w	fp, #1
 80023e6:	9b06      	ldr	r3, [sp, #24]
 80023e8:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	930e      	str	r3, [sp, #56]	; 0x38
 80023f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80023f4:	1e1f      	subs	r7, r3, #0
 80023f6:	bfb6      	itet	lt
 80023f8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 80023fc:	2300      	movge	r3, #0
 80023fe:	232d      	movlt	r3, #45	; 0x2d
 8002400:	9317      	str	r3, [sp, #92]	; 0x5c
 8002402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002404:	2b66      	cmp	r3, #102	; 0x66
 8002406:	f000 8277 	beq.w	80028f8 <_vfprintf_r+0x14bc>
 800240a:	2b46      	cmp	r3, #70	; 0x46
 800240c:	f000 829f 	beq.w	800294e <_vfprintf_r+0x1512>
 8002410:	9b07      	ldr	r3, [sp, #28]
 8002412:	a81f      	add	r0, sp, #124	; 0x7c
 8002414:	2b45      	cmp	r3, #69	; 0x45
 8002416:	a91c      	add	r1, sp, #112	; 0x70
 8002418:	bf0c      	ite	eq
 800241a:	f10b 0501 	addeq.w	r5, fp, #1
 800241e:	465d      	movne	r5, fp
 8002420:	9004      	str	r0, [sp, #16]
 8002422:	9103      	str	r1, [sp, #12]
 8002424:	a81b      	add	r0, sp, #108	; 0x6c
 8002426:	2102      	movs	r1, #2
 8002428:	463b      	mov	r3, r7
 800242a:	9002      	str	r0, [sp, #8]
 800242c:	4642      	mov	r2, r8
 800242e:	9501      	str	r5, [sp, #4]
 8002430:	9100      	str	r1, [sp, #0]
 8002432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002434:	f000 fc70 	bl	8002d18 <_dtoa_r>
 8002438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800243a:	2b67      	cmp	r3, #103	; 0x67
 800243c:	4606      	mov	r6, r0
 800243e:	f000 81cc 	beq.w	80027da <_vfprintf_r+0x139e>
 8002442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002444:	2b47      	cmp	r3, #71	; 0x47
 8002446:	f000 81dd 	beq.w	8002804 <_vfprintf_r+0x13c8>
 800244a:	1974      	adds	r4, r6, r5
 800244c:	4640      	mov	r0, r8
 800244e:	4639      	mov	r1, r7
 8002450:	2200      	movs	r2, #0
 8002452:	2300      	movs	r3, #0
 8002454:	f7fe fc62 	bl	8000d1c <__aeabi_dcmpeq>
 8002458:	2800      	cmp	r0, #0
 800245a:	f040 81e5 	bne.w	8002828 <_vfprintf_r+0x13ec>
 800245e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002460:	429c      	cmp	r4, r3
 8002462:	d906      	bls.n	8002472 <_vfprintf_r+0x1036>
 8002464:	2130      	movs	r1, #48	; 0x30
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	921f      	str	r2, [sp, #124]	; 0x7c
 800246a:	7019      	strb	r1, [r3, #0]
 800246c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800246e:	429c      	cmp	r4, r3
 8002470:	d8f9      	bhi.n	8002466 <_vfprintf_r+0x102a>
 8002472:	1b9b      	subs	r3, r3, r6
 8002474:	9311      	str	r3, [sp, #68]	; 0x44
 8002476:	9b07      	ldr	r3, [sp, #28]
 8002478:	2b47      	cmp	r3, #71	; 0x47
 800247a:	f000 81ce 	beq.w	800281a <_vfprintf_r+0x13de>
 800247e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002480:	2b65      	cmp	r3, #101	; 0x65
 8002482:	f340 8311 	ble.w	8002aa8 <_vfprintf_r+0x166c>
 8002486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002488:	2b66      	cmp	r3, #102	; 0x66
 800248a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800248c:	9310      	str	r3, [sp, #64]	; 0x40
 800248e:	f000 8275 	beq.w	800297c <_vfprintf_r+0x1540>
 8002492:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002494:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002496:	428a      	cmp	r2, r1
 8002498:	f2c0 8247 	blt.w	800292a <_vfprintf_r+0x14ee>
 800249c:	9b06      	ldr	r3, [sp, #24]
 800249e:	07db      	lsls	r3, r3, #31
 80024a0:	f100 82b9 	bmi.w	8002a16 <_vfprintf_r+0x15da>
 80024a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80024a8:	920c      	str	r2, [sp, #48]	; 0x30
 80024aa:	2267      	movs	r2, #103	; 0x67
 80024ac:	920f      	str	r2, [sp, #60]	; 0x3c
 80024ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	f040 819d 	bne.w	80027f0 <_vfprintf_r+0x13b4>
 80024b6:	9307      	str	r3, [sp, #28]
 80024b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024ba:	9306      	str	r3, [sp, #24]
 80024bc:	4693      	mov	fp, r2
 80024be:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 80024c2:	f7ff b986 	b.w	80017d2 <_vfprintf_r+0x396>
 80024c6:	9a06      	ldr	r2, [sp, #24]
 80024c8:	e67c      	b.n	80021c4 <_vfprintf_r+0xd88>
 80024ca:	9b06      	ldr	r3, [sp, #24]
 80024cc:	06de      	lsls	r6, r3, #27
 80024ce:	d40b      	bmi.n	80024e8 <_vfprintf_r+0x10ac>
 80024d0:	9b06      	ldr	r3, [sp, #24]
 80024d2:	065d      	lsls	r5, r3, #25
 80024d4:	d508      	bpl.n	80024e8 <_vfprintf_r+0x10ac>
 80024d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	3204      	adds	r2, #4
 80024dc:	920d      	str	r2, [sp, #52]	; 0x34
 80024de:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	f7fe bfe9 	b.w	80014ba <_vfprintf_r+0x7e>
 80024e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	3204      	adds	r2, #4
 80024ee:	920d      	str	r2, [sp, #52]	; 0x34
 80024f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f7fe bfe1 	b.w	80014ba <_vfprintf_r+0x7e>
 80024f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024fa:	9b06      	ldr	r3, [sp, #24]
 80024fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002500:	4613      	mov	r3, r2
 8002502:	f103 0304 	add.w	r3, r3, #4
 8002506:	bf0c      	ite	eq
 8002508:	6814      	ldreq	r4, [r2, #0]
 800250a:	8814      	ldrhne	r4, [r2, #0]
 800250c:	930d      	str	r3, [sp, #52]	; 0x34
 800250e:	2500      	movs	r5, #0
 8002510:	f7ff bb3c 	b.w	8001b8c <_vfprintf_r+0x750>
 8002514:	9906      	ldr	r1, [sp, #24]
 8002516:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800251a:	d015      	beq.n	8002548 <_vfprintf_r+0x110c>
 800251c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800251e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002522:	f1bb 0f00 	cmp.w	fp, #0
 8002526:	8804      	ldrh	r4, [r0, #0]
 8002528:	f100 0704 	add.w	r7, r0, #4
 800252c:	f04f 0500 	mov.w	r5, #0
 8002530:	db17      	blt.n	8002562 <_vfprintf_r+0x1126>
 8002532:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 8002536:	9306      	str	r3, [sp, #24]
 8002538:	ea54 0305 	orrs.w	r3, r4, r5
 800253c:	970d      	str	r7, [sp, #52]	; 0x34
 800253e:	f43f ac22 	beq.w	8001d86 <_vfprintf_r+0x94a>
 8002542:	4617      	mov	r7, r2
 8002544:	f7ff bac0 	b.w	8001ac8 <_vfprintf_r+0x68c>
 8002548:	990d      	ldr	r1, [sp, #52]	; 0x34
 800254a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800254e:	f1bb 0f00 	cmp.w	fp, #0
 8002552:	680c      	ldr	r4, [r1, #0]
 8002554:	f101 0704 	add.w	r7, r1, #4
 8002558:	f04f 0500 	mov.w	r5, #0
 800255c:	db01      	blt.n	8002562 <_vfprintf_r+0x1126>
 800255e:	9a06      	ldr	r2, [sp, #24]
 8002560:	e5ec      	b.n	800213c <_vfprintf_r+0xd00>
 8002562:	970d      	str	r7, [sp, #52]	; 0x34
 8002564:	2700      	movs	r7, #0
 8002566:	f7ff baaf 	b.w	8001ac8 <_vfprintf_r+0x68c>
 800256a:	4632      	mov	r2, r6
 800256c:	4646      	mov	r6, r8
 800256e:	4690      	mov	r8, r2
 8002570:	3301      	adds	r3, #1
 8002572:	442c      	add	r4, r5
 8002574:	2b07      	cmp	r3, #7
 8002576:	9423      	str	r4, [sp, #140]	; 0x8c
 8002578:	9322      	str	r3, [sp, #136]	; 0x88
 800257a:	f8c9 8000 	str.w	r8, [r9]
 800257e:	f8c9 5004 	str.w	r5, [r9, #4]
 8002582:	f73f ae4e 	bgt.w	8002222 <_vfprintf_r+0xde6>
 8002586:	f109 0908 	add.w	r9, r9, #8
 800258a:	e655      	b.n	8002238 <_vfprintf_r+0xdfc>
 800258c:	2700      	movs	r7, #0
 800258e:	45bb      	cmp	fp, r7
 8002590:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 8002594:	f6ff ac09 	blt.w	8001daa <_vfprintf_r+0x96e>
 8002598:	9b06      	ldr	r3, [sp, #24]
 800259a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259e:	9306      	str	r3, [sp, #24]
 80025a0:	f7ff bbd0 	b.w	8001d44 <_vfprintf_r+0x908>
 80025a4:	aa21      	add	r2, sp, #132	; 0x84
 80025a6:	4651      	mov	r1, sl
 80025a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025aa:	f002 fcd3 	bl	8004f54 <__sprint_r>
 80025ae:	2800      	cmp	r0, #0
 80025b0:	f47f a873 	bne.w	800169a <_vfprintf_r+0x25e>
 80025b4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80025b6:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80025ba:	e418      	b.n	8001dee <_vfprintf_r+0x9b2>
 80025bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80025be:	4aa9      	ldr	r2, [pc, #676]	; (8002864 <_vfprintf_r+0x1428>)
 80025c0:	f8c9 2000 	str.w	r2, [r9]
 80025c4:	3301      	adds	r3, #1
 80025c6:	3401      	adds	r4, #1
 80025c8:	2201      	movs	r2, #1
 80025ca:	2b07      	cmp	r3, #7
 80025cc:	9423      	str	r4, [sp, #140]	; 0x8c
 80025ce:	9322      	str	r3, [sp, #136]	; 0x88
 80025d0:	f8c9 2004 	str.w	r2, [r9, #4]
 80025d4:	dc74      	bgt.n	80026c0 <_vfprintf_r+0x1284>
 80025d6:	f109 0908 	add.w	r9, r9, #8
 80025da:	b92d      	cbnz	r5, 80025e8 <_vfprintf_r+0x11ac>
 80025dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80025de:	b91b      	cbnz	r3, 80025e8 <_vfprintf_r+0x11ac>
 80025e0:	9b06      	ldr	r3, [sp, #24]
 80025e2:	07d9      	lsls	r1, r3, #31
 80025e4:	f57f a9bd 	bpl.w	8001962 <_vfprintf_r+0x526>
 80025e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80025ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 80025ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80025ee:	f8c9 2000 	str.w	r2, [r9]
 80025f2:	3301      	adds	r3, #1
 80025f4:	440c      	add	r4, r1
 80025f6:	2b07      	cmp	r3, #7
 80025f8:	9423      	str	r4, [sp, #140]	; 0x8c
 80025fa:	f8c9 1004 	str.w	r1, [r9, #4]
 80025fe:	9322      	str	r3, [sp, #136]	; 0x88
 8002600:	f300 8165 	bgt.w	80028ce <_vfprintf_r+0x1492>
 8002604:	f109 0908 	add.w	r9, r9, #8
 8002608:	426d      	negs	r5, r5
 800260a:	2d00      	cmp	r5, #0
 800260c:	f340 8086 	ble.w	800271c <_vfprintf_r+0x12e0>
 8002610:	2d10      	cmp	r5, #16
 8002612:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8002874 <_vfprintf_r+0x1438>
 8002616:	f340 80b2 	ble.w	800277e <_vfprintf_r+0x1342>
 800261a:	4642      	mov	r2, r8
 800261c:	2710      	movs	r7, #16
 800261e:	46b0      	mov	r8, r6
 8002620:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8002624:	4616      	mov	r6, r2
 8002626:	e005      	b.n	8002634 <_vfprintf_r+0x11f8>
 8002628:	f109 0908 	add.w	r9, r9, #8
 800262c:	3d10      	subs	r5, #16
 800262e:	2d10      	cmp	r5, #16
 8002630:	f340 80a2 	ble.w	8002778 <_vfprintf_r+0x133c>
 8002634:	3301      	adds	r3, #1
 8002636:	3410      	adds	r4, #16
 8002638:	2b07      	cmp	r3, #7
 800263a:	9423      	str	r4, [sp, #140]	; 0x8c
 800263c:	9322      	str	r3, [sp, #136]	; 0x88
 800263e:	e889 00c0 	stmia.w	r9, {r6, r7}
 8002642:	ddf1      	ble.n	8002628 <_vfprintf_r+0x11ec>
 8002644:	aa21      	add	r2, sp, #132	; 0x84
 8002646:	4651      	mov	r1, sl
 8002648:	4658      	mov	r0, fp
 800264a:	f002 fc83 	bl	8004f54 <__sprint_r>
 800264e:	2800      	cmp	r0, #0
 8002650:	f47f a823 	bne.w	800169a <_vfprintf_r+0x25e>
 8002654:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002656:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002658:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800265c:	e7e6      	b.n	800262c <_vfprintf_r+0x11f0>
 800265e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002660:	f7ff bb9c 	b.w	8001d9c <_vfprintf_r+0x960>
 8002664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002668:	f7ff b81d 	b.w	80016a6 <_vfprintf_r+0x26a>
 800266c:	9906      	ldr	r1, [sp, #24]
 800266e:	4e7e      	ldr	r6, [pc, #504]	; (8002868 <_vfprintf_r+0x142c>)
 8002670:	4b7e      	ldr	r3, [pc, #504]	; (800286c <_vfprintf_r+0x1430>)
 8002672:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 8002676:	9010      	str	r0, [sp, #64]	; 0x40
 8002678:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800267c:	9106      	str	r1, [sp, #24]
 800267e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002680:	2203      	movs	r2, #3
 8002682:	4683      	mov	fp, r0
 8002684:	9207      	str	r2, [sp, #28]
 8002686:	2947      	cmp	r1, #71	; 0x47
 8002688:	bfd8      	it	le
 800268a:	461e      	movle	r6, r3
 800268c:	920c      	str	r2, [sp, #48]	; 0x30
 800268e:	f7ff b8a0 	b.w	80017d2 <_vfprintf_r+0x396>
 8002692:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002694:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002698:	f1bb 0f00 	cmp.w	fp, #0
 800269c:	8804      	ldrh	r4, [r0, #0]
 800269e:	f100 0704 	add.w	r7, r0, #4
 80026a2:	f04f 0500 	mov.w	r5, #0
 80026a6:	f2c0 8124 	blt.w	80028f2 <_vfprintf_r+0x14b6>
 80026aa:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 80026ae:	9306      	str	r3, [sp, #24]
 80026b0:	ea54 0305 	orrs.w	r3, r4, r5
 80026b4:	970d      	str	r7, [sp, #52]	; 0x34
 80026b6:	4617      	mov	r7, r2
 80026b8:	f47f a867 	bne.w	800178a <_vfprintf_r+0x34e>
 80026bc:	f7ff ba48 	b.w	8001b50 <_vfprintf_r+0x714>
 80026c0:	aa21      	add	r2, sp, #132	; 0x84
 80026c2:	4651      	mov	r1, sl
 80026c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026c6:	f002 fc45 	bl	8004f54 <__sprint_r>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	f47e afe5 	bne.w	800169a <_vfprintf_r+0x25e>
 80026d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80026d2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80026d4:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80026d8:	e77f      	b.n	80025da <_vfprintf_r+0x119e>
 80026da:	9b06      	ldr	r3, [sp, #24]
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	9306      	str	r3, [sp, #24]
 80026e2:	3001      	adds	r0, #1
 80026e4:	7803      	ldrb	r3, [r0, #0]
 80026e6:	f7fe bf1d 	b.w	8001524 <_vfprintf_r+0xe8>
 80026ea:	aa21      	add	r2, sp, #132	; 0x84
 80026ec:	4651      	mov	r1, sl
 80026ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026f0:	f002 fc30 	bl	8004f54 <__sprint_r>
 80026f4:	2800      	cmp	r0, #0
 80026f6:	f47e afd0 	bne.w	800169a <_vfprintf_r+0x25e>
 80026fa:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80026fc:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002700:	f7ff bb8d 	b.w	8001e1e <_vfprintf_r+0x9e2>
 8002704:	aa21      	add	r2, sp, #132	; 0x84
 8002706:	4651      	mov	r1, sl
 8002708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800270a:	f002 fc23 	bl	8004f54 <__sprint_r>
 800270e:	2800      	cmp	r0, #0
 8002710:	f47e afc3 	bne.w	800169a <_vfprintf_r+0x25e>
 8002714:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002718:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800271c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800271e:	f8c9 6000 	str.w	r6, [r9]
 8002722:	3301      	adds	r3, #1
 8002724:	440c      	add	r4, r1
 8002726:	2b07      	cmp	r3, #7
 8002728:	9423      	str	r4, [sp, #140]	; 0x8c
 800272a:	9322      	str	r3, [sp, #136]	; 0x88
 800272c:	f8c9 1004 	str.w	r1, [r9, #4]
 8002730:	f77f a915 	ble.w	800195e <_vfprintf_r+0x522>
 8002734:	e42a      	b.n	8001f8c <_vfprintf_r+0xb50>
 8002736:	4630      	mov	r0, r6
 8002738:	f7fd fe62 	bl	8000400 <strlen>
 800273c:	46a3      	mov	fp, r4
 800273e:	4603      	mov	r3, r0
 8002740:	900c      	str	r0, [sp, #48]	; 0x30
 8002742:	f7ff ba9c 	b.w	8001c7e <_vfprintf_r+0x842>
 8002746:	aa21      	add	r2, sp, #132	; 0x84
 8002748:	4651      	mov	r1, sl
 800274a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800274c:	f002 fc02 	bl	8004f54 <__sprint_r>
 8002750:	2800      	cmp	r0, #0
 8002752:	f47e afa2 	bne.w	800169a <_vfprintf_r+0x25e>
 8002756:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002758:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800275c:	e483      	b.n	8002066 <_vfprintf_r+0xc2a>
 800275e:	aa21      	add	r2, sp, #132	; 0x84
 8002760:	4651      	mov	r1, sl
 8002762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002764:	f002 fbf6 	bl	8004f54 <__sprint_r>
 8002768:	2800      	cmp	r0, #0
 800276a:	f47e af96 	bne.w	800169a <_vfprintf_r+0x25e>
 800276e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002770:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002772:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8002776:	e569      	b.n	800224c <_vfprintf_r+0xe10>
 8002778:	4632      	mov	r2, r6
 800277a:	4646      	mov	r6, r8
 800277c:	4690      	mov	r8, r2
 800277e:	3301      	adds	r3, #1
 8002780:	442c      	add	r4, r5
 8002782:	2b07      	cmp	r3, #7
 8002784:	9423      	str	r4, [sp, #140]	; 0x8c
 8002786:	9322      	str	r3, [sp, #136]	; 0x88
 8002788:	f8c9 8000 	str.w	r8, [r9]
 800278c:	f8c9 5004 	str.w	r5, [r9, #4]
 8002790:	dcb8      	bgt.n	8002704 <_vfprintf_r+0x12c8>
 8002792:	f109 0908 	add.w	r9, r9, #8
 8002796:	e7c1      	b.n	800271c <_vfprintf_r+0x12e0>
 8002798:	465b      	mov	r3, fp
 800279a:	2b06      	cmp	r3, #6
 800279c:	bf28      	it	cs
 800279e:	2306      	movcs	r3, #6
 80027a0:	930c      	str	r3, [sp, #48]	; 0x30
 80027a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80027a6:	46b3      	mov	fp, r6
 80027a8:	970d      	str	r7, [sp, #52]	; 0x34
 80027aa:	9610      	str	r6, [sp, #64]	; 0x40
 80027ac:	4637      	mov	r7, r6
 80027ae:	9307      	str	r3, [sp, #28]
 80027b0:	4e2f      	ldr	r6, [pc, #188]	; (8002870 <_vfprintf_r+0x1434>)
 80027b2:	f7ff b80e 	b.w	80017d2 <_vfprintf_r+0x396>
 80027b6:	aa21      	add	r2, sp, #132	; 0x84
 80027b8:	4651      	mov	r1, sl
 80027ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027bc:	f002 fbca 	bl	8004f54 <__sprint_r>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	f47e af6a 	bne.w	800169a <_vfprintf_r+0x25e>
 80027c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80027c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80027ca:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80027d2:	e553      	b.n	800227c <_vfprintf_r+0xe40>
 80027d4:	9306      	str	r3, [sp, #24]
 80027d6:	f7ff b9f7 	b.w	8001bc8 <_vfprintf_r+0x78c>
 80027da:	9b06      	ldr	r3, [sp, #24]
 80027dc:	07da      	lsls	r2, r3, #31
 80027de:	f53f ae34 	bmi.w	800244a <_vfprintf_r+0x100e>
 80027e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80027e4:	e645      	b.n	8002472 <_vfprintf_r+0x1036>
 80027e6:	272d      	movs	r7, #45	; 0x2d
 80027e8:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 80027ec:	f7ff b92f 	b.w	8001a4e <_vfprintf_r+0x612>
 80027f0:	272d      	movs	r7, #45	; 0x2d
 80027f2:	9307      	str	r3, [sp, #28]
 80027f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027f6:	9306      	str	r3, [sp, #24]
 80027f8:	f88d 7067 	strb.w	r7, [sp, #103]	; 0x67
 80027fc:	f04f 0b00 	mov.w	fp, #0
 8002800:	f7fe bfe8 	b.w	80017d4 <_vfprintf_r+0x398>
 8002804:	9b06      	ldr	r3, [sp, #24]
 8002806:	07dc      	lsls	r4, r3, #31
 8002808:	f100 80b2 	bmi.w	8002970 <_vfprintf_r+0x1534>
 800280c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800280e:	1b9b      	subs	r3, r3, r6
 8002810:	9311      	str	r3, [sp, #68]	; 0x44
 8002812:	9b07      	ldr	r3, [sp, #28]
 8002814:	2b47      	cmp	r3, #71	; 0x47
 8002816:	f040 8147 	bne.w	8002aa8 <_vfprintf_r+0x166c>
 800281a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800281c:	1cd8      	adds	r0, r3, #3
 800281e:	db2b      	blt.n	8002878 <_vfprintf_r+0x143c>
 8002820:	459b      	cmp	fp, r3
 8002822:	db29      	blt.n	8002878 <_vfprintf_r+0x143c>
 8002824:	9310      	str	r3, [sp, #64]	; 0x40
 8002826:	e634      	b.n	8002492 <_vfprintf_r+0x1056>
 8002828:	4623      	mov	r3, r4
 800282a:	e622      	b.n	8002472 <_vfprintf_r+0x1036>
 800282c:	9b06      	ldr	r3, [sp, #24]
 800282e:	07db      	lsls	r3, r3, #31
 8002830:	465f      	mov	r7, fp
 8002832:	d505      	bpl.n	8002840 <_vfprintf_r+0x1404>
 8002834:	ae3e      	add	r6, sp, #248	; 0xf8
 8002836:	2330      	movs	r3, #48	; 0x30
 8002838:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800283c:	f7fe bfbf 	b.w	80017be <_vfprintf_r+0x382>
 8002840:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002844:	ae2e      	add	r6, sp, #184	; 0xb8
 8002846:	f7fe bfbd 	b.w	80017c4 <_vfprintf_r+0x388>
 800284a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 800284e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002852:	970d      	str	r7, [sp, #52]	; 0x34
 8002854:	9307      	str	r3, [sp, #28]
 8002856:	4683      	mov	fp, r0
 8002858:	9010      	str	r0, [sp, #64]	; 0x40
 800285a:	f89d 7067 	ldrb.w	r7, [sp, #103]	; 0x67
 800285e:	f7fe bfb8 	b.w	80017d2 <_vfprintf_r+0x396>
 8002862:	bf00      	nop
 8002864:	08008390 	.word	0x08008390
 8002868:	0800835c 	.word	0x0800835c
 800286c:	08008358 	.word	0x08008358
 8002870:	08008388 	.word	0x08008388
 8002874:	08008330 	.word	0x08008330
 8002878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800287a:	3a02      	subs	r2, #2
 800287c:	920f      	str	r2, [sp, #60]	; 0x3c
 800287e:	3b01      	subs	r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8002886:	931b      	str	r3, [sp, #108]	; 0x6c
 8002888:	bfb8      	it	lt
 800288a:	425b      	neglt	r3, r3
 800288c:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
 8002890:	bfb4      	ite	lt
 8002892:	222d      	movlt	r2, #45	; 0x2d
 8002894:	222b      	movge	r2, #43	; 0x2b
 8002896:	2b09      	cmp	r3, #9
 8002898:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800289c:	dc7b      	bgt.n	8002996 <_vfprintf_r+0x155a>
 800289e:	3330      	adds	r3, #48	; 0x30
 80028a0:	2230      	movs	r2, #48	; 0x30
 80028a2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80028a6:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80028aa:	ab1e      	add	r3, sp, #120	; 0x78
 80028ac:	aa1d      	add	r2, sp, #116	; 0x74
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80028b2:	9316      	str	r3, [sp, #88]	; 0x58
 80028b4:	2a01      	cmp	r2, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	930c      	str	r3, [sp, #48]	; 0x30
 80028ba:	f340 80ca 	ble.w	8002a52 <_vfprintf_r+0x1616>
 80028be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028c0:	2200      	movs	r2, #0
 80028c2:	3301      	adds	r3, #1
 80028c4:	930c      	str	r3, [sp, #48]	; 0x30
 80028c6:	9210      	str	r2, [sp, #64]	; 0x40
 80028c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80028cc:	e5ef      	b.n	80024ae <_vfprintf_r+0x1072>
 80028ce:	aa21      	add	r2, sp, #132	; 0x84
 80028d0:	4651      	mov	r1, sl
 80028d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028d4:	f002 fb3e 	bl	8004f54 <__sprint_r>
 80028d8:	2800      	cmp	r0, #0
 80028da:	f47e aede 	bne.w	800169a <_vfprintf_r+0x25e>
 80028de:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80028e0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80028e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80028e4:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 80028e8:	e68e      	b.n	8002608 <_vfprintf_r+0x11cc>
 80028ea:	4628      	mov	r0, r5
 80028ec:	2600      	movs	r6, #0
 80028ee:	f7fe be1a 	b.w	8001526 <_vfprintf_r+0xea>
 80028f2:	970d      	str	r7, [sp, #52]	; 0x34
 80028f4:	4617      	mov	r7, r2
 80028f6:	e48f      	b.n	8002218 <_vfprintf_r+0xddc>
 80028f8:	a81f      	add	r0, sp, #124	; 0x7c
 80028fa:	a91c      	add	r1, sp, #112	; 0x70
 80028fc:	9004      	str	r0, [sp, #16]
 80028fe:	9103      	str	r1, [sp, #12]
 8002900:	a81b      	add	r0, sp, #108	; 0x6c
 8002902:	2103      	movs	r1, #3
 8002904:	9002      	str	r0, [sp, #8]
 8002906:	4642      	mov	r2, r8
 8002908:	463b      	mov	r3, r7
 800290a:	f8cd b004 	str.w	fp, [sp, #4]
 800290e:	9100      	str	r1, [sp, #0]
 8002910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002912:	f000 fa01 	bl	8002d18 <_dtoa_r>
 8002916:	465d      	mov	r5, fp
 8002918:	4606      	mov	r6, r0
 800291a:	eb00 040b 	add.w	r4, r0, fp
 800291e:	7833      	ldrb	r3, [r6, #0]
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d063      	beq.n	80029ec <_vfprintf_r+0x15b0>
 8002924:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002926:	442c      	add	r4, r5
 8002928:	e590      	b.n	800244c <_vfprintf_r+0x1010>
 800292a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	bfd8      	it	le
 8002930:	f1c3 0502 	rsble	r5, r3, #2
 8002934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002936:	bfc8      	it	gt
 8002938:	2501      	movgt	r5, #1
 800293a:	18eb      	adds	r3, r5, r3
 800293c:	2267      	movs	r2, #103	; 0x67
 800293e:	930c      	str	r3, [sp, #48]	; 0x30
 8002940:	920f      	str	r2, [sp, #60]	; 0x3c
 8002942:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002946:	e5b2      	b.n	80024ae <_vfprintf_r+0x1072>
 8002948:	f04f 0b06 	mov.w	fp, #6
 800294c:	e54b      	b.n	80023e6 <_vfprintf_r+0xfaa>
 800294e:	a81f      	add	r0, sp, #124	; 0x7c
 8002950:	a91c      	add	r1, sp, #112	; 0x70
 8002952:	9004      	str	r0, [sp, #16]
 8002954:	9103      	str	r1, [sp, #12]
 8002956:	a81b      	add	r0, sp, #108	; 0x6c
 8002958:	2103      	movs	r1, #3
 800295a:	9002      	str	r0, [sp, #8]
 800295c:	4642      	mov	r2, r8
 800295e:	463b      	mov	r3, r7
 8002960:	f8cd b004 	str.w	fp, [sp, #4]
 8002964:	9100      	str	r1, [sp, #0]
 8002966:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002968:	f000 f9d6 	bl	8002d18 <_dtoa_r>
 800296c:	465d      	mov	r5, fp
 800296e:	4606      	mov	r6, r0
 8002970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002972:	2b46      	cmp	r3, #70	; 0x46
 8002974:	eb06 0405 	add.w	r4, r6, r5
 8002978:	d0d1      	beq.n	800291e <_vfprintf_r+0x14e2>
 800297a:	e567      	b.n	800244c <_vfprintf_r+0x1010>
 800297c:	2b00      	cmp	r3, #0
 800297e:	dd5f      	ble.n	8002a40 <_vfprintf_r+0x1604>
 8002980:	f1bb 0f00 	cmp.w	fp, #0
 8002984:	d13f      	bne.n	8002a06 <_vfprintf_r+0x15ca>
 8002986:	9a06      	ldr	r2, [sp, #24]
 8002988:	07d1      	lsls	r1, r2, #31
 800298a:	d43c      	bmi.n	8002a06 <_vfprintf_r+0x15ca>
 800298c:	461a      	mov	r2, r3
 800298e:	920c      	str	r2, [sp, #48]	; 0x30
 8002990:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002994:	e58b      	b.n	80024ae <_vfprintf_r+0x1072>
 8002996:	f10d 0483 	add.w	r4, sp, #131	; 0x83
 800299a:	4620      	mov	r0, r4
 800299c:	4a47      	ldr	r2, [pc, #284]	; (8002abc <_vfprintf_r+0x1680>)
 800299e:	fb82 2103 	smull	r2, r1, r2, r3
 80029a2:	17da      	asrs	r2, r3, #31
 80029a4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80029a8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80029ac:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80029b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80029b4:	2a09      	cmp	r2, #9
 80029b6:	4613      	mov	r3, r2
 80029b8:	f800 1d01 	strb.w	r1, [r0, #-1]!
 80029bc:	dcee      	bgt.n	800299c <_vfprintf_r+0x1560>
 80029be:	4602      	mov	r2, r0
 80029c0:	3330      	adds	r3, #48	; 0x30
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80029c8:	4294      	cmp	r4, r2
 80029ca:	d95e      	bls.n	8002a8a <_vfprintf_r+0x164e>
 80029cc:	f10d 0176 	add.w	r1, sp, #118	; 0x76
 80029d0:	4602      	mov	r2, r0
 80029d2:	e001      	b.n	80029d8 <_vfprintf_r+0x159c>
 80029d4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80029d8:	f801 3b01 	strb.w	r3, [r1], #1
 80029dc:	4294      	cmp	r4, r2
 80029de:	d1f9      	bne.n	80029d4 <_vfprintf_r+0x1598>
 80029e0:	1c63      	adds	r3, r4, #1
 80029e2:	1a1b      	subs	r3, r3, r0
 80029e4:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 80029e8:	4413      	add	r3, r2
 80029ea:	e75f      	b.n	80028ac <_vfprintf_r+0x1470>
 80029ec:	4640      	mov	r0, r8
 80029ee:	4639      	mov	r1, r7
 80029f0:	2200      	movs	r2, #0
 80029f2:	2300      	movs	r3, #0
 80029f4:	f7fe f992 	bl	8000d1c <__aeabi_dcmpeq>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	d193      	bne.n	8002924 <_vfprintf_r+0x14e8>
 80029fc:	f1c5 0501 	rsb	r5, r5, #1
 8002a00:	951b      	str	r5, [sp, #108]	; 0x6c
 8002a02:	442c      	add	r4, r5
 8002a04:	e522      	b.n	800244c <_vfprintf_r+0x1010>
 8002a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a08:	f10b 0501 	add.w	r5, fp, #1
 8002a0c:	442b      	add	r3, r5
 8002a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8002a10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a14:	e54b      	b.n	80024ae <_vfprintf_r+0x1072>
 8002a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a18:	2267      	movs	r2, #103	; 0x67
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8002a1e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002a20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a24:	e543      	b.n	80024ae <_vfprintf_r+0x1072>
 8002a26:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002a28:	7843      	ldrb	r3, [r0, #1]
 8002a2a:	6826      	ldr	r6, [r4, #0]
 8002a2c:	3404      	adds	r4, #4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	940d      	str	r4, [sp, #52]	; 0x34
 8002a32:	4628      	mov	r0, r5
 8002a34:	f6be ad76 	bge.w	8001524 <_vfprintf_r+0xe8>
 8002a38:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002a3c:	f7fe bd72 	b.w	8001524 <_vfprintf_r+0xe8>
 8002a40:	f1bb 0f00 	cmp.w	fp, #0
 8002a44:	d10f      	bne.n	8002a66 <_vfprintf_r+0x162a>
 8002a46:	9b06      	ldr	r3, [sp, #24]
 8002a48:	07da      	lsls	r2, r3, #31
 8002a4a:	d40c      	bmi.n	8002a66 <_vfprintf_r+0x162a>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8002a50:	e52d      	b.n	80024ae <_vfprintf_r+0x1072>
 8002a52:	9b06      	ldr	r3, [sp, #24]
 8002a54:	f013 0301 	ands.w	r3, r3, #1
 8002a58:	f47f af31 	bne.w	80028be <_vfprintf_r+0x1482>
 8002a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8002a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a64:	e523      	b.n	80024ae <_vfprintf_r+0x1072>
 8002a66:	f10b 0302 	add.w	r3, fp, #2
 8002a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8002a6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a70:	e51d      	b.n	80024ae <_vfprintf_r+0x1072>
 8002a72:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002a76:	f7fe bfcb 	b.w	8001a10 <_vfprintf_r+0x5d4>
 8002a7a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002a7e:	f7fe be5e 	b.w	800173e <_vfprintf_r+0x302>
 8002a82:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002a86:	f7ff b800 	b.w	8001a8a <_vfprintf_r+0x64e>
 8002a8a:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8002a8e:	e70d      	b.n	80028ac <_vfprintf_r+0x1470>
 8002a90:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002a94:	f7ff b86c 	b.w	8001b70 <_vfprintf_r+0x734>
 8002a98:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002a9c:	f7ff b839 	b.w	8001b12 <_vfprintf_r+0x6d6>
 8002aa0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002aa4:	f7ff b903 	b.w	8001cae <_vfprintf_r+0x872>
 8002aa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002aaa:	e6e8      	b.n	800287e <_vfprintf_r+0x1442>
 8002aac:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002ab0:	f7ff b958 	b.w	8001d64 <_vfprintf_r+0x928>
 8002ab4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002ab8:	f7ff b932 	b.w	8001d20 <_vfprintf_r+0x8e4>
 8002abc:	66666667 	.word	0x66666667

08002ac0 <__sbprintf>:
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8002ac8:	8989      	ldrh	r1, [r1, #12]
 8002aca:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8002acc:	89e5      	ldrh	r5, [r4, #14]
 8002ace:	9619      	str	r6, [sp, #100]	; 0x64
 8002ad0:	f021 0102 	bic.w	r1, r1, #2
 8002ad4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002ad6:	f8ad 500e 	strh.w	r5, [sp, #14]
 8002ada:	2500      	movs	r5, #0
 8002adc:	69e7      	ldr	r7, [r4, #28]
 8002ade:	f8ad 100c 	strh.w	r1, [sp, #12]
 8002ae2:	9609      	str	r6, [sp, #36]	; 0x24
 8002ae4:	9506      	str	r5, [sp, #24]
 8002ae6:	ae1a      	add	r6, sp, #104	; 0x68
 8002ae8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002aec:	4669      	mov	r1, sp
 8002aee:	9600      	str	r6, [sp, #0]
 8002af0:	9604      	str	r6, [sp, #16]
 8002af2:	9502      	str	r5, [sp, #8]
 8002af4:	9505      	str	r5, [sp, #20]
 8002af6:	9707      	str	r7, [sp, #28]
 8002af8:	4606      	mov	r6, r0
 8002afa:	f7fe fc9f 	bl	800143c <_vfprintf_r>
 8002afe:	1e05      	subs	r5, r0, #0
 8002b00:	db07      	blt.n	8002b12 <__sbprintf+0x52>
 8002b02:	4630      	mov	r0, r6
 8002b04:	4669      	mov	r1, sp
 8002b06:	f001 f8d7 	bl	8003cb8 <_fflush_r>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	bf18      	it	ne
 8002b0e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8002b12:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002b16:	065b      	lsls	r3, r3, #25
 8002b18:	d503      	bpl.n	8002b22 <__sbprintf+0x62>
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	4628      	mov	r0, r5
 8002b24:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8002b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2a:	bf00      	nop

08002b2c <__swsetup_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <__swsetup_r+0xc0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4605      	mov	r5, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	b113      	cbz	r3, 8002b3e <__swsetup_r+0x12>
 8002b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d036      	beq.n	8002bac <__swsetup_r+0x80>
 8002b3e:	89a2      	ldrh	r2, [r4, #12]
 8002b40:	b293      	uxth	r3, r2
 8002b42:	0718      	lsls	r0, r3, #28
 8002b44:	d50c      	bpl.n	8002b60 <__swsetup_r+0x34>
 8002b46:	6920      	ldr	r0, [r4, #16]
 8002b48:	b1a8      	cbz	r0, 8002b76 <__swsetup_r+0x4a>
 8002b4a:	f013 0201 	ands.w	r2, r3, #1
 8002b4e:	d01e      	beq.n	8002b8e <__swsetup_r+0x62>
 8002b50:	6963      	ldr	r3, [r4, #20]
 8002b52:	2200      	movs	r2, #0
 8002b54:	425b      	negs	r3, r3
 8002b56:	61a3      	str	r3, [r4, #24]
 8002b58:	60a2      	str	r2, [r4, #8]
 8002b5a:	b1f0      	cbz	r0, 8002b9a <__swsetup_r+0x6e>
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	06d9      	lsls	r1, r3, #27
 8002b62:	d53b      	bpl.n	8002bdc <__swsetup_r+0xb0>
 8002b64:	0758      	lsls	r0, r3, #29
 8002b66:	d425      	bmi.n	8002bb4 <__swsetup_r+0x88>
 8002b68:	6920      	ldr	r0, [r4, #16]
 8002b6a:	f042 0308 	orr.w	r3, r2, #8
 8002b6e:	81a3      	strh	r3, [r4, #12]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d1e9      	bne.n	8002b4a <__swsetup_r+0x1e>
 8002b76:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8002b7a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002b7e:	d0e4      	beq.n	8002b4a <__swsetup_r+0x1e>
 8002b80:	4628      	mov	r0, r5
 8002b82:	4621      	mov	r1, r4
 8002b84:	f001 faa4 	bl	80040d0 <__smakebuf_r>
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	6920      	ldr	r0, [r4, #16]
 8002b8c:	e7dd      	b.n	8002b4a <__swsetup_r+0x1e>
 8002b8e:	0799      	lsls	r1, r3, #30
 8002b90:	bf58      	it	pl
 8002b92:	6962      	ldrpl	r2, [r4, #20]
 8002b94:	60a2      	str	r2, [r4, #8]
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d1e0      	bne.n	8002b5c <__swsetup_r+0x30>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	061a      	lsls	r2, r3, #24
 8002b9e:	d5de      	bpl.n	8002b5e <__swsetup_r+0x32>
 8002ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba4:	81a3      	strh	r3, [r4, #12]
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002baa:	bd38      	pop	{r3, r4, r5, pc}
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 f917 	bl	8003de0 <__sinit>
 8002bb2:	e7c4      	b.n	8002b3e <__swsetup_r+0x12>
 8002bb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002bb6:	b149      	cbz	r1, 8002bcc <__swsetup_r+0xa0>
 8002bb8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002bbc:	4299      	cmp	r1, r3
 8002bbe:	d003      	beq.n	8002bc8 <__swsetup_r+0x9c>
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	f001 f965 	bl	8003e90 <_free_r>
 8002bc6:	89a2      	ldrh	r2, [r4, #12]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	6323      	str	r3, [r4, #48]	; 0x30
 8002bcc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6920      	ldr	r0, [r4, #16]
 8002bd4:	6063      	str	r3, [r4, #4]
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	6020      	str	r0, [r4, #0]
 8002bda:	e7c6      	b.n	8002b6a <__swsetup_r+0x3e>
 8002bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be0:	2309      	movs	r3, #9
 8002be2:	602b      	str	r3, [r5, #0]
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be8:	81a2      	strh	r2, [r4, #12]
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	20000430 	.word	0x20000430

08002bf0 <quorem>:
 8002bf0:	6902      	ldr	r2, [r0, #16]
 8002bf2:	690b      	ldr	r3, [r1, #16]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	f300 808d 	bgt.w	8002d14 <quorem+0x124>
 8002bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002c02:	f101 0714 	add.w	r7, r1, #20
 8002c06:	f100 0b14 	add.w	fp, r0, #20
 8002c0a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8002c0e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8002c12:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002c16:	b083      	sub	sp, #12
 8002c18:	3201      	adds	r2, #1
 8002c1a:	fbb3 f9f2 	udiv	r9, r3, r2
 8002c1e:	eb0b 0304 	add.w	r3, fp, r4
 8002c22:	9400      	str	r4, [sp, #0]
 8002c24:	eb07 0a04 	add.w	sl, r7, r4
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	f1b9 0f00 	cmp.w	r9, #0
 8002c2e:	d039      	beq.n	8002ca4 <quorem+0xb4>
 8002c30:	2500      	movs	r5, #0
 8002c32:	46bc      	mov	ip, r7
 8002c34:	46de      	mov	lr, fp
 8002c36:	462b      	mov	r3, r5
 8002c38:	f85c 6b04 	ldr.w	r6, [ip], #4
 8002c3c:	f8de 2000 	ldr.w	r2, [lr]
 8002c40:	b2b4      	uxth	r4, r6
 8002c42:	fb09 5504 	mla	r5, r9, r4, r5
 8002c46:	0c36      	lsrs	r6, r6, #16
 8002c48:	0c2c      	lsrs	r4, r5, #16
 8002c4a:	fb09 4406 	mla	r4, r9, r6, r4
 8002c4e:	b2ad      	uxth	r5, r5
 8002c50:	1b5b      	subs	r3, r3, r5
 8002c52:	b2a6      	uxth	r6, r4
 8002c54:	fa13 f382 	uxtah	r3, r3, r2
 8002c58:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8002c5c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002c66:	45e2      	cmp	sl, ip
 8002c68:	f84e 3b04 	str.w	r3, [lr], #4
 8002c6c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8002c70:	ea4f 4326 	mov.w	r3, r6, asr #16
 8002c74:	d2e0      	bcs.n	8002c38 <quorem+0x48>
 8002c76:	9b00      	ldr	r3, [sp, #0]
 8002c78:	f85b 3003 	ldr.w	r3, [fp, r3]
 8002c7c:	b993      	cbnz	r3, 8002ca4 <quorem+0xb4>
 8002c7e:	9c01      	ldr	r4, [sp, #4]
 8002c80:	1f23      	subs	r3, r4, #4
 8002c82:	459b      	cmp	fp, r3
 8002c84:	d20c      	bcs.n	8002ca0 <quorem+0xb0>
 8002c86:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002c8a:	b94b      	cbnz	r3, 8002ca0 <quorem+0xb0>
 8002c8c:	f1a4 0308 	sub.w	r3, r4, #8
 8002c90:	e002      	b.n	8002c98 <quorem+0xa8>
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	3b04      	subs	r3, #4
 8002c96:	b91a      	cbnz	r2, 8002ca0 <quorem+0xb0>
 8002c98:	459b      	cmp	fp, r3
 8002c9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002c9e:	d3f8      	bcc.n	8002c92 <quorem+0xa2>
 8002ca0:	f8c0 8010 	str.w	r8, [r0, #16]
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	f001 ff95 	bl	8004bd4 <__mcmp>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	db2e      	blt.n	8002d0c <quorem+0x11c>
 8002cae:	f109 0901 	add.w	r9, r9, #1
 8002cb2:	465d      	mov	r5, fp
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f857 1b04 	ldr.w	r1, [r7], #4
 8002cba:	6828      	ldr	r0, [r5, #0]
 8002cbc:	b28a      	uxth	r2, r1
 8002cbe:	1a9a      	subs	r2, r3, r2
 8002cc0:	0c09      	lsrs	r1, r1, #16
 8002cc2:	fa12 f280 	uxtah	r2, r2, r0
 8002cc6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8002cca:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8002cce:	b291      	uxth	r1, r2
 8002cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002cd4:	45ba      	cmp	sl, r7
 8002cd6:	f845 1b04 	str.w	r1, [r5], #4
 8002cda:	ea4f 4323 	mov.w	r3, r3, asr #16
 8002cde:	d2ea      	bcs.n	8002cb6 <quorem+0xc6>
 8002ce0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8002ce4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8002ce8:	b982      	cbnz	r2, 8002d0c <quorem+0x11c>
 8002cea:	1f1a      	subs	r2, r3, #4
 8002cec:	4593      	cmp	fp, r2
 8002cee:	d20b      	bcs.n	8002d08 <quorem+0x118>
 8002cf0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8002cf4:	b942      	cbnz	r2, 8002d08 <quorem+0x118>
 8002cf6:	3b08      	subs	r3, #8
 8002cf8:	e002      	b.n	8002d00 <quorem+0x110>
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	3b04      	subs	r3, #4
 8002cfe:	b91a      	cbnz	r2, 8002d08 <quorem+0x118>
 8002d00:	459b      	cmp	fp, r3
 8002d02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002d06:	d3f8      	bcc.n	8002cfa <quorem+0x10a>
 8002d08:	f8c4 8010 	str.w	r8, [r4, #16]
 8002d0c:	4648      	mov	r0, r9
 8002d0e:	b003      	add	sp, #12
 8002d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d14:	2000      	movs	r0, #0
 8002d16:	4770      	bx	lr

08002d18 <_dtoa_r>:
 8002d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002d1e:	b097      	sub	sp, #92	; 0x5c
 8002d20:	4681      	mov	r9, r0
 8002d22:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8002d24:	4692      	mov	sl, r2
 8002d26:	469b      	mov	fp, r3
 8002d28:	b149      	cbz	r1, 8002d3e <_dtoa_r+0x26>
 8002d2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d2c:	604a      	str	r2, [r1, #4]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4093      	lsls	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
 8002d34:	f001 fd6c 	bl	8004810 <_Bfree>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002d3e:	f1bb 0f00 	cmp.w	fp, #0
 8002d42:	46d8      	mov	r8, fp
 8002d44:	db33      	blt.n	8002dae <_dtoa_r+0x96>
 8002d46:	2300      	movs	r3, #0
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	4ba5      	ldr	r3, [pc, #660]	; (8002fe0 <_dtoa_r+0x2c8>)
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	ea08 0303 	and.w	r3, r8, r3
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d014      	beq.n	8002d80 <_dtoa_r+0x68>
 8002d56:	4650      	mov	r0, sl
 8002d58:	4659      	mov	r1, fp
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f7fd ffdd 	bl	8000d1c <__aeabi_dcmpeq>
 8002d62:	4605      	mov	r5, r0
 8002d64:	b348      	cbz	r0, 8002dba <_dtoa_r+0xa2>
 8002d66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80c5 	beq.w	8002efe <_dtoa_r+0x1e6>
 8002d74:	489b      	ldr	r0, [pc, #620]	; (8002fe4 <_dtoa_r+0x2cc>)
 8002d76:	6018      	str	r0, [r3, #0]
 8002d78:	3801      	subs	r0, #1
 8002d7a:	b017      	add	sp, #92	; 0x5c
 8002d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002d82:	f242 730f 	movw	r3, #9999	; 0x270f
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	f1ba 0f00 	cmp.w	sl, #0
 8002d8c:	f000 80a2 	beq.w	8002ed4 <_dtoa_r+0x1bc>
 8002d90:	4895      	ldr	r0, [pc, #596]	; (8002fe8 <_dtoa_r+0x2d0>)
 8002d92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <_dtoa_r+0x62>
 8002d98:	78c3      	ldrb	r3, [r0, #3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80b1 	beq.w	8002f02 <_dtoa_r+0x1ea>
 8002da0:	f100 0308 	add.w	r3, r0, #8
 8002da4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	b017      	add	sp, #92	; 0x5c
 8002daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dae:	2301      	movs	r3, #1
 8002db0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	46c3      	mov	fp, r8
 8002db8:	e7c7      	b.n	8002d4a <_dtoa_r+0x32>
 8002dba:	aa14      	add	r2, sp, #80	; 0x50
 8002dbc:	ab15      	add	r3, sp, #84	; 0x54
 8002dbe:	9201      	str	r2, [sp, #4]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4652      	mov	r2, sl
 8002dc4:	465b      	mov	r3, fp
 8002dc6:	4648      	mov	r0, r9
 8002dc8:	f001 ffae 	bl	8004d28 <__d2b>
 8002dcc:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8002dd0:	9008      	str	r0, [sp, #32]
 8002dd2:	f040 8088 	bne.w	8002ee6 <_dtoa_r+0x1ce>
 8002dd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002dd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8002dda:	442c      	add	r4, r5
 8002ddc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	f340 8291 	ble.w	8003308 <_dtoa_r+0x5f0>
 8002de6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002dea:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8002dee:	fa08 f803 	lsl.w	r8, r8, r3
 8002df2:	fa2a f000 	lsr.w	r0, sl, r0
 8002df6:	ea40 0008 	orr.w	r0, r0, r8
 8002dfa:	f7fd fcb1 	bl	8000760 <__aeabi_ui2d>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	3c01      	subs	r4, #1
 8002e02:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002e06:	9310      	str	r3, [sp, #64]	; 0x40
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4b78      	ldr	r3, [pc, #480]	; (8002fec <_dtoa_r+0x2d4>)
 8002e0c:	f7fd fb6a 	bl	80004e4 <__aeabi_dsub>
 8002e10:	a36d      	add	r3, pc, #436	; (adr r3, 8002fc8 <_dtoa_r+0x2b0>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd fd19 	bl	800084c <__aeabi_dmul>
 8002e1a:	a36d      	add	r3, pc, #436	; (adr r3, 8002fd0 <_dtoa_r+0x2b8>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd fb62 	bl	80004e8 <__adddf3>
 8002e24:	4606      	mov	r6, r0
 8002e26:	4620      	mov	r0, r4
 8002e28:	460f      	mov	r7, r1
 8002e2a:	f7fd fca9 	bl	8000780 <__aeabi_i2d>
 8002e2e:	a36a      	add	r3, pc, #424	; (adr r3, 8002fd8 <_dtoa_r+0x2c0>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f7fd fd0a 	bl	800084c <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	4639      	mov	r1, r7
 8002e40:	f7fd fb52 	bl	80004e8 <__adddf3>
 8002e44:	4606      	mov	r6, r0
 8002e46:	460f      	mov	r7, r1
 8002e48:	f7fd ff9a 	bl	8000d80 <__aeabi_d2iz>
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	9004      	str	r0, [sp, #16]
 8002e50:	2300      	movs	r3, #0
 8002e52:	4630      	mov	r0, r6
 8002e54:	4639      	mov	r1, r7
 8002e56:	f7fd ff6b 	bl	8000d30 <__aeabi_dcmplt>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	f040 8230 	bne.w	80032c0 <_dtoa_r+0x5a8>
 8002e60:	9e04      	ldr	r6, [sp, #16]
 8002e62:	2e16      	cmp	r6, #22
 8002e64:	f200 8229 	bhi.w	80032ba <_dtoa_r+0x5a2>
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <_dtoa_r+0x2d8>)
 8002e6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e72:	4652      	mov	r2, sl
 8002e74:	465b      	mov	r3, fp
 8002e76:	f7fd ff79 	bl	8000d6c <__aeabi_dcmpgt>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	f000 8249 	beq.w	8003312 <_dtoa_r+0x5fa>
 8002e80:	1e73      	subs	r3, r6, #1
 8002e82:	9304      	str	r3, [sp, #16]
 8002e84:	2300      	movs	r3, #0
 8002e86:	930c      	str	r3, [sp, #48]	; 0x30
 8002e88:	1b2c      	subs	r4, r5, r4
 8002e8a:	1e63      	subs	r3, r4, #1
 8002e8c:	9302      	str	r3, [sp, #8]
 8002e8e:	f100 8232 	bmi.w	80032f6 <_dtoa_r+0x5de>
 8002e92:	2300      	movs	r3, #0
 8002e94:	9305      	str	r3, [sp, #20]
 8002e96:	9b04      	ldr	r3, [sp, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f2c0 8223 	blt.w	80032e4 <_dtoa_r+0x5cc>
 8002e9e:	9a02      	ldr	r2, [sp, #8]
 8002ea0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4419      	add	r1, r3
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9102      	str	r1, [sp, #8]
 8002eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8002eac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002eae:	2b09      	cmp	r3, #9
 8002eb0:	d829      	bhi.n	8002f06 <_dtoa_r+0x1ee>
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	f340 8658 	ble.w	8003b68 <_dtoa_r+0xe50>
 8002eb8:	3b04      	subs	r3, #4
 8002eba:	9320      	str	r3, [sp, #128]	; 0x80
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ec0:	3b02      	subs	r3, #2
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	f200 8635 	bhi.w	8003b32 <_dtoa_r+0xe1a>
 8002ec8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ecc:	0228032c 	.word	0x0228032c
 8002ed0:	04590337 	.word	0x04590337
 8002ed4:	4b44      	ldr	r3, [pc, #272]	; (8002fe8 <_dtoa_r+0x2d0>)
 8002ed6:	4a47      	ldr	r2, [pc, #284]	; (8002ff4 <_dtoa_r+0x2dc>)
 8002ed8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002edc:	2800      	cmp	r0, #0
 8002ede:	bf14      	ite	ne
 8002ee0:	4618      	movne	r0, r3
 8002ee2:	4610      	moveq	r0, r2
 8002ee4:	e755      	b.n	8002d92 <_dtoa_r+0x7a>
 8002ee6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002eea:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002eee:	9510      	str	r5, [sp, #64]	; 0x40
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002ef6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002efa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002efc:	e784      	b.n	8002e08 <_dtoa_r+0xf0>
 8002efe:	483e      	ldr	r0, [pc, #248]	; (8002ff8 <_dtoa_r+0x2e0>)
 8002f00:	e73b      	b.n	8002d7a <_dtoa_r+0x62>
 8002f02:	1cc3      	adds	r3, r0, #3
 8002f04:	e74e      	b.n	8002da4 <_dtoa_r+0x8c>
 8002f06:	2100      	movs	r1, #0
 8002f08:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8002f0c:	4648      	mov	r0, r9
 8002f0e:	9120      	str	r1, [sp, #128]	; 0x80
 8002f10:	f001 fc58 	bl	80047c4 <_Balloc>
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f18:	9306      	str	r3, [sp, #24]
 8002f1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f1e:	2301      	movs	r3, #1
 8002f20:	9007      	str	r0, [sp, #28]
 8002f22:	9221      	str	r2, [sp, #132]	; 0x84
 8002f24:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8002f28:	9309      	str	r3, [sp, #36]	; 0x24
 8002f2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f2c0 80d1 	blt.w	80030d4 <_dtoa_r+0x3bc>
 8002f32:	9a04      	ldr	r2, [sp, #16]
 8002f34:	2a0e      	cmp	r2, #14
 8002f36:	f300 80cd 	bgt.w	80030d4 <_dtoa_r+0x3bc>
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <_dtoa_r+0x2d8>)
 8002f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f44:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f2c0 8300 	blt.w	8003550 <_dtoa_r+0x838>
 8002f50:	4656      	mov	r6, sl
 8002f52:	465f      	mov	r7, fp
 8002f54:	4650      	mov	r0, sl
 8002f56:	4659      	mov	r1, fp
 8002f58:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8002f5c:	4652      	mov	r2, sl
 8002f5e:	465b      	mov	r3, fp
 8002f60:	f7fd fd9e 	bl	8000aa0 <__aeabi_ddiv>
 8002f64:	f7fd ff0c 	bl	8000d80 <__aeabi_d2iz>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	f7fd fc09 	bl	8000780 <__aeabi_i2d>
 8002f6e:	4652      	mov	r2, sl
 8002f70:	465b      	mov	r3, fp
 8002f72:	f7fd fc6b 	bl	800084c <__aeabi_dmul>
 8002f76:	460b      	mov	r3, r1
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4639      	mov	r1, r7
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f7fd fab1 	bl	80004e4 <__aeabi_dsub>
 8002f82:	9d07      	ldr	r5, [sp, #28]
 8002f84:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8002f88:	702b      	strb	r3, [r5, #0]
 8002f8a:	9b06      	ldr	r3, [sp, #24]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	4606      	mov	r6, r0
 8002f90:	460f      	mov	r7, r1
 8002f92:	f105 0501 	add.w	r5, r5, #1
 8002f96:	d062      	beq.n	800305e <_dtoa_r+0x346>
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <_dtoa_r+0x2e4>)
 8002f9c:	f7fd fc56 	bl	800084c <__aeabi_dmul>
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	4606      	mov	r6, r0
 8002fa6:	460f      	mov	r7, r1
 8002fa8:	f7fd feb8 	bl	8000d1c <__aeabi_dcmpeq>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d17e      	bne.n	80030ae <_dtoa_r+0x396>
 8002fb0:	f8cd 9014 	str.w	r9, [sp, #20]
 8002fb4:	f8dd a018 	ldr.w	sl, [sp, #24]
 8002fb8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002fbc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002fc0:	e029      	b.n	8003016 <_dtoa_r+0x2fe>
 8002fc2:	bf00      	nop
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	636f4361 	.word	0x636f4361
 8002fcc:	3fd287a7 	.word	0x3fd287a7
 8002fd0:	8b60c8b3 	.word	0x8b60c8b3
 8002fd4:	3fc68a28 	.word	0x3fc68a28
 8002fd8:	509f79fb 	.word	0x509f79fb
 8002fdc:	3fd34413 	.word	0x3fd34413
 8002fe0:	7ff00000 	.word	0x7ff00000
 8002fe4:	08008391 	.word	0x08008391
 8002fe8:	080083a0 	.word	0x080083a0
 8002fec:	3ff80000 	.word	0x3ff80000
 8002ff0:	080083c0 	.word	0x080083c0
 8002ff4:	08008394 	.word	0x08008394
 8002ff8:	08008390 	.word	0x08008390
 8002ffc:	40240000 	.word	0x40240000
 8003000:	f7fd fc24 	bl	800084c <__aeabi_dmul>
 8003004:	2200      	movs	r2, #0
 8003006:	2300      	movs	r3, #0
 8003008:	4606      	mov	r6, r0
 800300a:	460f      	mov	r7, r1
 800300c:	f7fd fe86 	bl	8000d1c <__aeabi_dcmpeq>
 8003010:	2800      	cmp	r0, #0
 8003012:	f040 83b7 	bne.w	8003784 <_dtoa_r+0xa6c>
 8003016:	4642      	mov	r2, r8
 8003018:	464b      	mov	r3, r9
 800301a:	4630      	mov	r0, r6
 800301c:	4639      	mov	r1, r7
 800301e:	f7fd fd3f 	bl	8000aa0 <__aeabi_ddiv>
 8003022:	f7fd fead 	bl	8000d80 <__aeabi_d2iz>
 8003026:	4604      	mov	r4, r0
 8003028:	f7fd fbaa 	bl	8000780 <__aeabi_i2d>
 800302c:	4642      	mov	r2, r8
 800302e:	464b      	mov	r3, r9
 8003030:	f7fd fc0c 	bl	800084c <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4630      	mov	r0, r6
 800303a:	4639      	mov	r1, r7
 800303c:	f7fd fa52 	bl	80004e4 <__aeabi_dsub>
 8003040:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003044:	f805 eb01 	strb.w	lr, [r5], #1
 8003048:	ebcb 0e05 	rsb	lr, fp, r5
 800304c:	45d6      	cmp	lr, sl
 800304e:	4606      	mov	r6, r0
 8003050:	460f      	mov	r7, r1
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	4bb0      	ldr	r3, [pc, #704]	; (8003318 <_dtoa_r+0x600>)
 8003058:	d1d2      	bne.n	8003000 <_dtoa_r+0x2e8>
 800305a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800305e:	4632      	mov	r2, r6
 8003060:	463b      	mov	r3, r7
 8003062:	4630      	mov	r0, r6
 8003064:	4639      	mov	r1, r7
 8003066:	f7fd fa3f 	bl	80004e8 <__adddf3>
 800306a:	4606      	mov	r6, r0
 800306c:	460f      	mov	r7, r1
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003076:	f7fd fe5b 	bl	8000d30 <__aeabi_dcmplt>
 800307a:	b940      	cbnz	r0, 800308e <_dtoa_r+0x376>
 800307c:	4632      	mov	r2, r6
 800307e:	463b      	mov	r3, r7
 8003080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003084:	f7fd fe4a 	bl	8000d1c <__aeabi_dcmpeq>
 8003088:	b188      	cbz	r0, 80030ae <_dtoa_r+0x396>
 800308a:	07e3      	lsls	r3, r4, #31
 800308c:	d50f      	bpl.n	80030ae <_dtoa_r+0x396>
 800308e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003092:	9a07      	ldr	r2, [sp, #28]
 8003094:	1e6b      	subs	r3, r5, #1
 8003096:	e004      	b.n	80030a2 <_dtoa_r+0x38a>
 8003098:	429a      	cmp	r2, r3
 800309a:	f000 842c 	beq.w	80038f6 <_dtoa_r+0xbde>
 800309e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030a2:	2c39      	cmp	r4, #57	; 0x39
 80030a4:	f103 0501 	add.w	r5, r3, #1
 80030a8:	d0f6      	beq.n	8003098 <_dtoa_r+0x380>
 80030aa:	3401      	adds	r4, #1
 80030ac:	701c      	strb	r4, [r3, #0]
 80030ae:	9908      	ldr	r1, [sp, #32]
 80030b0:	4648      	mov	r0, r9
 80030b2:	f001 fbad 	bl	8004810 <_Bfree>
 80030b6:	2200      	movs	r2, #0
 80030b8:	9b04      	ldr	r3, [sp, #16]
 80030ba:	702a      	strb	r2, [r5, #0]
 80030bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80030be:	3301      	adds	r3, #1
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 83a7 	beq.w	8003818 <_dtoa_r+0xb00>
 80030ca:	9807      	ldr	r0, [sp, #28]
 80030cc:	601d      	str	r5, [r3, #0]
 80030ce:	b017      	add	sp, #92	; 0x5c
 80030d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	f000 8112 	beq.w	8003300 <_dtoa_r+0x5e8>
 80030dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80030de:	2a01      	cmp	r2, #1
 80030e0:	f340 8258 	ble.w	8003594 <_dtoa_r+0x87c>
 80030e4:	9b06      	ldr	r3, [sp, #24]
 80030e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030e8:	1e5f      	subs	r7, r3, #1
 80030ea:	42ba      	cmp	r2, r7
 80030ec:	f2c0 8397 	blt.w	800381e <_dtoa_r+0xb06>
 80030f0:	1bd7      	subs	r7, r2, r7
 80030f2:	9b06      	ldr	r3, [sp, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f2c0 848a 	blt.w	8003a0e <_dtoa_r+0xcf6>
 80030fa:	9d05      	ldr	r5, [sp, #20]
 80030fc:	9b06      	ldr	r3, [sp, #24]
 80030fe:	9a05      	ldr	r2, [sp, #20]
 8003100:	441a      	add	r2, r3
 8003102:	9205      	str	r2, [sp, #20]
 8003104:	9a02      	ldr	r2, [sp, #8]
 8003106:	2101      	movs	r1, #1
 8003108:	441a      	add	r2, r3
 800310a:	4648      	mov	r0, r9
 800310c:	9202      	str	r2, [sp, #8]
 800310e:	f001 fc17 	bl	8004940 <__i2b>
 8003112:	4606      	mov	r6, r0
 8003114:	b165      	cbz	r5, 8003130 <_dtoa_r+0x418>
 8003116:	9902      	ldr	r1, [sp, #8]
 8003118:	2900      	cmp	r1, #0
 800311a:	460b      	mov	r3, r1
 800311c:	dd08      	ble.n	8003130 <_dtoa_r+0x418>
 800311e:	42a9      	cmp	r1, r5
 8003120:	9a05      	ldr	r2, [sp, #20]
 8003122:	bfa8      	it	ge
 8003124:	462b      	movge	r3, r5
 8003126:	1ad2      	subs	r2, r2, r3
 8003128:	1aed      	subs	r5, r5, r3
 800312a:	1acb      	subs	r3, r1, r3
 800312c:	9205      	str	r2, [sp, #20]
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	f340 82fc 	ble.w	8003730 <_dtoa_r+0xa18>
 8003138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800313a:	2a00      	cmp	r2, #0
 800313c:	f000 8201 	beq.w	8003542 <_dtoa_r+0x82a>
 8003140:	2f00      	cmp	r7, #0
 8003142:	f000 81fe 	beq.w	8003542 <_dtoa_r+0x82a>
 8003146:	4631      	mov	r1, r6
 8003148:	463a      	mov	r2, r7
 800314a:	4648      	mov	r0, r9
 800314c:	f001 fc9a 	bl	8004a84 <__pow5mult>
 8003150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003154:	4601      	mov	r1, r0
 8003156:	4642      	mov	r2, r8
 8003158:	4606      	mov	r6, r0
 800315a:	4648      	mov	r0, r9
 800315c:	f001 fbfa 	bl	8004954 <__multiply>
 8003160:	4641      	mov	r1, r8
 8003162:	4604      	mov	r4, r0
 8003164:	4648      	mov	r0, r9
 8003166:	f001 fb53 	bl	8004810 <_Bfree>
 800316a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800316c:	1bdb      	subs	r3, r3, r7
 800316e:	930a      	str	r3, [sp, #40]	; 0x28
 8003170:	f040 81e6 	bne.w	8003540 <_dtoa_r+0x828>
 8003174:	2101      	movs	r1, #1
 8003176:	4648      	mov	r0, r9
 8003178:	f001 fbe2 	bl	8004940 <__i2b>
 800317c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800317e:	4680      	mov	r8, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8219 	beq.w	80035b8 <_dtoa_r+0x8a0>
 8003186:	4601      	mov	r1, r0
 8003188:	461a      	mov	r2, r3
 800318a:	4648      	mov	r0, r9
 800318c:	f001 fc7a 	bl	8004a84 <__pow5mult>
 8003190:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003192:	2b01      	cmp	r3, #1
 8003194:	4680      	mov	r8, r0
 8003196:	f340 82f8 	ble.w	800378a <_dtoa_r+0xa72>
 800319a:	2700      	movs	r7, #0
 800319c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80031a0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80031a4:	6918      	ldr	r0, [r3, #16]
 80031a6:	f001 fb7d 	bl	80048a4 <__hi0bits>
 80031aa:	f1c0 0020 	rsb	r0, r0, #32
 80031ae:	9a02      	ldr	r2, [sp, #8]
 80031b0:	4410      	add	r0, r2
 80031b2:	f010 001f 	ands.w	r0, r0, #31
 80031b6:	f000 81f6 	beq.w	80035a6 <_dtoa_r+0x88e>
 80031ba:	f1c0 0320 	rsb	r3, r0, #32
 80031be:	2b04      	cmp	r3, #4
 80031c0:	f340 84ca 	ble.w	8003b58 <_dtoa_r+0xe40>
 80031c4:	9b05      	ldr	r3, [sp, #20]
 80031c6:	f1c0 001c 	rsb	r0, r0, #28
 80031ca:	4403      	add	r3, r0
 80031cc:	9305      	str	r3, [sp, #20]
 80031ce:	4613      	mov	r3, r2
 80031d0:	4403      	add	r3, r0
 80031d2:	4405      	add	r5, r0
 80031d4:	9302      	str	r3, [sp, #8]
 80031d6:	9b05      	ldr	r3, [sp, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	dd05      	ble.n	80031e8 <_dtoa_r+0x4d0>
 80031dc:	4621      	mov	r1, r4
 80031de:	461a      	mov	r2, r3
 80031e0:	4648      	mov	r0, r9
 80031e2:	f001 fc9f 	bl	8004b24 <__lshift>
 80031e6:	4604      	mov	r4, r0
 80031e8:	9b02      	ldr	r3, [sp, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	dd05      	ble.n	80031fa <_dtoa_r+0x4e2>
 80031ee:	4641      	mov	r1, r8
 80031f0:	461a      	mov	r2, r3
 80031f2:	4648      	mov	r0, r9
 80031f4:	f001 fc96 	bl	8004b24 <__lshift>
 80031f8:	4680      	mov	r8, r0
 80031fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 827c 	bne.w	80036fa <_dtoa_r+0x9e2>
 8003202:	9b06      	ldr	r3, [sp, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f340 8295 	ble.w	8003734 <_dtoa_r+0xa1c>
 800320a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	f040 81f5 	bne.w	80035fc <_dtoa_r+0x8e4>
 8003212:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003216:	9f06      	ldr	r7, [sp, #24]
 8003218:	465d      	mov	r5, fp
 800321a:	e002      	b.n	8003222 <_dtoa_r+0x50a>
 800321c:	f001 fb02 	bl	8004824 <__multadd>
 8003220:	4604      	mov	r4, r0
 8003222:	4641      	mov	r1, r8
 8003224:	4620      	mov	r0, r4
 8003226:	f7ff fce3 	bl	8002bf0 <quorem>
 800322a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800322e:	f805 ab01 	strb.w	sl, [r5], #1
 8003232:	ebcb 0305 	rsb	r3, fp, r5
 8003236:	42bb      	cmp	r3, r7
 8003238:	f04f 020a 	mov.w	r2, #10
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	4621      	mov	r1, r4
 8003242:	4648      	mov	r0, r9
 8003244:	dbea      	blt.n	800321c <_dtoa_r+0x504>
 8003246:	9b07      	ldr	r3, [sp, #28]
 8003248:	9a06      	ldr	r2, [sp, #24]
 800324a:	2a01      	cmp	r2, #1
 800324c:	bfac      	ite	ge
 800324e:	189b      	addge	r3, r3, r2
 8003250:	3301      	addlt	r3, #1
 8003252:	461d      	mov	r5, r3
 8003254:	f04f 0b00 	mov.w	fp, #0
 8003258:	4621      	mov	r1, r4
 800325a:	2201      	movs	r2, #1
 800325c:	4648      	mov	r0, r9
 800325e:	f001 fc61 	bl	8004b24 <__lshift>
 8003262:	4641      	mov	r1, r8
 8003264:	9008      	str	r0, [sp, #32]
 8003266:	f001 fcb5 	bl	8004bd4 <__mcmp>
 800326a:	2800      	cmp	r0, #0
 800326c:	f340 830d 	ble.w	800388a <_dtoa_r+0xb72>
 8003270:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003274:	9907      	ldr	r1, [sp, #28]
 8003276:	1e6b      	subs	r3, r5, #1
 8003278:	e004      	b.n	8003284 <_dtoa_r+0x56c>
 800327a:	428b      	cmp	r3, r1
 800327c:	f000 8278 	beq.w	8003770 <_dtoa_r+0xa58>
 8003280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003284:	2a39      	cmp	r2, #57	; 0x39
 8003286:	f103 0501 	add.w	r5, r3, #1
 800328a:	d0f6      	beq.n	800327a <_dtoa_r+0x562>
 800328c:	3201      	adds	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	4641      	mov	r1, r8
 8003292:	4648      	mov	r0, r9
 8003294:	f001 fabc 	bl	8004810 <_Bfree>
 8003298:	2e00      	cmp	r6, #0
 800329a:	f43f af08 	beq.w	80030ae <_dtoa_r+0x396>
 800329e:	f1bb 0f00 	cmp.w	fp, #0
 80032a2:	d005      	beq.n	80032b0 <_dtoa_r+0x598>
 80032a4:	45b3      	cmp	fp, r6
 80032a6:	d003      	beq.n	80032b0 <_dtoa_r+0x598>
 80032a8:	4659      	mov	r1, fp
 80032aa:	4648      	mov	r0, r9
 80032ac:	f001 fab0 	bl	8004810 <_Bfree>
 80032b0:	4631      	mov	r1, r6
 80032b2:	4648      	mov	r0, r9
 80032b4:	f001 faac 	bl	8004810 <_Bfree>
 80032b8:	e6f9      	b.n	80030ae <_dtoa_r+0x396>
 80032ba:	2301      	movs	r3, #1
 80032bc:	930c      	str	r3, [sp, #48]	; 0x30
 80032be:	e5e3      	b.n	8002e88 <_dtoa_r+0x170>
 80032c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80032c4:	4640      	mov	r0, r8
 80032c6:	f7fd fa5b 	bl	8000780 <__aeabi_i2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4630      	mov	r0, r6
 80032d0:	4639      	mov	r1, r7
 80032d2:	f7fd fd23 	bl	8000d1c <__aeabi_dcmpeq>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	f47f adc2 	bne.w	8002e60 <_dtoa_r+0x148>
 80032dc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	e5bd      	b.n	8002e60 <_dtoa_r+0x148>
 80032e4:	9a05      	ldr	r2, [sp, #20]
 80032e6:	9b04      	ldr	r3, [sp, #16]
 80032e8:	1ad2      	subs	r2, r2, r3
 80032ea:	425b      	negs	r3, r3
 80032ec:	930a      	str	r3, [sp, #40]	; 0x28
 80032ee:	2300      	movs	r3, #0
 80032f0:	9205      	str	r2, [sp, #20]
 80032f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80032f4:	e5da      	b.n	8002eac <_dtoa_r+0x194>
 80032f6:	425b      	negs	r3, r3
 80032f8:	9305      	str	r3, [sp, #20]
 80032fa:	2300      	movs	r3, #0
 80032fc:	9302      	str	r3, [sp, #8]
 80032fe:	e5ca      	b.n	8002e96 <_dtoa_r+0x17e>
 8003300:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003302:	9d05      	ldr	r5, [sp, #20]
 8003304:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003306:	e705      	b.n	8003114 <_dtoa_r+0x3fc>
 8003308:	f1c3 0820 	rsb	r8, r3, #32
 800330c:	fa0a f008 	lsl.w	r0, sl, r8
 8003310:	e573      	b.n	8002dfa <_dtoa_r+0xe2>
 8003312:	900c      	str	r0, [sp, #48]	; 0x30
 8003314:	e5b8      	b.n	8002e88 <_dtoa_r+0x170>
 8003316:	bf00      	nop
 8003318:	40240000 	.word	0x40240000
 800331c:	2300      	movs	r3, #0
 800331e:	9309      	str	r3, [sp, #36]	; 0x24
 8003320:	9b04      	ldr	r3, [sp, #16]
 8003322:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003324:	4413      	add	r3, r2
 8003326:	930d      	str	r3, [sp, #52]	; 0x34
 8003328:	3301      	adds	r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	9306      	str	r3, [sp, #24]
 800332e:	f340 8283 	ble.w	8003838 <_dtoa_r+0xb20>
 8003332:	9c06      	ldr	r4, [sp, #24]
 8003334:	4626      	mov	r6, r4
 8003336:	2100      	movs	r1, #0
 8003338:	2e17      	cmp	r6, #23
 800333a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800333e:	d90b      	bls.n	8003358 <_dtoa_r+0x640>
 8003340:	2201      	movs	r2, #1
 8003342:	2304      	movs	r3, #4
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	f103 0014 	add.w	r0, r3, #20
 800334a:	42b0      	cmp	r0, r6
 800334c:	4611      	mov	r1, r2
 800334e:	f102 0201 	add.w	r2, r2, #1
 8003352:	d9f7      	bls.n	8003344 <_dtoa_r+0x62c>
 8003354:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003358:	4648      	mov	r0, r9
 800335a:	f001 fa33 	bl	80047c4 <_Balloc>
 800335e:	2c0e      	cmp	r4, #14
 8003360:	9007      	str	r0, [sp, #28]
 8003362:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003366:	f63f ade0 	bhi.w	8002f2a <_dtoa_r+0x212>
 800336a:	2d00      	cmp	r5, #0
 800336c:	f43f addd 	beq.w	8002f2a <_dtoa_r+0x212>
 8003370:	9904      	ldr	r1, [sp, #16]
 8003372:	4657      	mov	r7, sl
 8003374:	46d8      	mov	r8, fp
 8003376:	2900      	cmp	r1, #0
 8003378:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
 800337c:	f340 8292 	ble.w	80038a4 <_dtoa_r+0xb8c>
 8003380:	4b91      	ldr	r3, [pc, #580]	; (80035c8 <_dtoa_r+0x8b0>)
 8003382:	f001 020f 	and.w	r2, r1, #15
 8003386:	110e      	asrs	r6, r1, #4
 8003388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800338c:	06f0      	lsls	r0, r6, #27
 800338e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003392:	f140 824c 	bpl.w	800382e <_dtoa_r+0xb16>
 8003396:	4b8d      	ldr	r3, [pc, #564]	; (80035cc <_dtoa_r+0x8b4>)
 8003398:	4650      	mov	r0, sl
 800339a:	4659      	mov	r1, fp
 800339c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033a0:	f7fd fb7e 	bl	8000aa0 <__aeabi_ddiv>
 80033a4:	f006 060f 	and.w	r6, r6, #15
 80033a8:	4682      	mov	sl, r0
 80033aa:	468b      	mov	fp, r1
 80033ac:	f04f 0803 	mov.w	r8, #3
 80033b0:	b186      	cbz	r6, 80033d4 <_dtoa_r+0x6bc>
 80033b2:	4f86      	ldr	r7, [pc, #536]	; (80035cc <_dtoa_r+0x8b4>)
 80033b4:	07f1      	lsls	r1, r6, #31
 80033b6:	d509      	bpl.n	80033cc <_dtoa_r+0x6b4>
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c0:	f7fd fa44 	bl	800084c <__aeabi_dmul>
 80033c4:	f108 0801 	add.w	r8, r8, #1
 80033c8:	4604      	mov	r4, r0
 80033ca:	460d      	mov	r5, r1
 80033cc:	1076      	asrs	r6, r6, #1
 80033ce:	f107 0708 	add.w	r7, r7, #8
 80033d2:	d1ef      	bne.n	80033b4 <_dtoa_r+0x69c>
 80033d4:	4622      	mov	r2, r4
 80033d6:	462b      	mov	r3, r5
 80033d8:	4650      	mov	r0, sl
 80033da:	4659      	mov	r1, fp
 80033dc:	f7fd fb60 	bl	8000aa0 <__aeabi_ddiv>
 80033e0:	4606      	mov	r6, r0
 80033e2:	460f      	mov	r7, r1
 80033e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033e6:	b143      	cbz	r3, 80033fa <_dtoa_r+0x6e2>
 80033e8:	2200      	movs	r2, #0
 80033ea:	4b79      	ldr	r3, [pc, #484]	; (80035d0 <_dtoa_r+0x8b8>)
 80033ec:	4630      	mov	r0, r6
 80033ee:	4639      	mov	r1, r7
 80033f0:	f7fd fc9e 	bl	8000d30 <__aeabi_dcmplt>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f040 8320 	bne.w	8003a3a <_dtoa_r+0xd22>
 80033fa:	4640      	mov	r0, r8
 80033fc:	f7fd f9c0 	bl	8000780 <__aeabi_i2d>
 8003400:	4632      	mov	r2, r6
 8003402:	463b      	mov	r3, r7
 8003404:	f7fd fa22 	bl	800084c <__aeabi_dmul>
 8003408:	4b72      	ldr	r3, [pc, #456]	; (80035d4 <_dtoa_r+0x8bc>)
 800340a:	2200      	movs	r2, #0
 800340c:	f7fd f86c 	bl	80004e8 <__adddf3>
 8003410:	9b06      	ldr	r3, [sp, #24]
 8003412:	4604      	mov	r4, r0
 8003414:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 81df 	beq.w	80037dc <_dtoa_r+0xac4>
 800341e:	9b04      	ldr	r3, [sp, #16]
 8003420:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003424:	9311      	str	r3, [sp, #68]	; 0x44
 8003426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8297 	beq.w	800395c <_dtoa_r+0xc44>
 800342e:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <_dtoa_r+0x8b0>)
 8003430:	4969      	ldr	r1, [pc, #420]	; (80035d8 <_dtoa_r+0x8c0>)
 8003432:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003436:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800343a:	2000      	movs	r0, #0
 800343c:	f7fd fb30 	bl	8000aa0 <__aeabi_ddiv>
 8003440:	4622      	mov	r2, r4
 8003442:	462b      	mov	r3, r5
 8003444:	f7fd f84e 	bl	80004e4 <__aeabi_dsub>
 8003448:	4682      	mov	sl, r0
 800344a:	468b      	mov	fp, r1
 800344c:	4630      	mov	r0, r6
 800344e:	4639      	mov	r1, r7
 8003450:	f7fd fc96 	bl	8000d80 <__aeabi_d2iz>
 8003454:	4604      	mov	r4, r0
 8003456:	f7fd f993 	bl	8000780 <__aeabi_i2d>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4630      	mov	r0, r6
 8003460:	4639      	mov	r1, r7
 8003462:	f7fd f83f 	bl	80004e4 <__aeabi_dsub>
 8003466:	3430      	adds	r4, #48	; 0x30
 8003468:	9d07      	ldr	r5, [sp, #28]
 800346a:	b2e4      	uxtb	r4, r4
 800346c:	4606      	mov	r6, r0
 800346e:	460f      	mov	r7, r1
 8003470:	702c      	strb	r4, [r5, #0]
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4650      	mov	r0, sl
 8003478:	4659      	mov	r1, fp
 800347a:	3501      	adds	r5, #1
 800347c:	f7fd fc76 	bl	8000d6c <__aeabi_dcmpgt>
 8003480:	2800      	cmp	r0, #0
 8003482:	d14c      	bne.n	800351e <_dtoa_r+0x806>
 8003484:	4632      	mov	r2, r6
 8003486:	463b      	mov	r3, r7
 8003488:	2000      	movs	r0, #0
 800348a:	4951      	ldr	r1, [pc, #324]	; (80035d0 <_dtoa_r+0x8b8>)
 800348c:	f7fd f82a 	bl	80004e4 <__aeabi_dsub>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4650      	mov	r0, sl
 8003496:	4659      	mov	r1, fp
 8003498:	f7fd fc68 	bl	8000d6c <__aeabi_dcmpgt>
 800349c:	2800      	cmp	r0, #0
 800349e:	f040 830d 	bne.w	8003abc <_dtoa_r+0xda4>
 80034a2:	f1b8 0f01 	cmp.w	r8, #1
 80034a6:	f340 81b3 	ble.w	8003810 <_dtoa_r+0xaf8>
 80034aa:	9b07      	ldr	r3, [sp, #28]
 80034ac:	4498      	add	r8, r3
 80034ae:	e00d      	b.n	80034cc <_dtoa_r+0x7b4>
 80034b0:	2000      	movs	r0, #0
 80034b2:	4947      	ldr	r1, [pc, #284]	; (80035d0 <_dtoa_r+0x8b8>)
 80034b4:	f7fd f816 	bl	80004e4 <__aeabi_dsub>
 80034b8:	4652      	mov	r2, sl
 80034ba:	465b      	mov	r3, fp
 80034bc:	f7fd fc38 	bl	8000d30 <__aeabi_dcmplt>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	f040 82fb 	bne.w	8003abc <_dtoa_r+0xda4>
 80034c6:	4545      	cmp	r5, r8
 80034c8:	f000 81a2 	beq.w	8003810 <_dtoa_r+0xaf8>
 80034cc:	4650      	mov	r0, sl
 80034ce:	4659      	mov	r1, fp
 80034d0:	2200      	movs	r2, #0
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <_dtoa_r+0x8c4>)
 80034d4:	f7fd f9ba 	bl	800084c <__aeabi_dmul>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b40      	ldr	r3, [pc, #256]	; (80035dc <_dtoa_r+0x8c4>)
 80034dc:	4682      	mov	sl, r0
 80034de:	468b      	mov	fp, r1
 80034e0:	4630      	mov	r0, r6
 80034e2:	4639      	mov	r1, r7
 80034e4:	f7fd f9b2 	bl	800084c <__aeabi_dmul>
 80034e8:	460f      	mov	r7, r1
 80034ea:	4606      	mov	r6, r0
 80034ec:	f7fd fc48 	bl	8000d80 <__aeabi_d2iz>
 80034f0:	4604      	mov	r4, r0
 80034f2:	f7fd f945 	bl	8000780 <__aeabi_i2d>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4630      	mov	r0, r6
 80034fc:	4639      	mov	r1, r7
 80034fe:	f7fc fff1 	bl	80004e4 <__aeabi_dsub>
 8003502:	3430      	adds	r4, #48	; 0x30
 8003504:	b2e4      	uxtb	r4, r4
 8003506:	4652      	mov	r2, sl
 8003508:	465b      	mov	r3, fp
 800350a:	f805 4b01 	strb.w	r4, [r5], #1
 800350e:	4606      	mov	r6, r0
 8003510:	460f      	mov	r7, r1
 8003512:	f7fd fc0d 	bl	8000d30 <__aeabi_dcmplt>
 8003516:	4632      	mov	r2, r6
 8003518:	463b      	mov	r3, r7
 800351a:	2800      	cmp	r0, #0
 800351c:	d0c8      	beq.n	80034b0 <_dtoa_r+0x798>
 800351e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003520:	9304      	str	r3, [sp, #16]
 8003522:	e5c4      	b.n	80030ae <_dtoa_r+0x396>
 8003524:	2300      	movs	r3, #0
 8003526:	9309      	str	r3, [sp, #36]	; 0x24
 8003528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800352a:	2b00      	cmp	r3, #0
 800352c:	f340 8189 	ble.w	8003842 <_dtoa_r+0xb2a>
 8003530:	461e      	mov	r6, r3
 8003532:	461c      	mov	r4, r3
 8003534:	930d      	str	r3, [sp, #52]	; 0x34
 8003536:	9306      	str	r3, [sp, #24]
 8003538:	e6fd      	b.n	8003336 <_dtoa_r+0x61e>
 800353a:	2301      	movs	r3, #1
 800353c:	9309      	str	r3, [sp, #36]	; 0x24
 800353e:	e7f3      	b.n	8003528 <_dtoa_r+0x810>
 8003540:	9408      	str	r4, [sp, #32]
 8003542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003544:	9908      	ldr	r1, [sp, #32]
 8003546:	4648      	mov	r0, r9
 8003548:	f001 fa9c 	bl	8004a84 <__pow5mult>
 800354c:	4604      	mov	r4, r0
 800354e:	e611      	b.n	8003174 <_dtoa_r+0x45c>
 8003550:	9b06      	ldr	r3, [sp, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f73f acfc 	bgt.w	8002f50 <_dtoa_r+0x238>
 8003558:	f040 82da 	bne.w	8003b10 <_dtoa_r+0xdf8>
 800355c:	2200      	movs	r2, #0
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <_dtoa_r+0x8c8>)
 8003560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003564:	f7fd f972 	bl	800084c <__aeabi_dmul>
 8003568:	4652      	mov	r2, sl
 800356a:	465b      	mov	r3, fp
 800356c:	f7fd fbf4 	bl	8000d58 <__aeabi_dcmpge>
 8003570:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003574:	4646      	mov	r6, r8
 8003576:	2800      	cmp	r0, #0
 8003578:	f000 80f2 	beq.w	8003760 <_dtoa_r+0xa48>
 800357c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800357e:	9d07      	ldr	r5, [sp, #28]
 8003580:	43db      	mvns	r3, r3
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	4641      	mov	r1, r8
 8003586:	4648      	mov	r0, r9
 8003588:	f001 f942 	bl	8004810 <_Bfree>
 800358c:	2e00      	cmp	r6, #0
 800358e:	f43f ad8e 	beq.w	80030ae <_dtoa_r+0x396>
 8003592:	e68d      	b.n	80032b0 <_dtoa_r+0x598>
 8003594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003596:	2a00      	cmp	r2, #0
 8003598:	f000 8241 	beq.w	8003a1e <_dtoa_r+0xd06>
 800359c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80035a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80035a2:	9d05      	ldr	r5, [sp, #20]
 80035a4:	e5ab      	b.n	80030fe <_dtoa_r+0x3e6>
 80035a6:	201c      	movs	r0, #28
 80035a8:	9b05      	ldr	r3, [sp, #20]
 80035aa:	4403      	add	r3, r0
 80035ac:	9305      	str	r3, [sp, #20]
 80035ae:	9b02      	ldr	r3, [sp, #8]
 80035b0:	4403      	add	r3, r0
 80035b2:	4405      	add	r5, r0
 80035b4:	9302      	str	r3, [sp, #8]
 80035b6:	e60e      	b.n	80031d6 <_dtoa_r+0x4be>
 80035b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	f340 8282 	ble.w	8003ac4 <_dtoa_r+0xdac>
 80035c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80035c2:	2001      	movs	r0, #1
 80035c4:	e5f3      	b.n	80031ae <_dtoa_r+0x496>
 80035c6:	bf00      	nop
 80035c8:	080083c0 	.word	0x080083c0
 80035cc:	08008488 	.word	0x08008488
 80035d0:	3ff00000 	.word	0x3ff00000
 80035d4:	401c0000 	.word	0x401c0000
 80035d8:	3fe00000 	.word	0x3fe00000
 80035dc:	40240000 	.word	0x40240000
 80035e0:	40140000 	.word	0x40140000
 80035e4:	4631      	mov	r1, r6
 80035e6:	2300      	movs	r3, #0
 80035e8:	220a      	movs	r2, #10
 80035ea:	4648      	mov	r0, r9
 80035ec:	f001 f91a 	bl	8004824 <__multadd>
 80035f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	4606      	mov	r6, r0
 80035f6:	f340 8297 	ble.w	8003b28 <_dtoa_r+0xe10>
 80035fa:	9306      	str	r3, [sp, #24]
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	dd05      	ble.n	800360c <_dtoa_r+0x8f4>
 8003600:	4631      	mov	r1, r6
 8003602:	462a      	mov	r2, r5
 8003604:	4648      	mov	r0, r9
 8003606:	f001 fa8d 	bl	8004b24 <__lshift>
 800360a:	4606      	mov	r6, r0
 800360c:	2f00      	cmp	r7, #0
 800360e:	f040 817c 	bne.w	800390a <_dtoa_r+0xbf2>
 8003612:	9605      	str	r6, [sp, #20]
 8003614:	9b06      	ldr	r3, [sp, #24]
 8003616:	9a07      	ldr	r2, [sp, #28]
 8003618:	f8dd b014 	ldr.w	fp, [sp, #20]
 800361c:	3b01      	subs	r3, #1
 800361e:	18d3      	adds	r3, r2, r3
 8003620:	9308      	str	r3, [sp, #32]
 8003622:	f00a 0301 	and.w	r3, sl, #1
 8003626:	9309      	str	r3, [sp, #36]	; 0x24
 8003628:	4617      	mov	r7, r2
 800362a:	46c2      	mov	sl, r8
 800362c:	4651      	mov	r1, sl
 800362e:	4620      	mov	r0, r4
 8003630:	f7ff fade 	bl	8002bf0 <quorem>
 8003634:	4631      	mov	r1, r6
 8003636:	4605      	mov	r5, r0
 8003638:	4620      	mov	r0, r4
 800363a:	f001 facb 	bl	8004bd4 <__mcmp>
 800363e:	465a      	mov	r2, fp
 8003640:	9002      	str	r0, [sp, #8]
 8003642:	4651      	mov	r1, sl
 8003644:	4648      	mov	r0, r9
 8003646:	f001 fae5 	bl	8004c14 <__mdiff>
 800364a:	68c2      	ldr	r2, [r0, #12]
 800364c:	4680      	mov	r8, r0
 800364e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003652:	2a00      	cmp	r2, #0
 8003654:	d149      	bne.n	80036ea <_dtoa_r+0x9d2>
 8003656:	4601      	mov	r1, r0
 8003658:	4620      	mov	r0, r4
 800365a:	9306      	str	r3, [sp, #24]
 800365c:	f001 faba 	bl	8004bd4 <__mcmp>
 8003660:	4641      	mov	r1, r8
 8003662:	9005      	str	r0, [sp, #20]
 8003664:	4648      	mov	r0, r9
 8003666:	f001 f8d3 	bl	8004810 <_Bfree>
 800366a:	9a05      	ldr	r2, [sp, #20]
 800366c:	9b06      	ldr	r3, [sp, #24]
 800366e:	b92a      	cbnz	r2, 800367c <_dtoa_r+0x964>
 8003670:	9920      	ldr	r1, [sp, #128]	; 0x80
 8003672:	b919      	cbnz	r1, 800367c <_dtoa_r+0x964>
 8003674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003676:	2900      	cmp	r1, #0
 8003678:	f000 8236 	beq.w	8003ae8 <_dtoa_r+0xdd0>
 800367c:	9902      	ldr	r1, [sp, #8]
 800367e:	2900      	cmp	r1, #0
 8003680:	f2c0 80e4 	blt.w	800384c <_dtoa_r+0xb34>
 8003684:	d105      	bne.n	8003692 <_dtoa_r+0x97a>
 8003686:	9920      	ldr	r1, [sp, #128]	; 0x80
 8003688:	b919      	cbnz	r1, 8003692 <_dtoa_r+0x97a>
 800368a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800368c:	2900      	cmp	r1, #0
 800368e:	f000 80dd 	beq.w	800384c <_dtoa_r+0xb34>
 8003692:	2a00      	cmp	r2, #0
 8003694:	f300 814d 	bgt.w	8003932 <_dtoa_r+0xc1a>
 8003698:	9a08      	ldr	r2, [sp, #32]
 800369a:	703b      	strb	r3, [r7, #0]
 800369c:	f107 0801 	add.w	r8, r7, #1
 80036a0:	4297      	cmp	r7, r2
 80036a2:	4645      	mov	r5, r8
 80036a4:	f000 8154 	beq.w	8003950 <_dtoa_r+0xc38>
 80036a8:	4621      	mov	r1, r4
 80036aa:	2300      	movs	r3, #0
 80036ac:	220a      	movs	r2, #10
 80036ae:	4648      	mov	r0, r9
 80036b0:	f001 f8b8 	bl	8004824 <__multadd>
 80036b4:	455e      	cmp	r6, fp
 80036b6:	4604      	mov	r4, r0
 80036b8:	4631      	mov	r1, r6
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	f04f 020a 	mov.w	r2, #10
 80036c2:	4648      	mov	r0, r9
 80036c4:	d00b      	beq.n	80036de <_dtoa_r+0x9c6>
 80036c6:	f001 f8ad 	bl	8004824 <__multadd>
 80036ca:	4659      	mov	r1, fp
 80036cc:	4606      	mov	r6, r0
 80036ce:	2300      	movs	r3, #0
 80036d0:	220a      	movs	r2, #10
 80036d2:	4648      	mov	r0, r9
 80036d4:	f001 f8a6 	bl	8004824 <__multadd>
 80036d8:	4647      	mov	r7, r8
 80036da:	4683      	mov	fp, r0
 80036dc:	e7a6      	b.n	800362c <_dtoa_r+0x914>
 80036de:	f001 f8a1 	bl	8004824 <__multadd>
 80036e2:	4647      	mov	r7, r8
 80036e4:	4606      	mov	r6, r0
 80036e6:	4683      	mov	fp, r0
 80036e8:	e7a0      	b.n	800362c <_dtoa_r+0x914>
 80036ea:	4601      	mov	r1, r0
 80036ec:	4648      	mov	r0, r9
 80036ee:	9305      	str	r3, [sp, #20]
 80036f0:	f001 f88e 	bl	8004810 <_Bfree>
 80036f4:	2201      	movs	r2, #1
 80036f6:	9b05      	ldr	r3, [sp, #20]
 80036f8:	e7c0      	b.n	800367c <_dtoa_r+0x964>
 80036fa:	4641      	mov	r1, r8
 80036fc:	4620      	mov	r0, r4
 80036fe:	f001 fa69 	bl	8004bd4 <__mcmp>
 8003702:	2800      	cmp	r0, #0
 8003704:	f6bf ad7d 	bge.w	8003202 <_dtoa_r+0x4ea>
 8003708:	4621      	mov	r1, r4
 800370a:	9c04      	ldr	r4, [sp, #16]
 800370c:	2300      	movs	r3, #0
 800370e:	3c01      	subs	r4, #1
 8003710:	220a      	movs	r2, #10
 8003712:	4648      	mov	r0, r9
 8003714:	9404      	str	r4, [sp, #16]
 8003716:	f001 f885 	bl	8004824 <__multadd>
 800371a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800371c:	4604      	mov	r4, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	f47f af60 	bne.w	80035e4 <_dtoa_r+0x8cc>
 8003724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	f340 81f6 	ble.w	8003b18 <_dtoa_r+0xe00>
 800372c:	9306      	str	r3, [sp, #24]
 800372e:	e570      	b.n	8003212 <_dtoa_r+0x4fa>
 8003730:	9c08      	ldr	r4, [sp, #32]
 8003732:	e51f      	b.n	8003174 <_dtoa_r+0x45c>
 8003734:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003736:	2b02      	cmp	r3, #2
 8003738:	f77f ad67 	ble.w	800320a <_dtoa_r+0x4f2>
 800373c:	9b06      	ldr	r3, [sp, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 8179 	bne.w	8003a36 <_dtoa_r+0xd1e>
 8003744:	4641      	mov	r1, r8
 8003746:	2205      	movs	r2, #5
 8003748:	4648      	mov	r0, r9
 800374a:	f001 f86b 	bl	8004824 <__multadd>
 800374e:	4601      	mov	r1, r0
 8003750:	4680      	mov	r8, r0
 8003752:	4620      	mov	r0, r4
 8003754:	f001 fa3e 	bl	8004bd4 <__mcmp>
 8003758:	2800      	cmp	r0, #0
 800375a:	9408      	str	r4, [sp, #32]
 800375c:	f77f af0e 	ble.w	800357c <_dtoa_r+0x864>
 8003760:	9a04      	ldr	r2, [sp, #16]
 8003762:	9907      	ldr	r1, [sp, #28]
 8003764:	2331      	movs	r3, #49	; 0x31
 8003766:	3201      	adds	r2, #1
 8003768:	9204      	str	r2, [sp, #16]
 800376a:	700b      	strb	r3, [r1, #0]
 800376c:	1c4d      	adds	r5, r1, #1
 800376e:	e709      	b.n	8003584 <_dtoa_r+0x86c>
 8003770:	9a04      	ldr	r2, [sp, #16]
 8003772:	3201      	adds	r2, #1
 8003774:	9204      	str	r2, [sp, #16]
 8003776:	9a07      	ldr	r2, [sp, #28]
 8003778:	2331      	movs	r3, #49	; 0x31
 800377a:	7013      	strb	r3, [r2, #0]
 800377c:	e588      	b.n	8003290 <_dtoa_r+0x578>
 800377e:	2301      	movs	r3, #1
 8003780:	9309      	str	r3, [sp, #36]	; 0x24
 8003782:	e5cd      	b.n	8003320 <_dtoa_r+0x608>
 8003784:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003788:	e491      	b.n	80030ae <_dtoa_r+0x396>
 800378a:	f1ba 0f00 	cmp.w	sl, #0
 800378e:	f47f ad04 	bne.w	800319a <_dtoa_r+0x482>
 8003792:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 813f 	bne.w	8003a1a <_dtoa_r+0xd02>
 800379c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80037a0:	0d3f      	lsrs	r7, r7, #20
 80037a2:	053f      	lsls	r7, r7, #20
 80037a4:	b137      	cbz	r7, 80037b4 <_dtoa_r+0xa9c>
 80037a6:	9b05      	ldr	r3, [sp, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	9305      	str	r3, [sp, #20]
 80037ac:	9b02      	ldr	r3, [sp, #8]
 80037ae:	3301      	adds	r3, #1
 80037b0:	9302      	str	r3, [sp, #8]
 80037b2:	2701      	movs	r7, #1
 80037b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037b6:	2001      	movs	r0, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f43f acf8 	beq.w	80031ae <_dtoa_r+0x496>
 80037be:	e4ed      	b.n	800319c <_dtoa_r+0x484>
 80037c0:	4640      	mov	r0, r8
 80037c2:	f7fc ffdd 	bl	8000780 <__aeabi_i2d>
 80037c6:	4632      	mov	r2, r6
 80037c8:	463b      	mov	r3, r7
 80037ca:	f7fd f83f 	bl	800084c <__aeabi_dmul>
 80037ce:	2200      	movs	r2, #0
 80037d0:	4bbf      	ldr	r3, [pc, #764]	; (8003ad0 <_dtoa_r+0xdb8>)
 80037d2:	f7fc fe89 	bl	80004e8 <__adddf3>
 80037d6:	4604      	mov	r4, r0
 80037d8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80037dc:	4630      	mov	r0, r6
 80037de:	4639      	mov	r1, r7
 80037e0:	2200      	movs	r2, #0
 80037e2:	4bbc      	ldr	r3, [pc, #752]	; (8003ad4 <_dtoa_r+0xdbc>)
 80037e4:	f7fc fe7e 	bl	80004e4 <__aeabi_dsub>
 80037e8:	4622      	mov	r2, r4
 80037ea:	462b      	mov	r3, r5
 80037ec:	4606      	mov	r6, r0
 80037ee:	460f      	mov	r7, r1
 80037f0:	f7fd fabc 	bl	8000d6c <__aeabi_dcmpgt>
 80037f4:	4680      	mov	r8, r0
 80037f6:	2800      	cmp	r0, #0
 80037f8:	f040 8105 	bne.w	8003a06 <_dtoa_r+0xcee>
 80037fc:	4622      	mov	r2, r4
 80037fe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003802:	4630      	mov	r0, r6
 8003804:	4639      	mov	r1, r7
 8003806:	f7fd fa93 	bl	8000d30 <__aeabi_dcmplt>
 800380a:	b108      	cbz	r0, 8003810 <_dtoa_r+0xaf8>
 800380c:	4646      	mov	r6, r8
 800380e:	e6b5      	b.n	800357c <_dtoa_r+0x864>
 8003810:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8003814:	f7ff bb89 	b.w	8002f2a <_dtoa_r+0x212>
 8003818:	9807      	ldr	r0, [sp, #28]
 800381a:	f7ff baae 	b.w	8002d7a <_dtoa_r+0x62>
 800381e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003822:	970a      	str	r7, [sp, #40]	; 0x28
 8003824:	1afb      	subs	r3, r7, r3
 8003826:	441a      	add	r2, r3
 8003828:	920b      	str	r2, [sp, #44]	; 0x2c
 800382a:	2700      	movs	r7, #0
 800382c:	e461      	b.n	80030f2 <_dtoa_r+0x3da>
 800382e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8003832:	f04f 0802 	mov.w	r8, #2
 8003836:	e5bb      	b.n	80033b0 <_dtoa_r+0x698>
 8003838:	461c      	mov	r4, r3
 800383a:	2100      	movs	r1, #0
 800383c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003840:	e58a      	b.n	8003358 <_dtoa_r+0x640>
 8003842:	2401      	movs	r4, #1
 8003844:	9421      	str	r4, [sp, #132]	; 0x84
 8003846:	940d      	str	r4, [sp, #52]	; 0x34
 8003848:	9406      	str	r4, [sp, #24]
 800384a:	e7f6      	b.n	800383a <_dtoa_r+0xb22>
 800384c:	2a00      	cmp	r2, #0
 800384e:	46d0      	mov	r8, sl
 8003850:	f8cd b014 	str.w	fp, [sp, #20]
 8003854:	469a      	mov	sl, r3
 8003856:	dd11      	ble.n	800387c <_dtoa_r+0xb64>
 8003858:	4621      	mov	r1, r4
 800385a:	2201      	movs	r2, #1
 800385c:	4648      	mov	r0, r9
 800385e:	f001 f961 	bl	8004b24 <__lshift>
 8003862:	4641      	mov	r1, r8
 8003864:	4604      	mov	r4, r0
 8003866:	f001 f9b5 	bl	8004bd4 <__mcmp>
 800386a:	2800      	cmp	r0, #0
 800386c:	f340 8149 	ble.w	8003b02 <_dtoa_r+0xdea>
 8003870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003874:	f000 8106 	beq.w	8003a84 <_dtoa_r+0xd6c>
 8003878:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800387c:	46b3      	mov	fp, r6
 800387e:	f887 a000 	strb.w	sl, [r7]
 8003882:	1c7d      	adds	r5, r7, #1
 8003884:	9e05      	ldr	r6, [sp, #20]
 8003886:	9408      	str	r4, [sp, #32]
 8003888:	e502      	b.n	8003290 <_dtoa_r+0x578>
 800388a:	d104      	bne.n	8003896 <_dtoa_r+0xb7e>
 800388c:	f01a 0f01 	tst.w	sl, #1
 8003890:	d001      	beq.n	8003896 <_dtoa_r+0xb7e>
 8003892:	e4ed      	b.n	8003270 <_dtoa_r+0x558>
 8003894:	4615      	mov	r5, r2
 8003896:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800389a:	2b30      	cmp	r3, #48	; 0x30
 800389c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80038a0:	d0f8      	beq.n	8003894 <_dtoa_r+0xb7c>
 80038a2:	e4f5      	b.n	8003290 <_dtoa_r+0x578>
 80038a4:	9b04      	ldr	r3, [sp, #16]
 80038a6:	425c      	negs	r4, r3
 80038a8:	2c00      	cmp	r4, #0
 80038aa:	f000 80bf 	beq.w	8003a2c <_dtoa_r+0xd14>
 80038ae:	4b8a      	ldr	r3, [pc, #552]	; (8003ad8 <_dtoa_r+0xdc0>)
 80038b0:	f004 020f 	and.w	r2, r4, #15
 80038b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80038c0:	f7fc ffc4 	bl	800084c <__aeabi_dmul>
 80038c4:	1124      	asrs	r4, r4, #4
 80038c6:	4606      	mov	r6, r0
 80038c8:	460f      	mov	r7, r1
 80038ca:	f000 812a 	beq.w	8003b22 <_dtoa_r+0xe0a>
 80038ce:	4d83      	ldr	r5, [pc, #524]	; (8003adc <_dtoa_r+0xdc4>)
 80038d0:	f04f 0802 	mov.w	r8, #2
 80038d4:	07e2      	lsls	r2, r4, #31
 80038d6:	d509      	bpl.n	80038ec <_dtoa_r+0xbd4>
 80038d8:	4630      	mov	r0, r6
 80038da:	4639      	mov	r1, r7
 80038dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80038e0:	f7fc ffb4 	bl	800084c <__aeabi_dmul>
 80038e4:	f108 0801 	add.w	r8, r8, #1
 80038e8:	4606      	mov	r6, r0
 80038ea:	460f      	mov	r7, r1
 80038ec:	1064      	asrs	r4, r4, #1
 80038ee:	f105 0508 	add.w	r5, r5, #8
 80038f2:	d1ef      	bne.n	80038d4 <_dtoa_r+0xbbc>
 80038f4:	e576      	b.n	80033e4 <_dtoa_r+0x6cc>
 80038f6:	9907      	ldr	r1, [sp, #28]
 80038f8:	2230      	movs	r2, #48	; 0x30
 80038fa:	700a      	strb	r2, [r1, #0]
 80038fc:	9a04      	ldr	r2, [sp, #16]
 80038fe:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003902:	3201      	adds	r2, #1
 8003904:	9204      	str	r2, [sp, #16]
 8003906:	f7ff bbd0 	b.w	80030aa <_dtoa_r+0x392>
 800390a:	6871      	ldr	r1, [r6, #4]
 800390c:	4648      	mov	r0, r9
 800390e:	f000 ff59 	bl	80047c4 <_Balloc>
 8003912:	6933      	ldr	r3, [r6, #16]
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	4605      	mov	r5, r0
 8003918:	0092      	lsls	r2, r2, #2
 800391a:	f106 010c 	add.w	r1, r6, #12
 800391e:	300c      	adds	r0, #12
 8003920:	f7fc fcbe 	bl	80002a0 <memcpy>
 8003924:	4629      	mov	r1, r5
 8003926:	2201      	movs	r2, #1
 8003928:	4648      	mov	r0, r9
 800392a:	f001 f8fb 	bl	8004b24 <__lshift>
 800392e:	9005      	str	r0, [sp, #20]
 8003930:	e670      	b.n	8003614 <_dtoa_r+0x8fc>
 8003932:	2b39      	cmp	r3, #57	; 0x39
 8003934:	f8cd b014 	str.w	fp, [sp, #20]
 8003938:	46d0      	mov	r8, sl
 800393a:	f000 80a3 	beq.w	8003a84 <_dtoa_r+0xd6c>
 800393e:	f103 0a01 	add.w	sl, r3, #1
 8003942:	46b3      	mov	fp, r6
 8003944:	f887 a000 	strb.w	sl, [r7]
 8003948:	1c7d      	adds	r5, r7, #1
 800394a:	9e05      	ldr	r6, [sp, #20]
 800394c:	9408      	str	r4, [sp, #32]
 800394e:	e49f      	b.n	8003290 <_dtoa_r+0x578>
 8003950:	465a      	mov	r2, fp
 8003952:	46d0      	mov	r8, sl
 8003954:	46b3      	mov	fp, r6
 8003956:	469a      	mov	sl, r3
 8003958:	4616      	mov	r6, r2
 800395a:	e47d      	b.n	8003258 <_dtoa_r+0x540>
 800395c:	495e      	ldr	r1, [pc, #376]	; (8003ad8 <_dtoa_r+0xdc0>)
 800395e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8003962:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003966:	4622      	mov	r2, r4
 8003968:	462b      	mov	r3, r5
 800396a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800396e:	f7fc ff6d 	bl	800084c <__aeabi_dmul>
 8003972:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8003976:	4639      	mov	r1, r7
 8003978:	4630      	mov	r0, r6
 800397a:	f7fd fa01 	bl	8000d80 <__aeabi_d2iz>
 800397e:	4604      	mov	r4, r0
 8003980:	f7fc fefe 	bl	8000780 <__aeabi_i2d>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4630      	mov	r0, r6
 800398a:	4639      	mov	r1, r7
 800398c:	f7fc fdaa 	bl	80004e4 <__aeabi_dsub>
 8003990:	9a07      	ldr	r2, [sp, #28]
 8003992:	3430      	adds	r4, #48	; 0x30
 8003994:	f1b8 0f01 	cmp.w	r8, #1
 8003998:	4606      	mov	r6, r0
 800399a:	460f      	mov	r7, r1
 800399c:	7014      	strb	r4, [r2, #0]
 800399e:	f102 0501 	add.w	r5, r2, #1
 80039a2:	d01e      	beq.n	80039e2 <_dtoa_r+0xcca>
 80039a4:	9b07      	ldr	r3, [sp, #28]
 80039a6:	eb03 0b08 	add.w	fp, r3, r8
 80039aa:	46a8      	mov	r8, r5
 80039ac:	2200      	movs	r2, #0
 80039ae:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <_dtoa_r+0xdc8>)
 80039b0:	4630      	mov	r0, r6
 80039b2:	4639      	mov	r1, r7
 80039b4:	f7fc ff4a 	bl	800084c <__aeabi_dmul>
 80039b8:	460f      	mov	r7, r1
 80039ba:	4606      	mov	r6, r0
 80039bc:	f7fd f9e0 	bl	8000d80 <__aeabi_d2iz>
 80039c0:	4604      	mov	r4, r0
 80039c2:	f7fc fedd 	bl	8000780 <__aeabi_i2d>
 80039c6:	3430      	adds	r4, #48	; 0x30
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4630      	mov	r0, r6
 80039ce:	4639      	mov	r1, r7
 80039d0:	f7fc fd88 	bl	80004e4 <__aeabi_dsub>
 80039d4:	f808 4b01 	strb.w	r4, [r8], #1
 80039d8:	45c3      	cmp	fp, r8
 80039da:	4606      	mov	r6, r0
 80039dc:	460f      	mov	r7, r1
 80039de:	d1e5      	bne.n	80039ac <_dtoa_r+0xc94>
 80039e0:	4455      	add	r5, sl
 80039e2:	2200      	movs	r2, #0
 80039e4:	4b3f      	ldr	r3, [pc, #252]	; (8003ae4 <_dtoa_r+0xdcc>)
 80039e6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80039ea:	f7fc fd7d 	bl	80004e8 <__adddf3>
 80039ee:	4632      	mov	r2, r6
 80039f0:	463b      	mov	r3, r7
 80039f2:	f7fd f99d 	bl	8000d30 <__aeabi_dcmplt>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d04c      	beq.n	8003a94 <_dtoa_r+0xd7c>
 80039fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003a02:	f7ff bb46 	b.w	8003092 <_dtoa_r+0x37a>
 8003a06:	f04f 0800 	mov.w	r8, #0
 8003a0a:	4646      	mov	r6, r8
 8003a0c:	e6a8      	b.n	8003760 <_dtoa_r+0xa48>
 8003a0e:	9b05      	ldr	r3, [sp, #20]
 8003a10:	9a06      	ldr	r2, [sp, #24]
 8003a12:	1a9d      	subs	r5, r3, r2
 8003a14:	2300      	movs	r3, #0
 8003a16:	f7ff bb72 	b.w	80030fe <_dtoa_r+0x3e6>
 8003a1a:	2700      	movs	r7, #0
 8003a1c:	e6ca      	b.n	80037b4 <_dtoa_r+0xa9c>
 8003a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003a22:	9d05      	ldr	r5, [sp, #20]
 8003a24:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003a28:	f7ff bb69 	b.w	80030fe <_dtoa_r+0x3e6>
 8003a2c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8003a30:	f04f 0802 	mov.w	r8, #2
 8003a34:	e4d6      	b.n	80033e4 <_dtoa_r+0x6cc>
 8003a36:	9408      	str	r4, [sp, #32]
 8003a38:	e5a0      	b.n	800357c <_dtoa_r+0x864>
 8003a3a:	9b06      	ldr	r3, [sp, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f43f aebf 	beq.w	80037c0 <_dtoa_r+0xaa8>
 8003a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f77f aee3 	ble.w	8003810 <_dtoa_r+0xaf8>
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <_dtoa_r+0xdc8>)
 8003a4e:	4630      	mov	r0, r6
 8003a50:	4639      	mov	r1, r7
 8003a52:	f7fc fefb 	bl	800084c <__aeabi_dmul>
 8003a56:	4606      	mov	r6, r0
 8003a58:	460f      	mov	r7, r1
 8003a5a:	f108 0001 	add.w	r0, r8, #1
 8003a5e:	f7fc fe8f 	bl	8000780 <__aeabi_i2d>
 8003a62:	4632      	mov	r2, r6
 8003a64:	463b      	mov	r3, r7
 8003a66:	f7fc fef1 	bl	800084c <__aeabi_dmul>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <_dtoa_r+0xdb8>)
 8003a6e:	f7fc fd3b 	bl	80004e8 <__adddf3>
 8003a72:	9a04      	ldr	r2, [sp, #16]
 8003a74:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003a80:	9211      	str	r2, [sp, #68]	; 0x44
 8003a82:	e4d0      	b.n	8003426 <_dtoa_r+0x70e>
 8003a84:	2239      	movs	r2, #57	; 0x39
 8003a86:	46b3      	mov	fp, r6
 8003a88:	9408      	str	r4, [sp, #32]
 8003a8a:	9e05      	ldr	r6, [sp, #20]
 8003a8c:	703a      	strb	r2, [r7, #0]
 8003a8e:	1c7d      	adds	r5, r7, #1
 8003a90:	f7ff bbf0 	b.w	8003274 <_dtoa_r+0x55c>
 8003a94:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003a98:	2000      	movs	r0, #0
 8003a9a:	4912      	ldr	r1, [pc, #72]	; (8003ae4 <_dtoa_r+0xdcc>)
 8003a9c:	f7fc fd22 	bl	80004e4 <__aeabi_dsub>
 8003aa0:	4632      	mov	r2, r6
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	f7fd f962 	bl	8000d6c <__aeabi_dcmpgt>
 8003aa8:	b908      	cbnz	r0, 8003aae <_dtoa_r+0xd96>
 8003aaa:	e6b1      	b.n	8003810 <_dtoa_r+0xaf8>
 8003aac:	4615      	mov	r5, r2
 8003aae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ab2:	2b30      	cmp	r3, #48	; 0x30
 8003ab4:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003ab8:	d0f8      	beq.n	8003aac <_dtoa_r+0xd94>
 8003aba:	e530      	b.n	800351e <_dtoa_r+0x806>
 8003abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	f7ff bae7 	b.w	8003092 <_dtoa_r+0x37a>
 8003ac4:	f1ba 0f00 	cmp.w	sl, #0
 8003ac8:	f47f ad7a 	bne.w	80035c0 <_dtoa_r+0x8a8>
 8003acc:	e661      	b.n	8003792 <_dtoa_r+0xa7a>
 8003ace:	bf00      	nop
 8003ad0:	401c0000 	.word	0x401c0000
 8003ad4:	40140000 	.word	0x40140000
 8003ad8:	080083c0 	.word	0x080083c0
 8003adc:	08008488 	.word	0x08008488
 8003ae0:	40240000 	.word	0x40240000
 8003ae4:	3fe00000 	.word	0x3fe00000
 8003ae8:	2b39      	cmp	r3, #57	; 0x39
 8003aea:	f8cd b014 	str.w	fp, [sp, #20]
 8003aee:	46d0      	mov	r8, sl
 8003af0:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003af4:	469a      	mov	sl, r3
 8003af6:	d0c5      	beq.n	8003a84 <_dtoa_r+0xd6c>
 8003af8:	f1bb 0f00 	cmp.w	fp, #0
 8003afc:	f73f aebc 	bgt.w	8003878 <_dtoa_r+0xb60>
 8003b00:	e6bc      	b.n	800387c <_dtoa_r+0xb64>
 8003b02:	f47f aebb 	bne.w	800387c <_dtoa_r+0xb64>
 8003b06:	f01a 0f01 	tst.w	sl, #1
 8003b0a:	f43f aeb7 	beq.w	800387c <_dtoa_r+0xb64>
 8003b0e:	e6af      	b.n	8003870 <_dtoa_r+0xb58>
 8003b10:	f04f 0800 	mov.w	r8, #0
 8003b14:	4646      	mov	r6, r8
 8003b16:	e531      	b.n	800357c <_dtoa_r+0x864>
 8003b18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	dc21      	bgt.n	8003b62 <_dtoa_r+0xe4a>
 8003b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b20:	e604      	b.n	800372c <_dtoa_r+0xa14>
 8003b22:	f04f 0802 	mov.w	r8, #2
 8003b26:	e45d      	b.n	80033e4 <_dtoa_r+0x6cc>
 8003b28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	dc19      	bgt.n	8003b62 <_dtoa_r+0xe4a>
 8003b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b30:	e563      	b.n	80035fa <_dtoa_r+0x8e2>
 8003b32:	2400      	movs	r4, #0
 8003b34:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4648      	mov	r0, r9
 8003b3c:	f000 fe42 	bl	80047c4 <_Balloc>
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b44:	9306      	str	r3, [sp, #24]
 8003b46:	930d      	str	r3, [sp, #52]	; 0x34
 8003b48:	2301      	movs	r3, #1
 8003b4a:	9007      	str	r0, [sp, #28]
 8003b4c:	9421      	str	r4, [sp, #132]	; 0x84
 8003b4e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003b52:	9309      	str	r3, [sp, #36]	; 0x24
 8003b54:	f7ff b9e9 	b.w	8002f2a <_dtoa_r+0x212>
 8003b58:	f43f ab3d 	beq.w	80031d6 <_dtoa_r+0x4be>
 8003b5c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8003b60:	e522      	b.n	80035a8 <_dtoa_r+0x890>
 8003b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b64:	9306      	str	r3, [sp, #24]
 8003b66:	e5e9      	b.n	800373c <_dtoa_r+0xa24>
 8003b68:	2501      	movs	r5, #1
 8003b6a:	f7ff b9a8 	b.w	8002ebe <_dtoa_r+0x1a6>
 8003b6e:	bf00      	nop

08003b70 <__sflush_r>:
 8003b70:	898b      	ldrh	r3, [r1, #12]
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b78:	460d      	mov	r5, r1
 8003b7a:	0711      	lsls	r1, r2, #28
 8003b7c:	4680      	mov	r8, r0
 8003b7e:	d43c      	bmi.n	8003bfa <__sflush_r+0x8a>
 8003b80:	686a      	ldr	r2, [r5, #4]
 8003b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	81ab      	strh	r3, [r5, #12]
 8003b8a:	dd73      	ble.n	8003c74 <__sflush_r+0x104>
 8003b8c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003b8e:	2e00      	cmp	r6, #0
 8003b90:	d04b      	beq.n	8003c2a <__sflush_r+0xba>
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b98:	2100      	movs	r1, #0
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8003ba0:	f8c8 1000 	str.w	r1, [r8]
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	d069      	beq.n	8003c7c <__sflush_r+0x10c>
 8003ba8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003baa:	075f      	lsls	r7, r3, #29
 8003bac:	d505      	bpl.n	8003bba <__sflush_r+0x4a>
 8003bae:	6869      	ldr	r1, [r5, #4]
 8003bb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003bb2:	1a52      	subs	r2, r2, r1
 8003bb4:	b10b      	cbz	r3, 8003bba <__sflush_r+0x4a>
 8003bb6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69e9      	ldr	r1, [r5, #28]
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	47b0      	blx	r6
 8003bc2:	1c46      	adds	r6, r0, #1
 8003bc4:	d03c      	beq.n	8003c40 <__sflush_r+0xd0>
 8003bc6:	89ab      	ldrh	r3, [r5, #12]
 8003bc8:	692a      	ldr	r2, [r5, #16]
 8003bca:	602a      	str	r2, [r5, #0]
 8003bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	81ab      	strh	r3, [r5, #12]
 8003bd6:	04db      	lsls	r3, r3, #19
 8003bd8:	606a      	str	r2, [r5, #4]
 8003bda:	d449      	bmi.n	8003c70 <__sflush_r+0x100>
 8003bdc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003bde:	f8c8 4000 	str.w	r4, [r8]
 8003be2:	b311      	cbz	r1, 8003c2a <__sflush_r+0xba>
 8003be4:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8003be8:	4299      	cmp	r1, r3
 8003bea:	d002      	beq.n	8003bf2 <__sflush_r+0x82>
 8003bec:	4640      	mov	r0, r8
 8003bee:	f000 f94f 	bl	8003e90 <_free_r>
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	6328      	str	r0, [r5, #48]	; 0x30
 8003bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bfa:	692e      	ldr	r6, [r5, #16]
 8003bfc:	b1ae      	cbz	r6, 8003c2a <__sflush_r+0xba>
 8003bfe:	682c      	ldr	r4, [r5, #0]
 8003c00:	602e      	str	r6, [r5, #0]
 8003c02:	0790      	lsls	r0, r2, #30
 8003c04:	bf0c      	ite	eq
 8003c06:	696b      	ldreq	r3, [r5, #20]
 8003c08:	2300      	movne	r3, #0
 8003c0a:	1ba4      	subs	r4, r4, r6
 8003c0c:	60ab      	str	r3, [r5, #8]
 8003c0e:	e00a      	b.n	8003c26 <__sflush_r+0xb6>
 8003c10:	4623      	mov	r3, r4
 8003c12:	4632      	mov	r2, r6
 8003c14:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8003c16:	69e9      	ldr	r1, [r5, #28]
 8003c18:	4640      	mov	r0, r8
 8003c1a:	47b8      	blx	r7
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	eba4 0400 	sub.w	r4, r4, r0
 8003c22:	4406      	add	r6, r0
 8003c24:	dd04      	ble.n	8003c30 <__sflush_r+0xc0>
 8003c26:	2c00      	cmp	r4, #0
 8003c28:	dcf2      	bgt.n	8003c10 <__sflush_r+0xa0>
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c30:	89ab      	ldrh	r3, [r5, #12]
 8003c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c36:	81ab      	strh	r3, [r5, #12]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	f8d8 2000 	ldr.w	r2, [r8]
 8003c44:	2a1d      	cmp	r2, #29
 8003c46:	d8f3      	bhi.n	8003c30 <__sflush_r+0xc0>
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <__sflush_r+0x144>)
 8003c4a:	40d3      	lsrs	r3, r2
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	f083 0101 	eor.w	r1, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0eb      	beq.n	8003c30 <__sflush_r+0xc0>
 8003c58:	89ab      	ldrh	r3, [r5, #12]
 8003c5a:	6069      	str	r1, [r5, #4]
 8003c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	6929      	ldr	r1, [r5, #16]
 8003c64:	6029      	str	r1, [r5, #0]
 8003c66:	04d9      	lsls	r1, r3, #19
 8003c68:	81ab      	strh	r3, [r5, #12]
 8003c6a:	d5b7      	bpl.n	8003bdc <__sflush_r+0x6c>
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	d1b5      	bne.n	8003bdc <__sflush_r+0x6c>
 8003c70:	6528      	str	r0, [r5, #80]	; 0x50
 8003c72:	e7b3      	b.n	8003bdc <__sflush_r+0x6c>
 8003c74:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	dc88      	bgt.n	8003b8c <__sflush_r+0x1c>
 8003c7a:	e7d6      	b.n	8003c2a <__sflush_r+0xba>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	69e9      	ldr	r1, [r5, #28]
 8003c80:	4640      	mov	r0, r8
 8003c82:	47b0      	blx	r6
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	4602      	mov	r2, r0
 8003c88:	d002      	beq.n	8003c90 <__sflush_r+0x120>
 8003c8a:	89ab      	ldrh	r3, [r5, #12]
 8003c8c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003c8e:	e78c      	b.n	8003baa <__sflush_r+0x3a>
 8003c90:	f8d8 3000 	ldr.w	r3, [r8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f8      	beq.n	8003c8a <__sflush_r+0x11a>
 8003c98:	2b1d      	cmp	r3, #29
 8003c9a:	d001      	beq.n	8003ca0 <__sflush_r+0x130>
 8003c9c:	2b16      	cmp	r3, #22
 8003c9e:	d102      	bne.n	8003ca6 <__sflush_r+0x136>
 8003ca0:	f8c8 4000 	str.w	r4, [r8]
 8003ca4:	e7c1      	b.n	8003c2a <__sflush_r+0xba>
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cac:	81ab      	strh	r3, [r5, #12]
 8003cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20400001 	.word	0x20400001

08003cb8 <_fflush_r>:
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	4604      	mov	r4, r0
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	b108      	cbz	r0, 8003cc4 <_fflush_r+0xc>
 8003cc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003cc2:	b153      	cbz	r3, 8003cda <_fflush_r+0x22>
 8003cc4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8003cc8:	b908      	cbnz	r0, 8003cce <_fflush_r+0x16>
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	4620      	mov	r0, r4
 8003cd0:	b002      	add	sp, #8
 8003cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd6:	f7ff bf4b 	b.w	8003b70 <__sflush_r>
 8003cda:	9101      	str	r1, [sp, #4]
 8003cdc:	f000 f880 	bl	8003de0 <__sinit>
 8003ce0:	9901      	ldr	r1, [sp, #4]
 8003ce2:	e7ef      	b.n	8003cc4 <_fflush_r+0xc>

08003ce4 <_cleanup_r>:
 8003ce4:	4901      	ldr	r1, [pc, #4]	; (8003cec <_cleanup_r+0x8>)
 8003ce6:	f000 b9bb 	b.w	8004060 <_fwalk_reent>
 8003cea:	bf00      	nop
 8003cec:	08005019 	.word	0x08005019

08003cf0 <__sinit.part.1>:
 8003cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf4:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <__sinit.part.1+0xdc>)
 8003cf6:	6845      	ldr	r5, [r0, #4]
 8003cf8:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003cfa:	2400      	movs	r4, #0
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8003d02:	2304      	movs	r3, #4
 8003d04:	2103      	movs	r1, #3
 8003d06:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8003d0a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8003d0e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8003d12:	b083      	sub	sp, #12
 8003d14:	602c      	str	r4, [r5, #0]
 8003d16:	606c      	str	r4, [r5, #4]
 8003d18:	60ac      	str	r4, [r5, #8]
 8003d1a:	666c      	str	r4, [r5, #100]	; 0x64
 8003d1c:	81ec      	strh	r4, [r5, #14]
 8003d1e:	612c      	str	r4, [r5, #16]
 8003d20:	616c      	str	r4, [r5, #20]
 8003d22:	61ac      	str	r4, [r5, #24]
 8003d24:	81ab      	strh	r3, [r5, #12]
 8003d26:	4621      	mov	r1, r4
 8003d28:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	f000 fcf7 	bl	8004720 <memset>
 8003d32:	68be      	ldr	r6, [r7, #8]
 8003d34:	f8df b098 	ldr.w	fp, [pc, #152]	; 8003dd0 <__sinit.part.1+0xe0>
 8003d38:	f8df a098 	ldr.w	sl, [pc, #152]	; 8003dd4 <__sinit.part.1+0xe4>
 8003d3c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003dd8 <__sinit.part.1+0xe8>
 8003d40:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003ddc <__sinit.part.1+0xec>
 8003d44:	f8c5 b020 	str.w	fp, [r5, #32]
 8003d48:	2301      	movs	r3, #1
 8003d4a:	2209      	movs	r2, #9
 8003d4c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003d50:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003d54:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003d58:	61ed      	str	r5, [r5, #28]
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	81f3      	strh	r3, [r6, #14]
 8003d5e:	81b2      	strh	r2, [r6, #12]
 8003d60:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8003d64:	6034      	str	r4, [r6, #0]
 8003d66:	6074      	str	r4, [r6, #4]
 8003d68:	60b4      	str	r4, [r6, #8]
 8003d6a:	6674      	str	r4, [r6, #100]	; 0x64
 8003d6c:	6134      	str	r4, [r6, #16]
 8003d6e:	6174      	str	r4, [r6, #20]
 8003d70:	61b4      	str	r4, [r6, #24]
 8003d72:	2208      	movs	r2, #8
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	f000 fcd3 	bl	8004720 <memset>
 8003d7a:	68fd      	ldr	r5, [r7, #12]
 8003d7c:	61f6      	str	r6, [r6, #28]
 8003d7e:	2012      	movs	r0, #18
 8003d80:	2202      	movs	r2, #2
 8003d82:	f8c6 b020 	str.w	fp, [r6, #32]
 8003d86:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8003d8a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8003d8e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8003d92:	4621      	mov	r1, r4
 8003d94:	81a8      	strh	r0, [r5, #12]
 8003d96:	81ea      	strh	r2, [r5, #14]
 8003d98:	602c      	str	r4, [r5, #0]
 8003d9a:	606c      	str	r4, [r5, #4]
 8003d9c:	60ac      	str	r4, [r5, #8]
 8003d9e:	666c      	str	r4, [r5, #100]	; 0x64
 8003da0:	612c      	str	r4, [r5, #16]
 8003da2:	616c      	str	r4, [r5, #20]
 8003da4:	61ac      	str	r4, [r5, #24]
 8003da6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003daa:	2208      	movs	r2, #8
 8003dac:	f000 fcb8 	bl	8004720 <memset>
 8003db0:	9b01      	ldr	r3, [sp, #4]
 8003db2:	61ed      	str	r5, [r5, #28]
 8003db4:	f8c5 b020 	str.w	fp, [r5, #32]
 8003db8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003dbc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003dc0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc6:	b003      	add	sp, #12
 8003dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dcc:	08003ce5 	.word	0x08003ce5
 8003dd0:	08004e59 	.word	0x08004e59
 8003dd4:	08004e7d 	.word	0x08004e7d
 8003dd8:	08004eb5 	.word	0x08004eb5
 8003ddc:	08004ed5 	.word	0x08004ed5

08003de0 <__sinit>:
 8003de0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003de2:	b103      	cbz	r3, 8003de6 <__sinit+0x6>
 8003de4:	4770      	bx	lr
 8003de6:	f7ff bf83 	b.w	8003cf0 <__sinit.part.1>
 8003dea:	bf00      	nop

08003dec <__sfp_lock_acquire>:
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <__sfp_lock_release>:
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <_malloc_trim_r>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	4f23      	ldr	r7, [pc, #140]	; (8003e84 <_malloc_trim_r+0x90>)
 8003df8:	460c      	mov	r4, r1
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	f000 fcde 	bl	80047bc <__malloc_lock>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	685d      	ldr	r5, [r3, #4]
 8003e04:	f025 0503 	bic.w	r5, r5, #3
 8003e08:	1b29      	subs	r1, r5, r4
 8003e0a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8003e0e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003e12:	f021 010f 	bic.w	r1, r1, #15
 8003e16:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8003e1a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003e1e:	db07      	blt.n	8003e30 <_malloc_trim_r+0x3c>
 8003e20:	2100      	movs	r1, #0
 8003e22:	4630      	mov	r0, r6
 8003e24:	f001 f806 	bl	8004e34 <_sbrk_r>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	442b      	add	r3, r5
 8003e2c:	4298      	cmp	r0, r3
 8003e2e:	d004      	beq.n	8003e3a <_malloc_trim_r+0x46>
 8003e30:	4630      	mov	r0, r6
 8003e32:	f000 fcc5 	bl	80047c0 <__malloc_unlock>
 8003e36:	2000      	movs	r0, #0
 8003e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3a:	4261      	negs	r1, r4
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f000 fff9 	bl	8004e34 <_sbrk_r>
 8003e42:	3001      	adds	r0, #1
 8003e44:	d00d      	beq.n	8003e62 <_malloc_trim_r+0x6e>
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <_malloc_trim_r+0x94>)
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	1b2d      	subs	r5, r5, r4
 8003e4e:	f045 0501 	orr.w	r5, r5, #1
 8003e52:	4630      	mov	r0, r6
 8003e54:	1b09      	subs	r1, r1, r4
 8003e56:	6055      	str	r5, [r2, #4]
 8003e58:	6019      	str	r1, [r3, #0]
 8003e5a:	f000 fcb1 	bl	80047c0 <__malloc_unlock>
 8003e5e:	2001      	movs	r0, #1
 8003e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e62:	2100      	movs	r1, #0
 8003e64:	4630      	mov	r0, r6
 8003e66:	f000 ffe5 	bl	8004e34 <_sbrk_r>
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	1a83      	subs	r3, r0, r2
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	ddde      	ble.n	8003e30 <_malloc_trim_r+0x3c>
 8003e72:	4c06      	ldr	r4, [pc, #24]	; (8003e8c <_malloc_trim_r+0x98>)
 8003e74:	4904      	ldr	r1, [pc, #16]	; (8003e88 <_malloc_trim_r+0x94>)
 8003e76:	6824      	ldr	r4, [r4, #0]
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	1b00      	subs	r0, r0, r4
 8003e7e:	6053      	str	r3, [r2, #4]
 8003e80:	6008      	str	r0, [r1, #0]
 8003e82:	e7d5      	b.n	8003e30 <_malloc_trim_r+0x3c>
 8003e84:	20000490 	.word	0x20000490
 8003e88:	200008cc 	.word	0x200008cc
 8003e8c:	2000089c 	.word	0x2000089c

08003e90 <_free_r>:
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d045      	beq.n	8003f20 <_free_r+0x90>
 8003e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e98:	460d      	mov	r5, r1
 8003e9a:	4680      	mov	r8, r0
 8003e9c:	f000 fc8e 	bl	80047bc <__malloc_lock>
 8003ea0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8003ea4:	496a      	ldr	r1, [pc, #424]	; (8004050 <_free_r+0x1c0>)
 8003ea6:	f027 0301 	bic.w	r3, r7, #1
 8003eaa:	f1a5 0408 	sub.w	r4, r5, #8
 8003eae:	18e2      	adds	r2, r4, r3
 8003eb0:	688e      	ldr	r6, [r1, #8]
 8003eb2:	6850      	ldr	r0, [r2, #4]
 8003eb4:	42b2      	cmp	r2, r6
 8003eb6:	f020 0003 	bic.w	r0, r0, #3
 8003eba:	d062      	beq.n	8003f82 <_free_r+0xf2>
 8003ebc:	07fe      	lsls	r6, r7, #31
 8003ebe:	6050      	str	r0, [r2, #4]
 8003ec0:	d40b      	bmi.n	8003eda <_free_r+0x4a>
 8003ec2:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8003ec6:	1be4      	subs	r4, r4, r7
 8003ec8:	f101 0e08 	add.w	lr, r1, #8
 8003ecc:	68a5      	ldr	r5, [r4, #8]
 8003ece:	4575      	cmp	r5, lr
 8003ed0:	443b      	add	r3, r7
 8003ed2:	d06f      	beq.n	8003fb4 <_free_r+0x124>
 8003ed4:	68e7      	ldr	r7, [r4, #12]
 8003ed6:	60ef      	str	r7, [r5, #12]
 8003ed8:	60bd      	str	r5, [r7, #8]
 8003eda:	1815      	adds	r5, r2, r0
 8003edc:	686d      	ldr	r5, [r5, #4]
 8003ede:	07ed      	lsls	r5, r5, #31
 8003ee0:	d542      	bpl.n	8003f68 <_free_r+0xd8>
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	6062      	str	r2, [r4, #4]
 8003ee8:	50e3      	str	r3, [r4, r3]
 8003eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eee:	d218      	bcs.n	8003f22 <_free_r+0x92>
 8003ef0:	08db      	lsrs	r3, r3, #3
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	684d      	ldr	r5, [r1, #4]
 8003ef6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8003efa:	60a7      	str	r7, [r4, #8]
 8003efc:	2001      	movs	r0, #1
 8003efe:	109b      	asrs	r3, r3, #2
 8003f00:	fa00 f303 	lsl.w	r3, r0, r3
 8003f04:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8003f08:	431d      	orrs	r5, r3
 8003f0a:	3808      	subs	r0, #8
 8003f0c:	60e0      	str	r0, [r4, #12]
 8003f0e:	604d      	str	r5, [r1, #4]
 8003f10:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8003f14:	60fc      	str	r4, [r7, #12]
 8003f16:	4640      	mov	r0, r8
 8003f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1c:	f000 bc50 	b.w	80047c0 <__malloc_unlock>
 8003f20:	4770      	bx	lr
 8003f22:	0a5a      	lsrs	r2, r3, #9
 8003f24:	2a04      	cmp	r2, #4
 8003f26:	d853      	bhi.n	8003fd0 <_free_r+0x140>
 8003f28:	099a      	lsrs	r2, r3, #6
 8003f2a:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8003f2e:	007f      	lsls	r7, r7, #1
 8003f30:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8003f34:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8003f38:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8003f3c:	4944      	ldr	r1, [pc, #272]	; (8004050 <_free_r+0x1c0>)
 8003f3e:	3808      	subs	r0, #8
 8003f40:	4290      	cmp	r0, r2
 8003f42:	d04d      	beq.n	8003fe0 <_free_r+0x150>
 8003f44:	6851      	ldr	r1, [r2, #4]
 8003f46:	f021 0103 	bic.w	r1, r1, #3
 8003f4a:	428b      	cmp	r3, r1
 8003f4c:	d202      	bcs.n	8003f54 <_free_r+0xc4>
 8003f4e:	6892      	ldr	r2, [r2, #8]
 8003f50:	4290      	cmp	r0, r2
 8003f52:	d1f7      	bne.n	8003f44 <_free_r+0xb4>
 8003f54:	68d0      	ldr	r0, [r2, #12]
 8003f56:	60e0      	str	r0, [r4, #12]
 8003f58:	60a2      	str	r2, [r4, #8]
 8003f5a:	6084      	str	r4, [r0, #8]
 8003f5c:	60d4      	str	r4, [r2, #12]
 8003f5e:	4640      	mov	r0, r8
 8003f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f64:	f000 bc2c 	b.w	80047c0 <__malloc_unlock>
 8003f68:	6895      	ldr	r5, [r2, #8]
 8003f6a:	4f3a      	ldr	r7, [pc, #232]	; (8004054 <_free_r+0x1c4>)
 8003f6c:	42bd      	cmp	r5, r7
 8003f6e:	4403      	add	r3, r0
 8003f70:	d03f      	beq.n	8003ff2 <_free_r+0x162>
 8003f72:	68d0      	ldr	r0, [r2, #12]
 8003f74:	60e8      	str	r0, [r5, #12]
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	6085      	str	r5, [r0, #8]
 8003f7c:	6062      	str	r2, [r4, #4]
 8003f7e:	50e3      	str	r3, [r4, r3]
 8003f80:	e7b3      	b.n	8003eea <_free_r+0x5a>
 8003f82:	07ff      	lsls	r7, r7, #31
 8003f84:	4403      	add	r3, r0
 8003f86:	d407      	bmi.n	8003f98 <_free_r+0x108>
 8003f88:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8003f8c:	1aa4      	subs	r4, r4, r2
 8003f8e:	4413      	add	r3, r2
 8003f90:	68a0      	ldr	r0, [r4, #8]
 8003f92:	68e2      	ldr	r2, [r4, #12]
 8003f94:	60c2      	str	r2, [r0, #12]
 8003f96:	6090      	str	r0, [r2, #8]
 8003f98:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <_free_r+0x1c8>)
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	f043 0001 	orr.w	r0, r3, #1
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	6060      	str	r0, [r4, #4]
 8003fa4:	608c      	str	r4, [r1, #8]
 8003fa6:	d3b6      	bcc.n	8003f16 <_free_r+0x86>
 8003fa8:	4b2c      	ldr	r3, [pc, #176]	; (800405c <_free_r+0x1cc>)
 8003faa:	4640      	mov	r0, r8
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	f7ff ff21 	bl	8003df4 <_malloc_trim_r>
 8003fb2:	e7b0      	b.n	8003f16 <_free_r+0x86>
 8003fb4:	1811      	adds	r1, r2, r0
 8003fb6:	6849      	ldr	r1, [r1, #4]
 8003fb8:	07c9      	lsls	r1, r1, #31
 8003fba:	d444      	bmi.n	8004046 <_free_r+0x1b6>
 8003fbc:	6891      	ldr	r1, [r2, #8]
 8003fbe:	68d2      	ldr	r2, [r2, #12]
 8003fc0:	60ca      	str	r2, [r1, #12]
 8003fc2:	4403      	add	r3, r0
 8003fc4:	f043 0001 	orr.w	r0, r3, #1
 8003fc8:	6091      	str	r1, [r2, #8]
 8003fca:	6060      	str	r0, [r4, #4]
 8003fcc:	50e3      	str	r3, [r4, r3]
 8003fce:	e7a2      	b.n	8003f16 <_free_r+0x86>
 8003fd0:	2a14      	cmp	r2, #20
 8003fd2:	d817      	bhi.n	8004004 <_free_r+0x174>
 8003fd4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8003fd8:	007f      	lsls	r7, r7, #1
 8003fda:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8003fde:	e7a9      	b.n	8003f34 <_free_r+0xa4>
 8003fe0:	10aa      	asrs	r2, r5, #2
 8003fe2:	684b      	ldr	r3, [r1, #4]
 8003fe4:	2501      	movs	r5, #1
 8003fe6:	fa05 f202 	lsl.w	r2, r5, r2
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
 8003fee:	4602      	mov	r2, r0
 8003ff0:	e7b1      	b.n	8003f56 <_free_r+0xc6>
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	614c      	str	r4, [r1, #20]
 8003ff8:	610c      	str	r4, [r1, #16]
 8003ffa:	60e5      	str	r5, [r4, #12]
 8003ffc:	60a5      	str	r5, [r4, #8]
 8003ffe:	6062      	str	r2, [r4, #4]
 8004000:	50e3      	str	r3, [r4, r3]
 8004002:	e788      	b.n	8003f16 <_free_r+0x86>
 8004004:	2a54      	cmp	r2, #84	; 0x54
 8004006:	d806      	bhi.n	8004016 <_free_r+0x186>
 8004008:	0b1a      	lsrs	r2, r3, #12
 800400a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800400e:	007f      	lsls	r7, r7, #1
 8004010:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8004014:	e78e      	b.n	8003f34 <_free_r+0xa4>
 8004016:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800401a:	d806      	bhi.n	800402a <_free_r+0x19a>
 800401c:	0bda      	lsrs	r2, r3, #15
 800401e:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8004022:	007f      	lsls	r7, r7, #1
 8004024:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8004028:	e784      	b.n	8003f34 <_free_r+0xa4>
 800402a:	f240 5054 	movw	r0, #1364	; 0x554
 800402e:	4282      	cmp	r2, r0
 8004030:	d806      	bhi.n	8004040 <_free_r+0x1b0>
 8004032:	0c9a      	lsrs	r2, r3, #18
 8004034:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8004038:	007f      	lsls	r7, r7, #1
 800403a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800403e:	e779      	b.n	8003f34 <_free_r+0xa4>
 8004040:	27fe      	movs	r7, #254	; 0xfe
 8004042:	257e      	movs	r5, #126	; 0x7e
 8004044:	e776      	b.n	8003f34 <_free_r+0xa4>
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	6062      	str	r2, [r4, #4]
 800404c:	50e3      	str	r3, [r4, r3]
 800404e:	e762      	b.n	8003f16 <_free_r+0x86>
 8004050:	20000490 	.word	0x20000490
 8004054:	20000498 	.word	0x20000498
 8004058:	20000898 	.word	0x20000898
 800405c:	200008c8 	.word	0x200008c8

08004060 <_fwalk_reent>:
 8004060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004064:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8004068:	d01f      	beq.n	80040aa <_fwalk_reent+0x4a>
 800406a:	4688      	mov	r8, r1
 800406c:	4606      	mov	r6, r0
 800406e:	f04f 0900 	mov.w	r9, #0
 8004072:	687d      	ldr	r5, [r7, #4]
 8004074:	68bc      	ldr	r4, [r7, #8]
 8004076:	3d01      	subs	r5, #1
 8004078:	d411      	bmi.n	800409e <_fwalk_reent+0x3e>
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	2b01      	cmp	r3, #1
 800407e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004082:	d908      	bls.n	8004096 <_fwalk_reent+0x36>
 8004084:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004088:	3301      	adds	r3, #1
 800408a:	4621      	mov	r1, r4
 800408c:	4630      	mov	r0, r6
 800408e:	d002      	beq.n	8004096 <_fwalk_reent+0x36>
 8004090:	47c0      	blx	r8
 8004092:	ea49 0900 	orr.w	r9, r9, r0
 8004096:	1c6b      	adds	r3, r5, #1
 8004098:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800409c:	d1ed      	bne.n	800407a <_fwalk_reent+0x1a>
 800409e:	683f      	ldr	r7, [r7, #0]
 80040a0:	2f00      	cmp	r7, #0
 80040a2:	d1e6      	bne.n	8004072 <_fwalk_reent+0x12>
 80040a4:	4648      	mov	r0, r9
 80040a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040aa:	46b9      	mov	r9, r7
 80040ac:	4648      	mov	r0, r9
 80040ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b2:	bf00      	nop

080040b4 <__locale_charset>:
 80040b4:	4800      	ldr	r0, [pc, #0]	; (80040b8 <__locale_charset+0x4>)
 80040b6:	4770      	bx	lr
 80040b8:	2000046c 	.word	0x2000046c

080040bc <__locale_mb_cur_max>:
 80040bc:	4b01      	ldr	r3, [pc, #4]	; (80040c4 <__locale_mb_cur_max+0x8>)
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	2000048c 	.word	0x2000048c

080040c8 <_localeconv_r>:
 80040c8:	4800      	ldr	r0, [pc, #0]	; (80040cc <_localeconv_r+0x4>)
 80040ca:	4770      	bx	lr
 80040cc:	20000434 	.word	0x20000434

080040d0 <__smakebuf_r>:
 80040d0:	898b      	ldrh	r3, [r1, #12]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	f012 0f02 	tst.w	r2, #2
 80040d8:	d13c      	bne.n	8004154 <__smakebuf_r+0x84>
 80040da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040dc:	460c      	mov	r4, r1
 80040de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e2:	2900      	cmp	r1, #0
 80040e4:	b091      	sub	sp, #68	; 0x44
 80040e6:	4605      	mov	r5, r0
 80040e8:	db19      	blt.n	800411e <__smakebuf_r+0x4e>
 80040ea:	aa01      	add	r2, sp, #4
 80040ec:	f001 f840 	bl	8005170 <_fstat_r>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	db12      	blt.n	800411a <__smakebuf_r+0x4a>
 80040f4:	9b02      	ldr	r3, [sp, #8]
 80040f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040fa:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 80040fe:	fab7 f787 	clz	r7, r7
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004106:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800410a:	d02a      	beq.n	8004162 <__smakebuf_r+0x92>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004118:	e00b      	b.n	8004132 <__smakebuf_r+0x62>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	b29a      	uxth	r2, r3
 800411e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004122:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004126:	81a3      	strh	r3, [r4, #12]
 8004128:	bf14      	ite	ne
 800412a:	2640      	movne	r6, #64	; 0x40
 800412c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8004130:	2700      	movs	r7, #0
 8004132:	4631      	mov	r1, r6
 8004134:	4628      	mov	r0, r5
 8004136:	f000 f83b 	bl	80041b0 <_malloc_r>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	b340      	cbz	r0, 8004190 <__smakebuf_r+0xc0>
 800413e:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <__smakebuf_r+0xd8>)
 8004140:	63ea      	str	r2, [r5, #60]	; 0x3c
 8004142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	6020      	str	r0, [r4, #0]
 800414a:	6120      	str	r0, [r4, #16]
 800414c:	6166      	str	r6, [r4, #20]
 800414e:	b99f      	cbnz	r7, 8004178 <__smakebuf_r+0xa8>
 8004150:	b011      	add	sp, #68	; 0x44
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004154:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8004158:	2201      	movs	r2, #1
 800415a:	600b      	str	r3, [r1, #0]
 800415c:	610b      	str	r3, [r1, #16]
 800415e:	614a      	str	r2, [r1, #20]
 8004160:	4770      	bx	lr
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <__smakebuf_r+0xdc>)
 8004164:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004166:	429a      	cmp	r2, r3
 8004168:	d1d0      	bne.n	800410c <__smakebuf_r+0x3c>
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004170:	4333      	orrs	r3, r6
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	64e6      	str	r6, [r4, #76]	; 0x4c
 8004176:	e7dc      	b.n	8004132 <__smakebuf_r+0x62>
 8004178:	4628      	mov	r0, r5
 800417a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800417e:	f001 f98b 	bl	8005498 <_isatty_r>
 8004182:	2800      	cmp	r0, #0
 8004184:	d0e4      	beq.n	8004150 <__smakebuf_r+0x80>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	81a3      	strh	r3, [r4, #12]
 800418e:	e7df      	b.n	8004150 <__smakebuf_r+0x80>
 8004190:	059a      	lsls	r2, r3, #22
 8004192:	d4dd      	bmi.n	8004150 <__smakebuf_r+0x80>
 8004194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	2101      	movs	r1, #1
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	6022      	str	r2, [r4, #0]
 80041a2:	6122      	str	r2, [r4, #16]
 80041a4:	6161      	str	r1, [r4, #20]
 80041a6:	e7d3      	b.n	8004150 <__smakebuf_r+0x80>
 80041a8:	08003ce5 	.word	0x08003ce5
 80041ac:	08004eb5 	.word	0x08004eb5

080041b0 <_malloc_r>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	f101 050b 	add.w	r5, r1, #11
 80041b8:	2d16      	cmp	r5, #22
 80041ba:	b083      	sub	sp, #12
 80041bc:	4606      	mov	r6, r0
 80041be:	f240 809f 	bls.w	8004300 <_malloc_r+0x150>
 80041c2:	f035 0507 	bics.w	r5, r5, #7
 80041c6:	f100 80bf 	bmi.w	8004348 <_malloc_r+0x198>
 80041ca:	42a9      	cmp	r1, r5
 80041cc:	f200 80bc 	bhi.w	8004348 <_malloc_r+0x198>
 80041d0:	f000 faf4 	bl	80047bc <__malloc_lock>
 80041d4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80041d8:	f0c0 829c 	bcc.w	8004714 <_malloc_r+0x564>
 80041dc:	0a6b      	lsrs	r3, r5, #9
 80041de:	f000 80ba 	beq.w	8004356 <_malloc_r+0x1a6>
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	f200 8183 	bhi.w	80044ee <_malloc_r+0x33e>
 80041e8:	09a8      	lsrs	r0, r5, #6
 80041ea:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 80041ee:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80041f2:	3038      	adds	r0, #56	; 0x38
 80041f4:	4fc4      	ldr	r7, [pc, #784]	; (8004508 <_malloc_r+0x358>)
 80041f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80041fa:	f1a3 0108 	sub.w	r1, r3, #8
 80041fe:	685c      	ldr	r4, [r3, #4]
 8004200:	42a1      	cmp	r1, r4
 8004202:	d107      	bne.n	8004214 <_malloc_r+0x64>
 8004204:	e0ac      	b.n	8004360 <_malloc_r+0x1b0>
 8004206:	2a00      	cmp	r2, #0
 8004208:	f280 80ac 	bge.w	8004364 <_malloc_r+0x1b4>
 800420c:	68e4      	ldr	r4, [r4, #12]
 800420e:	42a1      	cmp	r1, r4
 8004210:	f000 80a6 	beq.w	8004360 <_malloc_r+0x1b0>
 8004214:	6863      	ldr	r3, [r4, #4]
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	1b5a      	subs	r2, r3, r5
 800421c:	2a0f      	cmp	r2, #15
 800421e:	ddf2      	ble.n	8004206 <_malloc_r+0x56>
 8004220:	49b9      	ldr	r1, [pc, #740]	; (8004508 <_malloc_r+0x358>)
 8004222:	693c      	ldr	r4, [r7, #16]
 8004224:	f101 0e08 	add.w	lr, r1, #8
 8004228:	4574      	cmp	r4, lr
 800422a:	f000 81b3 	beq.w	8004594 <_malloc_r+0x3e4>
 800422e:	6863      	ldr	r3, [r4, #4]
 8004230:	f023 0303 	bic.w	r3, r3, #3
 8004234:	1b5a      	subs	r2, r3, r5
 8004236:	2a0f      	cmp	r2, #15
 8004238:	f300 8199 	bgt.w	800456e <_malloc_r+0x3be>
 800423c:	2a00      	cmp	r2, #0
 800423e:	f8c1 e014 	str.w	lr, [r1, #20]
 8004242:	f8c1 e010 	str.w	lr, [r1, #16]
 8004246:	f280 809e 	bge.w	8004386 <_malloc_r+0x1d6>
 800424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424e:	f080 8167 	bcs.w	8004520 <_malloc_r+0x370>
 8004252:	08db      	lsrs	r3, r3, #3
 8004254:	f103 0c01 	add.w	ip, r3, #1
 8004258:	2201      	movs	r2, #1
 800425a:	109b      	asrs	r3, r3, #2
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	684a      	ldr	r2, [r1, #4]
 8004262:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8004266:	f8c4 8008 	str.w	r8, [r4, #8]
 800426a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800426e:	431a      	orrs	r2, r3
 8004270:	f1a9 0308 	sub.w	r3, r9, #8
 8004274:	60e3      	str	r3, [r4, #12]
 8004276:	604a      	str	r2, [r1, #4]
 8004278:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800427c:	f8c8 400c 	str.w	r4, [r8, #12]
 8004280:	1083      	asrs	r3, r0, #2
 8004282:	2401      	movs	r4, #1
 8004284:	409c      	lsls	r4, r3
 8004286:	4294      	cmp	r4, r2
 8004288:	f200 808a 	bhi.w	80043a0 <_malloc_r+0x1f0>
 800428c:	4214      	tst	r4, r2
 800428e:	d106      	bne.n	800429e <_malloc_r+0xee>
 8004290:	f020 0003 	bic.w	r0, r0, #3
 8004294:	0064      	lsls	r4, r4, #1
 8004296:	4214      	tst	r4, r2
 8004298:	f100 0004 	add.w	r0, r0, #4
 800429c:	d0fa      	beq.n	8004294 <_malloc_r+0xe4>
 800429e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80042a2:	46cc      	mov	ip, r9
 80042a4:	4680      	mov	r8, r0
 80042a6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80042aa:	458c      	cmp	ip, r1
 80042ac:	d107      	bne.n	80042be <_malloc_r+0x10e>
 80042ae:	e173      	b.n	8004598 <_malloc_r+0x3e8>
 80042b0:	2a00      	cmp	r2, #0
 80042b2:	f280 8181 	bge.w	80045b8 <_malloc_r+0x408>
 80042b6:	68c9      	ldr	r1, [r1, #12]
 80042b8:	458c      	cmp	ip, r1
 80042ba:	f000 816d 	beq.w	8004598 <_malloc_r+0x3e8>
 80042be:	684b      	ldr	r3, [r1, #4]
 80042c0:	f023 0303 	bic.w	r3, r3, #3
 80042c4:	1b5a      	subs	r2, r3, r5
 80042c6:	2a0f      	cmp	r2, #15
 80042c8:	ddf2      	ble.n	80042b0 <_malloc_r+0x100>
 80042ca:	460c      	mov	r4, r1
 80042cc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80042d0:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80042d4:	194b      	adds	r3, r1, r5
 80042d6:	f045 0501 	orr.w	r5, r5, #1
 80042da:	604d      	str	r5, [r1, #4]
 80042dc:	f042 0101 	orr.w	r1, r2, #1
 80042e0:	f8c8 c00c 	str.w	ip, [r8, #12]
 80042e4:	4630      	mov	r0, r6
 80042e6:	f8cc 8008 	str.w	r8, [ip, #8]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	f8c3 e00c 	str.w	lr, [r3, #12]
 80042f2:	f8c3 e008 	str.w	lr, [r3, #8]
 80042f6:	6059      	str	r1, [r3, #4]
 80042f8:	509a      	str	r2, [r3, r2]
 80042fa:	f000 fa61 	bl	80047c0 <__malloc_unlock>
 80042fe:	e01f      	b.n	8004340 <_malloc_r+0x190>
 8004300:	2910      	cmp	r1, #16
 8004302:	d821      	bhi.n	8004348 <_malloc_r+0x198>
 8004304:	f000 fa5a 	bl	80047bc <__malloc_lock>
 8004308:	2510      	movs	r5, #16
 800430a:	2306      	movs	r3, #6
 800430c:	2002      	movs	r0, #2
 800430e:	4f7e      	ldr	r7, [pc, #504]	; (8004508 <_malloc_r+0x358>)
 8004310:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004314:	f1a3 0208 	sub.w	r2, r3, #8
 8004318:	685c      	ldr	r4, [r3, #4]
 800431a:	4294      	cmp	r4, r2
 800431c:	f000 8145 	beq.w	80045aa <_malloc_r+0x3fa>
 8004320:	6863      	ldr	r3, [r4, #4]
 8004322:	68e1      	ldr	r1, [r4, #12]
 8004324:	68a5      	ldr	r5, [r4, #8]
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	4423      	add	r3, r4
 800432c:	4630      	mov	r0, r6
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	60e9      	str	r1, [r5, #12]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	608d      	str	r5, [r1, #8]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	f000 fa41 	bl	80047c0 <__malloc_unlock>
 800433e:	3408      	adds	r4, #8
 8004340:	4620      	mov	r0, r4
 8004342:	b003      	add	sp, #12
 8004344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004348:	2400      	movs	r4, #0
 800434a:	230c      	movs	r3, #12
 800434c:	4620      	mov	r0, r4
 800434e:	6033      	str	r3, [r6, #0]
 8004350:	b003      	add	sp, #12
 8004352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800435c:	203f      	movs	r0, #63	; 0x3f
 800435e:	e749      	b.n	80041f4 <_malloc_r+0x44>
 8004360:	4670      	mov	r0, lr
 8004362:	e75d      	b.n	8004220 <_malloc_r+0x70>
 8004364:	4423      	add	r3, r4
 8004366:	68e1      	ldr	r1, [r4, #12]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68a5      	ldr	r5, [r4, #8]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	60e9      	str	r1, [r5, #12]
 8004372:	4630      	mov	r0, r6
 8004374:	608d      	str	r5, [r1, #8]
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	f000 fa22 	bl	80047c0 <__malloc_unlock>
 800437c:	3408      	adds	r4, #8
 800437e:	4620      	mov	r0, r4
 8004380:	b003      	add	sp, #12
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	4423      	add	r3, r4
 8004388:	4630      	mov	r0, r6
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	f000 fa15 	bl	80047c0 <__malloc_unlock>
 8004396:	3408      	adds	r4, #8
 8004398:	4620      	mov	r0, r4
 800439a:	b003      	add	sp, #12
 800439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a0:	68bc      	ldr	r4, [r7, #8]
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	f023 0803 	bic.w	r8, r3, #3
 80043a8:	45a8      	cmp	r8, r5
 80043aa:	d304      	bcc.n	80043b6 <_malloc_r+0x206>
 80043ac:	ebc5 0308 	rsb	r3, r5, r8
 80043b0:	2b0f      	cmp	r3, #15
 80043b2:	f300 808c 	bgt.w	80044ce <_malloc_r+0x31e>
 80043b6:	4b55      	ldr	r3, [pc, #340]	; (800450c <_malloc_r+0x35c>)
 80043b8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800451c <_malloc_r+0x36c>
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	f8d9 3000 	ldr.w	r3, [r9]
 80043c2:	3301      	adds	r3, #1
 80043c4:	442a      	add	r2, r5
 80043c6:	eb04 0a08 	add.w	sl, r4, r8
 80043ca:	f000 8160 	beq.w	800468e <_malloc_r+0x4de>
 80043ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043d2:	320f      	adds	r2, #15
 80043d4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80043d8:	f022 020f 	bic.w	r2, r2, #15
 80043dc:	4611      	mov	r1, r2
 80043de:	4630      	mov	r0, r6
 80043e0:	9201      	str	r2, [sp, #4]
 80043e2:	f000 fd27 	bl	8004e34 <_sbrk_r>
 80043e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80043ea:	4683      	mov	fp, r0
 80043ec:	9a01      	ldr	r2, [sp, #4]
 80043ee:	f000 8158 	beq.w	80046a2 <_malloc_r+0x4f2>
 80043f2:	4582      	cmp	sl, r0
 80043f4:	f200 80fc 	bhi.w	80045f0 <_malloc_r+0x440>
 80043f8:	4b45      	ldr	r3, [pc, #276]	; (8004510 <_malloc_r+0x360>)
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	45da      	cmp	sl, fp
 80043fe:	4411      	add	r1, r2
 8004400:	6019      	str	r1, [r3, #0]
 8004402:	f000 8153 	beq.w	80046ac <_malloc_r+0x4fc>
 8004406:	f8d9 0000 	ldr.w	r0, [r9]
 800440a:	f8df e110 	ldr.w	lr, [pc, #272]	; 800451c <_malloc_r+0x36c>
 800440e:	3001      	adds	r0, #1
 8004410:	bf1b      	ittet	ne
 8004412:	ebca 0a0b 	rsbne	sl, sl, fp
 8004416:	4451      	addne	r1, sl
 8004418:	f8ce b000 	streq.w	fp, [lr]
 800441c:	6019      	strne	r1, [r3, #0]
 800441e:	f01b 0107 	ands.w	r1, fp, #7
 8004422:	f000 8117 	beq.w	8004654 <_malloc_r+0x4a4>
 8004426:	f1c1 0008 	rsb	r0, r1, #8
 800442a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800442e:	4483      	add	fp, r0
 8004430:	3108      	adds	r1, #8
 8004432:	445a      	add	r2, fp
 8004434:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004438:	ebc2 0901 	rsb	r9, r2, r1
 800443c:	4649      	mov	r1, r9
 800443e:	4630      	mov	r0, r6
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	f000 fcf7 	bl	8004e34 <_sbrk_r>
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	9b01      	ldr	r3, [sp, #4]
 800444a:	f000 813f 	beq.w	80046cc <_malloc_r+0x51c>
 800444e:	ebcb 0200 	rsb	r2, fp, r0
 8004452:	444a      	add	r2, r9
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	f8c7 b008 	str.w	fp, [r7, #8]
 800445e:	4449      	add	r1, r9
 8004460:	42bc      	cmp	r4, r7
 8004462:	f8cb 2004 	str.w	r2, [fp, #4]
 8004466:	6019      	str	r1, [r3, #0]
 8004468:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004510 <_malloc_r+0x360>
 800446c:	d016      	beq.n	800449c <_malloc_r+0x2ec>
 800446e:	f1b8 0f0f 	cmp.w	r8, #15
 8004472:	f240 80fd 	bls.w	8004670 <_malloc_r+0x4c0>
 8004476:	6862      	ldr	r2, [r4, #4]
 8004478:	f1a8 030c 	sub.w	r3, r8, #12
 800447c:	f023 0307 	bic.w	r3, r3, #7
 8004480:	18e0      	adds	r0, r4, r3
 8004482:	f002 0201 	and.w	r2, r2, #1
 8004486:	f04f 0e05 	mov.w	lr, #5
 800448a:	431a      	orrs	r2, r3
 800448c:	2b0f      	cmp	r3, #15
 800448e:	6062      	str	r2, [r4, #4]
 8004490:	f8c0 e004 	str.w	lr, [r0, #4]
 8004494:	f8c0 e008 	str.w	lr, [r0, #8]
 8004498:	f200 811c 	bhi.w	80046d4 <_malloc_r+0x524>
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <_malloc_r+0x364>)
 800449e:	68bc      	ldr	r4, [r7, #8]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4291      	cmp	r1, r2
 80044a4:	bf88      	it	hi
 80044a6:	6019      	strhi	r1, [r3, #0]
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <_malloc_r+0x368>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4291      	cmp	r1, r2
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	bf88      	it	hi
 80044b2:	6019      	strhi	r1, [r3, #0]
 80044b4:	f022 0203 	bic.w	r2, r2, #3
 80044b8:	4295      	cmp	r5, r2
 80044ba:	eba2 0305 	sub.w	r3, r2, r5
 80044be:	d801      	bhi.n	80044c4 <_malloc_r+0x314>
 80044c0:	2b0f      	cmp	r3, #15
 80044c2:	dc04      	bgt.n	80044ce <_malloc_r+0x31e>
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 f97b 	bl	80047c0 <__malloc_unlock>
 80044ca:	2400      	movs	r4, #0
 80044cc:	e738      	b.n	8004340 <_malloc_r+0x190>
 80044ce:	1962      	adds	r2, r4, r5
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	f045 0501 	orr.w	r5, r5, #1
 80044d8:	6065      	str	r5, [r4, #4]
 80044da:	4630      	mov	r0, r6
 80044dc:	60ba      	str	r2, [r7, #8]
 80044de:	6053      	str	r3, [r2, #4]
 80044e0:	f000 f96e 	bl	80047c0 <__malloc_unlock>
 80044e4:	3408      	adds	r4, #8
 80044e6:	4620      	mov	r0, r4
 80044e8:	b003      	add	sp, #12
 80044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ee:	2b14      	cmp	r3, #20
 80044f0:	d971      	bls.n	80045d6 <_malloc_r+0x426>
 80044f2:	2b54      	cmp	r3, #84	; 0x54
 80044f4:	f200 80a4 	bhi.w	8004640 <_malloc_r+0x490>
 80044f8:	0b28      	lsrs	r0, r5, #12
 80044fa:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80044fe:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004502:	306e      	adds	r0, #110	; 0x6e
 8004504:	e676      	b.n	80041f4 <_malloc_r+0x44>
 8004506:	bf00      	nop
 8004508:	20000490 	.word	0x20000490
 800450c:	200008c8 	.word	0x200008c8
 8004510:	200008cc 	.word	0x200008cc
 8004514:	200008c4 	.word	0x200008c4
 8004518:	200008c0 	.word	0x200008c0
 800451c:	2000089c 	.word	0x2000089c
 8004520:	0a5a      	lsrs	r2, r3, #9
 8004522:	2a04      	cmp	r2, #4
 8004524:	d95e      	bls.n	80045e4 <_malloc_r+0x434>
 8004526:	2a14      	cmp	r2, #20
 8004528:	f200 80b3 	bhi.w	8004692 <_malloc_r+0x4e2>
 800452c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8004530:	0049      	lsls	r1, r1, #1
 8004532:	325b      	adds	r2, #91	; 0x5b
 8004534:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8004538:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800453c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800471c <_malloc_r+0x56c>
 8004540:	f1ac 0c08 	sub.w	ip, ip, #8
 8004544:	458c      	cmp	ip, r1
 8004546:	f000 8088 	beq.w	800465a <_malloc_r+0x4aa>
 800454a:	684a      	ldr	r2, [r1, #4]
 800454c:	f022 0203 	bic.w	r2, r2, #3
 8004550:	4293      	cmp	r3, r2
 8004552:	d202      	bcs.n	800455a <_malloc_r+0x3aa>
 8004554:	6889      	ldr	r1, [r1, #8]
 8004556:	458c      	cmp	ip, r1
 8004558:	d1f7      	bne.n	800454a <_malloc_r+0x39a>
 800455a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004564:	60a1      	str	r1, [r4, #8]
 8004566:	f8cc 4008 	str.w	r4, [ip, #8]
 800456a:	60cc      	str	r4, [r1, #12]
 800456c:	e688      	b.n	8004280 <_malloc_r+0xd0>
 800456e:	1963      	adds	r3, r4, r5
 8004570:	f042 0701 	orr.w	r7, r2, #1
 8004574:	f045 0501 	orr.w	r5, r5, #1
 8004578:	6065      	str	r5, [r4, #4]
 800457a:	4630      	mov	r0, r6
 800457c:	614b      	str	r3, [r1, #20]
 800457e:	610b      	str	r3, [r1, #16]
 8004580:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004584:	f8c3 e008 	str.w	lr, [r3, #8]
 8004588:	605f      	str	r7, [r3, #4]
 800458a:	509a      	str	r2, [r3, r2]
 800458c:	3408      	adds	r4, #8
 800458e:	f000 f917 	bl	80047c0 <__malloc_unlock>
 8004592:	e6d5      	b.n	8004340 <_malloc_r+0x190>
 8004594:	684a      	ldr	r2, [r1, #4]
 8004596:	e673      	b.n	8004280 <_malloc_r+0xd0>
 8004598:	f108 0801 	add.w	r8, r8, #1
 800459c:	f018 0f03 	tst.w	r8, #3
 80045a0:	f10c 0c08 	add.w	ip, ip, #8
 80045a4:	f47f ae7f 	bne.w	80042a6 <_malloc_r+0xf6>
 80045a8:	e030      	b.n	800460c <_malloc_r+0x45c>
 80045aa:	68dc      	ldr	r4, [r3, #12]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	bf08      	it	eq
 80045b0:	3002      	addeq	r0, #2
 80045b2:	f43f ae35 	beq.w	8004220 <_malloc_r+0x70>
 80045b6:	e6b3      	b.n	8004320 <_malloc_r+0x170>
 80045b8:	440b      	add	r3, r1
 80045ba:	460c      	mov	r4, r1
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68c9      	ldr	r1, [r1, #12]
 80045c0:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	4630      	mov	r0, r6
 80045cc:	60e9      	str	r1, [r5, #12]
 80045ce:	608d      	str	r5, [r1, #8]
 80045d0:	f000 f8f6 	bl	80047c0 <__malloc_unlock>
 80045d4:	e6b4      	b.n	8004340 <_malloc_r+0x190>
 80045d6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80045da:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80045de:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80045e2:	e607      	b.n	80041f4 <_malloc_r+0x44>
 80045e4:	099a      	lsrs	r2, r3, #6
 80045e6:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80045ea:	0049      	lsls	r1, r1, #1
 80045ec:	3238      	adds	r2, #56	; 0x38
 80045ee:	e7a1      	b.n	8004534 <_malloc_r+0x384>
 80045f0:	42bc      	cmp	r4, r7
 80045f2:	4b4a      	ldr	r3, [pc, #296]	; (800471c <_malloc_r+0x56c>)
 80045f4:	f43f af00 	beq.w	80043f8 <_malloc_r+0x248>
 80045f8:	689c      	ldr	r4, [r3, #8]
 80045fa:	6862      	ldr	r2, [r4, #4]
 80045fc:	f022 0203 	bic.w	r2, r2, #3
 8004600:	e75a      	b.n	80044b8 <_malloc_r+0x308>
 8004602:	f859 3908 	ldr.w	r3, [r9], #-8
 8004606:	4599      	cmp	r9, r3
 8004608:	f040 8082 	bne.w	8004710 <_malloc_r+0x560>
 800460c:	f010 0f03 	tst.w	r0, #3
 8004610:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8004614:	d1f5      	bne.n	8004602 <_malloc_r+0x452>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	ea23 0304 	bic.w	r3, r3, r4
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	0064      	lsls	r4, r4, #1
 8004620:	429c      	cmp	r4, r3
 8004622:	f63f aebd 	bhi.w	80043a0 <_malloc_r+0x1f0>
 8004626:	2c00      	cmp	r4, #0
 8004628:	f43f aeba 	beq.w	80043a0 <_malloc_r+0x1f0>
 800462c:	421c      	tst	r4, r3
 800462e:	4640      	mov	r0, r8
 8004630:	f47f ae35 	bne.w	800429e <_malloc_r+0xee>
 8004634:	0064      	lsls	r4, r4, #1
 8004636:	421c      	tst	r4, r3
 8004638:	f100 0004 	add.w	r0, r0, #4
 800463c:	d0fa      	beq.n	8004634 <_malloc_r+0x484>
 800463e:	e62e      	b.n	800429e <_malloc_r+0xee>
 8004640:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004644:	d818      	bhi.n	8004678 <_malloc_r+0x4c8>
 8004646:	0be8      	lsrs	r0, r5, #15
 8004648:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800464c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004650:	3077      	adds	r0, #119	; 0x77
 8004652:	e5cf      	b.n	80041f4 <_malloc_r+0x44>
 8004654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004658:	e6eb      	b.n	8004432 <_malloc_r+0x282>
 800465a:	2101      	movs	r1, #1
 800465c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004660:	1092      	asrs	r2, r2, #2
 8004662:	fa01 f202 	lsl.w	r2, r1, r2
 8004666:	431a      	orrs	r2, r3
 8004668:	f8c8 2004 	str.w	r2, [r8, #4]
 800466c:	4661      	mov	r1, ip
 800466e:	e777      	b.n	8004560 <_malloc_r+0x3b0>
 8004670:	2301      	movs	r3, #1
 8004672:	f8cb 3004 	str.w	r3, [fp, #4]
 8004676:	e725      	b.n	80044c4 <_malloc_r+0x314>
 8004678:	f240 5254 	movw	r2, #1364	; 0x554
 800467c:	4293      	cmp	r3, r2
 800467e:	d820      	bhi.n	80046c2 <_malloc_r+0x512>
 8004680:	0ca8      	lsrs	r0, r5, #18
 8004682:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8004686:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800468a:	307c      	adds	r0, #124	; 0x7c
 800468c:	e5b2      	b.n	80041f4 <_malloc_r+0x44>
 800468e:	3210      	adds	r2, #16
 8004690:	e6a4      	b.n	80043dc <_malloc_r+0x22c>
 8004692:	2a54      	cmp	r2, #84	; 0x54
 8004694:	d826      	bhi.n	80046e4 <_malloc_r+0x534>
 8004696:	0b1a      	lsrs	r2, r3, #12
 8004698:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800469c:	0049      	lsls	r1, r1, #1
 800469e:	326e      	adds	r2, #110	; 0x6e
 80046a0:	e748      	b.n	8004534 <_malloc_r+0x384>
 80046a2:	68bc      	ldr	r4, [r7, #8]
 80046a4:	6862      	ldr	r2, [r4, #4]
 80046a6:	f022 0203 	bic.w	r2, r2, #3
 80046aa:	e705      	b.n	80044b8 <_malloc_r+0x308>
 80046ac:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80046b0:	2800      	cmp	r0, #0
 80046b2:	f47f aea8 	bne.w	8004406 <_malloc_r+0x256>
 80046b6:	4442      	add	r2, r8
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	e6ec      	b.n	800449c <_malloc_r+0x2ec>
 80046c2:	23fe      	movs	r3, #254	; 0xfe
 80046c4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80046c8:	207e      	movs	r0, #126	; 0x7e
 80046ca:	e593      	b.n	80041f4 <_malloc_r+0x44>
 80046cc:	2201      	movs	r2, #1
 80046ce:	f04f 0900 	mov.w	r9, #0
 80046d2:	e6c1      	b.n	8004458 <_malloc_r+0x2a8>
 80046d4:	f104 0108 	add.w	r1, r4, #8
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff fbd9 	bl	8003e90 <_free_r>
 80046de:	f8d9 1000 	ldr.w	r1, [r9]
 80046e2:	e6db      	b.n	800449c <_malloc_r+0x2ec>
 80046e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80046e8:	d805      	bhi.n	80046f6 <_malloc_r+0x546>
 80046ea:	0bda      	lsrs	r2, r3, #15
 80046ec:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80046f0:	0049      	lsls	r1, r1, #1
 80046f2:	3277      	adds	r2, #119	; 0x77
 80046f4:	e71e      	b.n	8004534 <_malloc_r+0x384>
 80046f6:	f240 5154 	movw	r1, #1364	; 0x554
 80046fa:	428a      	cmp	r2, r1
 80046fc:	d805      	bhi.n	800470a <_malloc_r+0x55a>
 80046fe:	0c9a      	lsrs	r2, r3, #18
 8004700:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8004704:	0049      	lsls	r1, r1, #1
 8004706:	327c      	adds	r2, #124	; 0x7c
 8004708:	e714      	b.n	8004534 <_malloc_r+0x384>
 800470a:	21fe      	movs	r1, #254	; 0xfe
 800470c:	227e      	movs	r2, #126	; 0x7e
 800470e:	e711      	b.n	8004534 <_malloc_r+0x384>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	e784      	b.n	800461e <_malloc_r+0x46e>
 8004714:	08e8      	lsrs	r0, r5, #3
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	e5f8      	b.n	800430e <_malloc_r+0x15e>
 800471c:	20000490 	.word	0x20000490

08004720 <memset>:
 8004720:	b470      	push	{r4, r5, r6}
 8004722:	0784      	lsls	r4, r0, #30
 8004724:	d046      	beq.n	80047b4 <memset+0x94>
 8004726:	1e54      	subs	r4, r2, #1
 8004728:	2a00      	cmp	r2, #0
 800472a:	d041      	beq.n	80047b0 <memset+0x90>
 800472c:	b2cd      	uxtb	r5, r1
 800472e:	4603      	mov	r3, r0
 8004730:	e002      	b.n	8004738 <memset+0x18>
 8004732:	1e62      	subs	r2, r4, #1
 8004734:	b3e4      	cbz	r4, 80047b0 <memset+0x90>
 8004736:	4614      	mov	r4, r2
 8004738:	f803 5b01 	strb.w	r5, [r3], #1
 800473c:	079a      	lsls	r2, r3, #30
 800473e:	d1f8      	bne.n	8004732 <memset+0x12>
 8004740:	2c03      	cmp	r4, #3
 8004742:	d92e      	bls.n	80047a2 <memset+0x82>
 8004744:	b2cd      	uxtb	r5, r1
 8004746:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800474a:	2c0f      	cmp	r4, #15
 800474c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004750:	d919      	bls.n	8004786 <memset+0x66>
 8004752:	f103 0210 	add.w	r2, r3, #16
 8004756:	4626      	mov	r6, r4
 8004758:	3e10      	subs	r6, #16
 800475a:	2e0f      	cmp	r6, #15
 800475c:	f842 5c10 	str.w	r5, [r2, #-16]
 8004760:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004764:	f842 5c08 	str.w	r5, [r2, #-8]
 8004768:	f842 5c04 	str.w	r5, [r2, #-4]
 800476c:	f102 0210 	add.w	r2, r2, #16
 8004770:	d8f2      	bhi.n	8004758 <memset+0x38>
 8004772:	f1a4 0210 	sub.w	r2, r4, #16
 8004776:	f022 020f 	bic.w	r2, r2, #15
 800477a:	f004 040f 	and.w	r4, r4, #15
 800477e:	3210      	adds	r2, #16
 8004780:	2c03      	cmp	r4, #3
 8004782:	4413      	add	r3, r2
 8004784:	d90d      	bls.n	80047a2 <memset+0x82>
 8004786:	461e      	mov	r6, r3
 8004788:	4622      	mov	r2, r4
 800478a:	3a04      	subs	r2, #4
 800478c:	2a03      	cmp	r2, #3
 800478e:	f846 5b04 	str.w	r5, [r6], #4
 8004792:	d8fa      	bhi.n	800478a <memset+0x6a>
 8004794:	1f22      	subs	r2, r4, #4
 8004796:	f022 0203 	bic.w	r2, r2, #3
 800479a:	3204      	adds	r2, #4
 800479c:	4413      	add	r3, r2
 800479e:	f004 0403 	and.w	r4, r4, #3
 80047a2:	b12c      	cbz	r4, 80047b0 <memset+0x90>
 80047a4:	b2c9      	uxtb	r1, r1
 80047a6:	441c      	add	r4, r3
 80047a8:	f803 1b01 	strb.w	r1, [r3], #1
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d1fb      	bne.n	80047a8 <memset+0x88>
 80047b0:	bc70      	pop	{r4, r5, r6}
 80047b2:	4770      	bx	lr
 80047b4:	4614      	mov	r4, r2
 80047b6:	4603      	mov	r3, r0
 80047b8:	e7c2      	b.n	8004740 <memset+0x20>
 80047ba:	bf00      	nop

080047bc <__malloc_lock>:
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop

080047c0 <__malloc_unlock>:
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop

080047c4 <_Balloc>:
 80047c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80047c6:	b570      	push	{r4, r5, r6, lr}
 80047c8:	4605      	mov	r5, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	b14b      	cbz	r3, 80047e2 <_Balloc+0x1e>
 80047ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047d2:	b180      	cbz	r0, 80047f6 <_Balloc+0x32>
 80047d4:	6802      	ldr	r2, [r0, #0]
 80047d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80047da:	2300      	movs	r3, #0
 80047dc:	6103      	str	r3, [r0, #16]
 80047de:	60c3      	str	r3, [r0, #12]
 80047e0:	bd70      	pop	{r4, r5, r6, pc}
 80047e2:	2221      	movs	r2, #33	; 0x21
 80047e4:	2104      	movs	r1, #4
 80047e6:	f000 fbd5 	bl	8004f94 <_calloc_r>
 80047ea:	64e8      	str	r0, [r5, #76]	; 0x4c
 80047ec:	4603      	mov	r3, r0
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1ed      	bne.n	80047ce <_Balloc+0xa>
 80047f2:	2000      	movs	r0, #0
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f604 	lsl.w	r6, r1, r4
 80047fc:	1d72      	adds	r2, r6, #5
 80047fe:	4628      	mov	r0, r5
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	f000 fbc7 	bl	8004f94 <_calloc_r>
 8004806:	2800      	cmp	r0, #0
 8004808:	d0f3      	beq.n	80047f2 <_Balloc+0x2e>
 800480a:	6044      	str	r4, [r0, #4]
 800480c:	6086      	str	r6, [r0, #8]
 800480e:	e7e4      	b.n	80047da <_Balloc+0x16>

08004810 <_Bfree>:
 8004810:	b131      	cbz	r1, 8004820 <_Bfree+0x10>
 8004812:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004814:	684a      	ldr	r2, [r1, #4]
 8004816:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800481a:	6008      	str	r0, [r1, #0]
 800481c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop

08004824 <__multadd>:
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	690c      	ldr	r4, [r1, #16]
 8004828:	b083      	sub	sp, #12
 800482a:	460d      	mov	r5, r1
 800482c:	4606      	mov	r6, r0
 800482e:	f101 0e14 	add.w	lr, r1, #20
 8004832:	2700      	movs	r7, #0
 8004834:	f8de 0000 	ldr.w	r0, [lr]
 8004838:	b281      	uxth	r1, r0
 800483a:	fb02 3101 	mla	r1, r2, r1, r3
 800483e:	0c0b      	lsrs	r3, r1, #16
 8004840:	0c00      	lsrs	r0, r0, #16
 8004842:	fb02 3300 	mla	r3, r2, r0, r3
 8004846:	b289      	uxth	r1, r1
 8004848:	3701      	adds	r7, #1
 800484a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800484e:	42bc      	cmp	r4, r7
 8004850:	f84e 1b04 	str.w	r1, [lr], #4
 8004854:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004858:	dcec      	bgt.n	8004834 <__multadd+0x10>
 800485a:	b13b      	cbz	r3, 800486c <__multadd+0x48>
 800485c:	68aa      	ldr	r2, [r5, #8]
 800485e:	4294      	cmp	r4, r2
 8004860:	da07      	bge.n	8004872 <__multadd+0x4e>
 8004862:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004866:	3401      	adds	r4, #1
 8004868:	6153      	str	r3, [r2, #20]
 800486a:	612c      	str	r4, [r5, #16]
 800486c:	4628      	mov	r0, r5
 800486e:	b003      	add	sp, #12
 8004870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004872:	6869      	ldr	r1, [r5, #4]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	3101      	adds	r1, #1
 8004878:	4630      	mov	r0, r6
 800487a:	f7ff ffa3 	bl	80047c4 <_Balloc>
 800487e:	692a      	ldr	r2, [r5, #16]
 8004880:	3202      	adds	r2, #2
 8004882:	f105 010c 	add.w	r1, r5, #12
 8004886:	4607      	mov	r7, r0
 8004888:	0092      	lsls	r2, r2, #2
 800488a:	300c      	adds	r0, #12
 800488c:	f7fb fd08 	bl	80002a0 <memcpy>
 8004890:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8004892:	6869      	ldr	r1, [r5, #4]
 8004894:	9b01      	ldr	r3, [sp, #4]
 8004896:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800489a:	6028      	str	r0, [r5, #0]
 800489c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80048a0:	463d      	mov	r5, r7
 80048a2:	e7de      	b.n	8004862 <__multadd+0x3e>

080048a4 <__hi0bits>:
 80048a4:	0c03      	lsrs	r3, r0, #16
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	b9b3      	cbnz	r3, 80048d8 <__hi0bits+0x34>
 80048aa:	0400      	lsls	r0, r0, #16
 80048ac:	2310      	movs	r3, #16
 80048ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80048b2:	bf04      	itt	eq
 80048b4:	0200      	lsleq	r0, r0, #8
 80048b6:	3308      	addeq	r3, #8
 80048b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80048bc:	bf04      	itt	eq
 80048be:	0100      	lsleq	r0, r0, #4
 80048c0:	3304      	addeq	r3, #4
 80048c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80048c6:	bf04      	itt	eq
 80048c8:	0080      	lsleq	r0, r0, #2
 80048ca:	3302      	addeq	r3, #2
 80048cc:	2800      	cmp	r0, #0
 80048ce:	db07      	blt.n	80048e0 <__hi0bits+0x3c>
 80048d0:	0042      	lsls	r2, r0, #1
 80048d2:	d403      	bmi.n	80048dc <__hi0bits+0x38>
 80048d4:	2020      	movs	r0, #32
 80048d6:	4770      	bx	lr
 80048d8:	2300      	movs	r3, #0
 80048da:	e7e8      	b.n	80048ae <__hi0bits+0xa>
 80048dc:	1c58      	adds	r0, r3, #1
 80048de:	4770      	bx	lr
 80048e0:	4618      	mov	r0, r3
 80048e2:	4770      	bx	lr

080048e4 <__lo0bits>:
 80048e4:	6803      	ldr	r3, [r0, #0]
 80048e6:	f013 0207 	ands.w	r2, r3, #7
 80048ea:	d007      	beq.n	80048fc <__lo0bits+0x18>
 80048ec:	07d9      	lsls	r1, r3, #31
 80048ee:	d420      	bmi.n	8004932 <__lo0bits+0x4e>
 80048f0:	079a      	lsls	r2, r3, #30
 80048f2:	d420      	bmi.n	8004936 <__lo0bits+0x52>
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	6003      	str	r3, [r0, #0]
 80048f8:	2002      	movs	r0, #2
 80048fa:	4770      	bx	lr
 80048fc:	b299      	uxth	r1, r3
 80048fe:	b909      	cbnz	r1, 8004904 <__lo0bits+0x20>
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	2210      	movs	r2, #16
 8004904:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004908:	bf04      	itt	eq
 800490a:	0a1b      	lsreq	r3, r3, #8
 800490c:	3208      	addeq	r2, #8
 800490e:	0719      	lsls	r1, r3, #28
 8004910:	bf04      	itt	eq
 8004912:	091b      	lsreq	r3, r3, #4
 8004914:	3204      	addeq	r2, #4
 8004916:	0799      	lsls	r1, r3, #30
 8004918:	bf04      	itt	eq
 800491a:	089b      	lsreq	r3, r3, #2
 800491c:	3202      	addeq	r2, #2
 800491e:	07d9      	lsls	r1, r3, #31
 8004920:	d404      	bmi.n	800492c <__lo0bits+0x48>
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	d101      	bne.n	800492a <__lo0bits+0x46>
 8004926:	2020      	movs	r0, #32
 8004928:	4770      	bx	lr
 800492a:	3201      	adds	r2, #1
 800492c:	6003      	str	r3, [r0, #0]
 800492e:	4610      	mov	r0, r2
 8004930:	4770      	bx	lr
 8004932:	2000      	movs	r0, #0
 8004934:	4770      	bx	lr
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	6003      	str	r3, [r0, #0]
 800493a:	2001      	movs	r0, #1
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <__i2b>:
 8004940:	b510      	push	{r4, lr}
 8004942:	460c      	mov	r4, r1
 8004944:	2101      	movs	r1, #1
 8004946:	f7ff ff3d 	bl	80047c4 <_Balloc>
 800494a:	2201      	movs	r2, #1
 800494c:	6144      	str	r4, [r0, #20]
 800494e:	6102      	str	r2, [r0, #16]
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop

08004954 <__multiply>:
 8004954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	690d      	ldr	r5, [r1, #16]
 800495a:	6917      	ldr	r7, [r2, #16]
 800495c:	42bd      	cmp	r5, r7
 800495e:	b083      	sub	sp, #12
 8004960:	460c      	mov	r4, r1
 8004962:	4616      	mov	r6, r2
 8004964:	da04      	bge.n	8004970 <__multiply+0x1c>
 8004966:	462a      	mov	r2, r5
 8004968:	4634      	mov	r4, r6
 800496a:	463d      	mov	r5, r7
 800496c:	460e      	mov	r6, r1
 800496e:	4617      	mov	r7, r2
 8004970:	68a3      	ldr	r3, [r4, #8]
 8004972:	6861      	ldr	r1, [r4, #4]
 8004974:	eb05 0807 	add.w	r8, r5, r7
 8004978:	4598      	cmp	r8, r3
 800497a:	bfc8      	it	gt
 800497c:	3101      	addgt	r1, #1
 800497e:	f7ff ff21 	bl	80047c4 <_Balloc>
 8004982:	f100 0c14 	add.w	ip, r0, #20
 8004986:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800498a:	45cc      	cmp	ip, r9
 800498c:	9000      	str	r0, [sp, #0]
 800498e:	d205      	bcs.n	800499c <__multiply+0x48>
 8004990:	4663      	mov	r3, ip
 8004992:	2100      	movs	r1, #0
 8004994:	f843 1b04 	str.w	r1, [r3], #4
 8004998:	4599      	cmp	r9, r3
 800499a:	d8fb      	bhi.n	8004994 <__multiply+0x40>
 800499c:	f106 0214 	add.w	r2, r6, #20
 80049a0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80049a4:	f104 0314 	add.w	r3, r4, #20
 80049a8:	4552      	cmp	r2, sl
 80049aa:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 80049ae:	d254      	bcs.n	8004a5a <__multiply+0x106>
 80049b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80049b4:	4699      	mov	r9, r3
 80049b6:	f852 3b04 	ldr.w	r3, [r2], #4
 80049ba:	fa1f fb83 	uxth.w	fp, r3
 80049be:	f1bb 0f00 	cmp.w	fp, #0
 80049c2:	d020      	beq.n	8004a06 <__multiply+0xb2>
 80049c4:	2000      	movs	r0, #0
 80049c6:	464f      	mov	r7, r9
 80049c8:	4666      	mov	r6, ip
 80049ca:	4605      	mov	r5, r0
 80049cc:	e000      	b.n	80049d0 <__multiply+0x7c>
 80049ce:	461e      	mov	r6, r3
 80049d0:	f857 4b04 	ldr.w	r4, [r7], #4
 80049d4:	6830      	ldr	r0, [r6, #0]
 80049d6:	b2a1      	uxth	r1, r4
 80049d8:	b283      	uxth	r3, r0
 80049da:	fb0b 3101 	mla	r1, fp, r1, r3
 80049de:	0c24      	lsrs	r4, r4, #16
 80049e0:	0c00      	lsrs	r0, r0, #16
 80049e2:	194b      	adds	r3, r1, r5
 80049e4:	fb0b 0004 	mla	r0, fp, r4, r0
 80049e8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80049ec:	b299      	uxth	r1, r3
 80049ee:	4633      	mov	r3, r6
 80049f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80049f4:	45be      	cmp	lr, r7
 80049f6:	ea4f 4510 	mov.w	r5, r0, lsr #16
 80049fa:	f843 1b04 	str.w	r1, [r3], #4
 80049fe:	d8e6      	bhi.n	80049ce <__multiply+0x7a>
 8004a00:	6075      	str	r5, [r6, #4]
 8004a02:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8004a06:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8004a0a:	d020      	beq.n	8004a4e <__multiply+0xfa>
 8004a0c:	f8dc 3000 	ldr.w	r3, [ip]
 8004a10:	4667      	mov	r7, ip
 8004a12:	4618      	mov	r0, r3
 8004a14:	464d      	mov	r5, r9
 8004a16:	2100      	movs	r1, #0
 8004a18:	e000      	b.n	8004a1c <__multiply+0xc8>
 8004a1a:	4637      	mov	r7, r6
 8004a1c:	882c      	ldrh	r4, [r5, #0]
 8004a1e:	0c00      	lsrs	r0, r0, #16
 8004a20:	fb0b 0004 	mla	r0, fp, r4, r0
 8004a24:	4401      	add	r1, r0
 8004a26:	b29c      	uxth	r4, r3
 8004a28:	463e      	mov	r6, r7
 8004a2a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8004a2e:	f846 3b04 	str.w	r3, [r6], #4
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f855 4b04 	ldr.w	r4, [r5], #4
 8004a38:	b283      	uxth	r3, r0
 8004a3a:	0c24      	lsrs	r4, r4, #16
 8004a3c:	fb0b 3404 	mla	r4, fp, r4, r3
 8004a40:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8004a44:	45ae      	cmp	lr, r5
 8004a46:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8004a4a:	d8e6      	bhi.n	8004a1a <__multiply+0xc6>
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	4592      	cmp	sl, r2
 8004a50:	f10c 0c04 	add.w	ip, ip, #4
 8004a54:	d8af      	bhi.n	80049b6 <__multiply+0x62>
 8004a56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004a5a:	f1b8 0f00 	cmp.w	r8, #0
 8004a5e:	dd0b      	ble.n	8004a78 <__multiply+0x124>
 8004a60:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8004a64:	f1a9 0904 	sub.w	r9, r9, #4
 8004a68:	b11b      	cbz	r3, 8004a72 <__multiply+0x11e>
 8004a6a:	e005      	b.n	8004a78 <__multiply+0x124>
 8004a6c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8004a70:	b913      	cbnz	r3, 8004a78 <__multiply+0x124>
 8004a72:	f1b8 0801 	subs.w	r8, r8, #1
 8004a76:	d1f9      	bne.n	8004a6c <__multiply+0x118>
 8004a78:	9800      	ldr	r0, [sp, #0]
 8004a7a:	f8c0 8010 	str.w	r8, [r0, #16]
 8004a7e:	b003      	add	sp, #12
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a84 <__pow5mult>:
 8004a84:	f012 0303 	ands.w	r3, r2, #3
 8004a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	4607      	mov	r7, r0
 8004a90:	d12e      	bne.n	8004af0 <__pow5mult+0x6c>
 8004a92:	460e      	mov	r6, r1
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	d01c      	beq.n	8004ad2 <__pow5mult+0x4e>
 8004a98:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8004a9a:	b395      	cbz	r5, 8004b02 <__pow5mult+0x7e>
 8004a9c:	07e3      	lsls	r3, r4, #31
 8004a9e:	f04f 0800 	mov.w	r8, #0
 8004aa2:	d406      	bmi.n	8004ab2 <__pow5mult+0x2e>
 8004aa4:	1064      	asrs	r4, r4, #1
 8004aa6:	d014      	beq.n	8004ad2 <__pow5mult+0x4e>
 8004aa8:	6828      	ldr	r0, [r5, #0]
 8004aaa:	b1a8      	cbz	r0, 8004ad8 <__pow5mult+0x54>
 8004aac:	4605      	mov	r5, r0
 8004aae:	07e3      	lsls	r3, r4, #31
 8004ab0:	d5f8      	bpl.n	8004aa4 <__pow5mult+0x20>
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	f7ff ff4c 	bl	8004954 <__multiply>
 8004abc:	b1b6      	cbz	r6, 8004aec <__pow5mult+0x68>
 8004abe:	6872      	ldr	r2, [r6, #4]
 8004ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac2:	1064      	asrs	r4, r4, #1
 8004ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ac8:	6031      	str	r1, [r6, #0]
 8004aca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8004ace:	4606      	mov	r6, r0
 8004ad0:	d1ea      	bne.n	8004aa8 <__pow5mult+0x24>
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4629      	mov	r1, r5
 8004adc:	4638      	mov	r0, r7
 8004ade:	f7ff ff39 	bl	8004954 <__multiply>
 8004ae2:	6028      	str	r0, [r5, #0]
 8004ae4:	f8c0 8000 	str.w	r8, [r0]
 8004ae8:	4605      	mov	r5, r0
 8004aea:	e7e0      	b.n	8004aae <__pow5mult+0x2a>
 8004aec:	4606      	mov	r6, r0
 8004aee:	e7d9      	b.n	8004aa4 <__pow5mult+0x20>
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	4d0b      	ldr	r5, [pc, #44]	; (8004b20 <__pow5mult+0x9c>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004afa:	f7ff fe93 	bl	8004824 <__multadd>
 8004afe:	4606      	mov	r6, r0
 8004b00:	e7c8      	b.n	8004a94 <__pow5mult+0x10>
 8004b02:	2101      	movs	r1, #1
 8004b04:	4638      	mov	r0, r7
 8004b06:	f7ff fe5d 	bl	80047c4 <_Balloc>
 8004b0a:	f240 2171 	movw	r1, #625	; 0x271
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2300      	movs	r3, #0
 8004b12:	6141      	str	r1, [r0, #20]
 8004b14:	6102      	str	r2, [r0, #16]
 8004b16:	4605      	mov	r5, r0
 8004b18:	64b8      	str	r0, [r7, #72]	; 0x48
 8004b1a:	6003      	str	r3, [r0, #0]
 8004b1c:	e7be      	b.n	8004a9c <__pow5mult+0x18>
 8004b1e:	bf00      	nop
 8004b20:	080083b4 	.word	0x080083b4

08004b24 <__lshift>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	4691      	mov	r9, r2
 8004b2a:	690a      	ldr	r2, [r1, #16]
 8004b2c:	688b      	ldr	r3, [r1, #8]
 8004b2e:	ea4f 1469 	mov.w	r4, r9, asr #5
 8004b32:	eb04 0802 	add.w	r8, r4, r2
 8004b36:	f108 0501 	add.w	r5, r8, #1
 8004b3a:	429d      	cmp	r5, r3
 8004b3c:	460e      	mov	r6, r1
 8004b3e:	4682      	mov	sl, r0
 8004b40:	6849      	ldr	r1, [r1, #4]
 8004b42:	dd04      	ble.n	8004b4e <__lshift+0x2a>
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	429d      	cmp	r5, r3
 8004b48:	f101 0101 	add.w	r1, r1, #1
 8004b4c:	dcfa      	bgt.n	8004b44 <__lshift+0x20>
 8004b4e:	4650      	mov	r0, sl
 8004b50:	f7ff fe38 	bl	80047c4 <_Balloc>
 8004b54:	2c00      	cmp	r4, #0
 8004b56:	f100 0214 	add.w	r2, r0, #20
 8004b5a:	dd38      	ble.n	8004bce <__lshift+0xaa>
 8004b5c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8004b60:	2100      	movs	r1, #0
 8004b62:	f842 1b04 	str.w	r1, [r2], #4
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d1fb      	bne.n	8004b62 <__lshift+0x3e>
 8004b6a:	6934      	ldr	r4, [r6, #16]
 8004b6c:	f106 0114 	add.w	r1, r6, #20
 8004b70:	f019 091f 	ands.w	r9, r9, #31
 8004b74:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8004b78:	d021      	beq.n	8004bbe <__lshift+0x9a>
 8004b7a:	f1c9 0220 	rsb	r2, r9, #32
 8004b7e:	2400      	movs	r4, #0
 8004b80:	680f      	ldr	r7, [r1, #0]
 8004b82:	fa07 fc09 	lsl.w	ip, r7, r9
 8004b86:	ea4c 0404 	orr.w	r4, ip, r4
 8004b8a:	469c      	mov	ip, r3
 8004b8c:	f843 4b04 	str.w	r4, [r3], #4
 8004b90:	f851 4b04 	ldr.w	r4, [r1], #4
 8004b94:	458e      	cmp	lr, r1
 8004b96:	fa24 f402 	lsr.w	r4, r4, r2
 8004b9a:	d8f1      	bhi.n	8004b80 <__lshift+0x5c>
 8004b9c:	f8cc 4004 	str.w	r4, [ip, #4]
 8004ba0:	b10c      	cbz	r4, 8004ba6 <__lshift+0x82>
 8004ba2:	f108 0502 	add.w	r5, r8, #2
 8004ba6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8004baa:	6872      	ldr	r2, [r6, #4]
 8004bac:	3d01      	subs	r5, #1
 8004bae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bb2:	6105      	str	r5, [r0, #16]
 8004bb4:	6031      	str	r1, [r6, #0]
 8004bb6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8004bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	f851 2b04 	ldr.w	r2, [r1], #4
 8004bc4:	f843 2f04 	str.w	r2, [r3, #4]!
 8004bc8:	458e      	cmp	lr, r1
 8004bca:	d8f9      	bhi.n	8004bc0 <__lshift+0x9c>
 8004bcc:	e7eb      	b.n	8004ba6 <__lshift+0x82>
 8004bce:	4613      	mov	r3, r2
 8004bd0:	e7cb      	b.n	8004b6a <__lshift+0x46>
 8004bd2:	bf00      	nop

08004bd4 <__mcmp>:
 8004bd4:	6902      	ldr	r2, [r0, #16]
 8004bd6:	690b      	ldr	r3, [r1, #16]
 8004bd8:	1ad2      	subs	r2, r2, r3
 8004bda:	d112      	bne.n	8004c02 <__mcmp+0x2e>
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	3014      	adds	r0, #20
 8004be0:	3114      	adds	r1, #20
 8004be2:	4419      	add	r1, r3
 8004be4:	b410      	push	{r4}
 8004be6:	4403      	add	r3, r0
 8004be8:	e001      	b.n	8004bee <__mcmp+0x1a>
 8004bea:	4298      	cmp	r0, r3
 8004bec:	d20b      	bcs.n	8004c06 <__mcmp+0x32>
 8004bee:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004bf2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004bf6:	4294      	cmp	r4, r2
 8004bf8:	d0f7      	beq.n	8004bea <__mcmp+0x16>
 8004bfa:	d307      	bcc.n	8004c0c <__mcmp+0x38>
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	bc10      	pop	{r4}
 8004c00:	4770      	bx	lr
 8004c02:	4610      	mov	r0, r2
 8004c04:	4770      	bx	lr
 8004c06:	2000      	movs	r0, #0
 8004c08:	bc10      	pop	{r4}
 8004c0a:	4770      	bx	lr
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c10:	e7f5      	b.n	8004bfe <__mcmp+0x2a>
 8004c12:	bf00      	nop

08004c14 <__mdiff>:
 8004c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c18:	690b      	ldr	r3, [r1, #16]
 8004c1a:	460f      	mov	r7, r1
 8004c1c:	6911      	ldr	r1, [r2, #16]
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	4690      	mov	r8, r2
 8004c24:	d117      	bne.n	8004c56 <__mdiff+0x42>
 8004c26:	0089      	lsls	r1, r1, #2
 8004c28:	f107 0214 	add.w	r2, r7, #20
 8004c2c:	f108 0514 	add.w	r5, r8, #20
 8004c30:	1853      	adds	r3, r2, r1
 8004c32:	4429      	add	r1, r5
 8004c34:	e001      	b.n	8004c3a <__mdiff+0x26>
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d25e      	bcs.n	8004cf8 <__mdiff+0xe4>
 8004c3a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8004c3e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004c42:	42a6      	cmp	r6, r4
 8004c44:	d0f7      	beq.n	8004c36 <__mdiff+0x22>
 8004c46:	d260      	bcs.n	8004d0a <__mdiff+0xf6>
 8004c48:	463b      	mov	r3, r7
 8004c4a:	4614      	mov	r4, r2
 8004c4c:	4647      	mov	r7, r8
 8004c4e:	f04f 0901 	mov.w	r9, #1
 8004c52:	4698      	mov	r8, r3
 8004c54:	e006      	b.n	8004c64 <__mdiff+0x50>
 8004c56:	db5d      	blt.n	8004d14 <__mdiff+0x100>
 8004c58:	f107 0514 	add.w	r5, r7, #20
 8004c5c:	f102 0414 	add.w	r4, r2, #20
 8004c60:	f04f 0900 	mov.w	r9, #0
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	f7ff fdad 	bl	80047c4 <_Balloc>
 8004c6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004c6e:	693e      	ldr	r6, [r7, #16]
 8004c70:	f8c0 900c 	str.w	r9, [r0, #12]
 8004c74:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8004c78:	46a6      	mov	lr, r4
 8004c7a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8004c7e:	f100 0414 	add.w	r4, r0, #20
 8004c82:	2300      	movs	r3, #0
 8004c84:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004c88:	f855 8b04 	ldr.w	r8, [r5], #4
 8004c8c:	b28a      	uxth	r2, r1
 8004c8e:	fa13 f388 	uxtah	r3, r3, r8
 8004c92:	0c09      	lsrs	r1, r1, #16
 8004c94:	1a9a      	subs	r2, r3, r2
 8004c96:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8004c9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ca4:	45f4      	cmp	ip, lr
 8004ca6:	f844 2b04 	str.w	r2, [r4], #4
 8004caa:	ea4f 4323 	mov.w	r3, r3, asr #16
 8004cae:	d8e9      	bhi.n	8004c84 <__mdiff+0x70>
 8004cb0:	42af      	cmp	r7, r5
 8004cb2:	d917      	bls.n	8004ce4 <__mdiff+0xd0>
 8004cb4:	46a4      	mov	ip, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f851 eb04 	ldr.w	lr, [r1], #4
 8004cbc:	fa13 f28e 	uxtah	r2, r3, lr
 8004cc0:	1413      	asrs	r3, r2, #16
 8004cc2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ccc:	428f      	cmp	r7, r1
 8004cce:	f84c 2b04 	str.w	r2, [ip], #4
 8004cd2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8004cd6:	d8ef      	bhi.n	8004cb8 <__mdiff+0xa4>
 8004cd8:	43ed      	mvns	r5, r5
 8004cda:	443d      	add	r5, r7
 8004cdc:	f025 0503 	bic.w	r5, r5, #3
 8004ce0:	3504      	adds	r5, #4
 8004ce2:	442c      	add	r4, r5
 8004ce4:	3c04      	subs	r4, #4
 8004ce6:	b922      	cbnz	r2, 8004cf2 <__mdiff+0xde>
 8004ce8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8004cec:	3e01      	subs	r6, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0fa      	beq.n	8004ce8 <__mdiff+0xd4>
 8004cf2:	6106      	str	r6, [r0, #16]
 8004cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	f7ff fd63 	bl	80047c4 <_Balloc>
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2300      	movs	r3, #0
 8004d02:	6102      	str	r2, [r0, #16]
 8004d04:	6143      	str	r3, [r0, #20]
 8004d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d0a:	462c      	mov	r4, r5
 8004d0c:	f04f 0900 	mov.w	r9, #0
 8004d10:	4615      	mov	r5, r2
 8004d12:	e7a7      	b.n	8004c64 <__mdiff+0x50>
 8004d14:	463b      	mov	r3, r7
 8004d16:	f107 0414 	add.w	r4, r7, #20
 8004d1a:	f108 0514 	add.w	r5, r8, #20
 8004d1e:	4647      	mov	r7, r8
 8004d20:	f04f 0901 	mov.w	r9, #1
 8004d24:	4698      	mov	r8, r3
 8004d26:	e79d      	b.n	8004c64 <__mdiff+0x50>

08004d28 <__d2b>:
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	2101      	movs	r1, #1
 8004d30:	461c      	mov	r4, r3
 8004d32:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8004d36:	4615      	mov	r5, r2
 8004d38:	9e08      	ldr	r6, [sp, #32]
 8004d3a:	f7ff fd43 	bl	80047c4 <_Balloc>
 8004d3e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004d42:	4680      	mov	r8, r0
 8004d44:	b10f      	cbz	r7, 8004d4a <__d2b+0x22>
 8004d46:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8004d4a:	9401      	str	r4, [sp, #4]
 8004d4c:	b31d      	cbz	r5, 8004d96 <__d2b+0x6e>
 8004d4e:	a802      	add	r0, sp, #8
 8004d50:	f840 5d08 	str.w	r5, [r0, #-8]!
 8004d54:	f7ff fdc6 	bl	80048e4 <__lo0bits>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d134      	bne.n	8004dc6 <__d2b+0x9e>
 8004d5c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8004d60:	f8c8 2014 	str.w	r2, [r8, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2101      	moveq	r1, #1
 8004d6a:	2102      	movne	r1, #2
 8004d6c:	f8c8 3018 	str.w	r3, [r8, #24]
 8004d70:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d74:	b9df      	cbnz	r7, 8004dae <__d2b+0x86>
 8004d76:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 8004d7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d7e:	6030      	str	r0, [r6, #0]
 8004d80:	6918      	ldr	r0, [r3, #16]
 8004d82:	f7ff fd8f 	bl	80048a4 <__hi0bits>
 8004d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004d8c:	6018      	str	r0, [r3, #0]
 8004d8e:	4640      	mov	r0, r8
 8004d90:	b002      	add	sp, #8
 8004d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d96:	a801      	add	r0, sp, #4
 8004d98:	f7ff fda4 	bl	80048e4 <__lo0bits>
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	f8c8 3014 	str.w	r3, [r8, #20]
 8004da2:	2101      	movs	r1, #1
 8004da4:	3020      	adds	r0, #32
 8004da6:	f8c8 1010 	str.w	r1, [r8, #16]
 8004daa:	2f00      	cmp	r7, #0
 8004dac:	d0e3      	beq.n	8004d76 <__d2b+0x4e>
 8004dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8004db4:	4407      	add	r7, r0
 8004db6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004dba:	6037      	str	r7, [r6, #0]
 8004dbc:	6018      	str	r0, [r3, #0]
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	b002      	add	sp, #8
 8004dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8004dca:	f1c0 0120 	rsb	r1, r0, #32
 8004dce:	fa03 f101 	lsl.w	r1, r3, r1
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	40c3      	lsrs	r3, r0
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	f8c8 2014 	str.w	r2, [r8, #20]
 8004ddc:	e7c2      	b.n	8004d64 <__d2b+0x3c>
 8004dde:	bf00      	nop

08004de0 <__fpclassifyd>:
 8004de0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8004de4:	b410      	push	{r4}
 8004de6:	d007      	beq.n	8004df8 <__fpclassifyd+0x18>
 8004de8:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <__fpclassifyd+0x4c>)
 8004dea:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8004dee:	4294      	cmp	r4, r2
 8004df0:	d806      	bhi.n	8004e00 <__fpclassifyd+0x20>
 8004df2:	2004      	movs	r0, #4
 8004df4:	bc10      	pop	{r4}
 8004df6:	4770      	bx	lr
 8004df8:	b910      	cbnz	r0, 8004e00 <__fpclassifyd+0x20>
 8004dfa:	2002      	movs	r0, #2
 8004dfc:	bc10      	pop	{r4}
 8004dfe:	4770      	bx	lr
 8004e00:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 8004e04:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <__fpclassifyd+0x4c>)
 8004e06:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	d9f1      	bls.n	8004df2 <__fpclassifyd+0x12>
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e12:	d201      	bcs.n	8004e18 <__fpclassifyd+0x38>
 8004e14:	2003      	movs	r0, #3
 8004e16:	e7ed      	b.n	8004df4 <__fpclassifyd+0x14>
 8004e18:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <__fpclassifyd+0x50>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d001      	beq.n	8004e22 <__fpclassifyd+0x42>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e7e8      	b.n	8004df4 <__fpclassifyd+0x14>
 8004e22:	fab0 f080 	clz	r0, r0
 8004e26:	0940      	lsrs	r0, r0, #5
 8004e28:	e7e4      	b.n	8004df4 <__fpclassifyd+0x14>
 8004e2a:	bf00      	nop
 8004e2c:	7fdfffff 	.word	0x7fdfffff
 8004e30:	7ff00000 	.word	0x7ff00000

08004e34 <_sbrk_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4c07      	ldr	r4, [pc, #28]	; (8004e54 <_sbrk_r+0x20>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	f002 fa7c 	bl	800733c <_sbrk>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d000      	beq.n	8004e4a <_sbrk_r+0x16>
 8004e48:	bd38      	pop	{r3, r4, r5, pc}
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0fb      	beq.n	8004e48 <_sbrk_r+0x14>
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	20000b3c 	.word	0x20000b3c

08004e58 <__sread>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	f000 fba6 	bl	80055b0 <_read_r>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	db03      	blt.n	8004e70 <__sread+0x18>
 8004e68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e6a:	4403      	add	r3, r0
 8004e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8004e6e:	bd10      	pop	{r4, pc}
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop

08004e7c <__swrite>:
 8004e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e80:	4616      	mov	r6, r2
 8004e82:	898a      	ldrh	r2, [r1, #12]
 8004e84:	461f      	mov	r7, r3
 8004e86:	05d3      	lsls	r3, r2, #23
 8004e88:	460c      	mov	r4, r1
 8004e8a:	4605      	mov	r5, r0
 8004e8c:	d506      	bpl.n	8004e9c <__swrite+0x20>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2302      	movs	r3, #2
 8004e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e96:	f000 fb11 	bl	80054bc <_lseek_r>
 8004e9a:	89a2      	ldrh	r2, [r4, #12]
 8004e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ea4:	81a2      	strh	r2, [r4, #12]
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	4628      	mov	r0, r5
 8004eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb0:	f000 b85a 	b.w	8004f68 <_write_r>

08004eb4 <__sseek>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebc:	f000 fafe 	bl	80054bc <_lseek_r>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	1c42      	adds	r2, r0, #1
 8004ec4:	bf0e      	itee	eq
 8004ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ece:	6520      	strne	r0, [r4, #80]	; 0x50
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <__sclose>:
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	f000 b88c 	b.w	8004ff4 <_close_r>

08004edc <__sprint_r.part.0>:
 8004edc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee2:	049c      	lsls	r4, r3, #18
 8004ee4:	4692      	mov	sl, r2
 8004ee6:	d52c      	bpl.n	8004f42 <__sprint_r.part.0+0x66>
 8004ee8:	6893      	ldr	r3, [r2, #8]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	b33b      	cbz	r3, 8004f3e <__sprint_r.part.0+0x62>
 8004eee:	460f      	mov	r7, r1
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	f102 0908 	add.w	r9, r2, #8
 8004ef6:	e919 0060 	ldmdb	r9, {r5, r6}
 8004efa:	08b6      	lsrs	r6, r6, #2
 8004efc:	d017      	beq.n	8004f2e <__sprint_r.part.0+0x52>
 8004efe:	3d04      	subs	r5, #4
 8004f00:	2400      	movs	r4, #0
 8004f02:	e001      	b.n	8004f08 <__sprint_r.part.0+0x2c>
 8004f04:	42a6      	cmp	r6, r4
 8004f06:	d010      	beq.n	8004f2a <__sprint_r.part.0+0x4e>
 8004f08:	463a      	mov	r2, r7
 8004f0a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f000 f91c 	bl	800514c <_fputwc_r>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	f104 0401 	add.w	r4, r4, #1
 8004f1a:	d1f3      	bne.n	8004f04 <__sprint_r.part.0+0x28>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8ca 3008 	str.w	r3, [sl, #8]
 8004f22:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004f2e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8004f32:	f8ca 3008 	str.w	r3, [sl, #8]
 8004f36:	f109 0908 	add.w	r9, r9, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1db      	bne.n	8004ef6 <__sprint_r.part.0+0x1a>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e7ec      	b.n	8004f1c <__sprint_r.part.0+0x40>
 8004f42:	f000 f929 	bl	8005198 <__sfvwrite_r>
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8ca 3008 	str.w	r3, [sl, #8]
 8004f4c:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004f54 <__sprint_r>:
 8004f54:	6893      	ldr	r3, [r2, #8]
 8004f56:	b10b      	cbz	r3, 8004f5c <__sprint_r+0x8>
 8004f58:	f7ff bfc0 	b.w	8004edc <__sprint_r.part.0>
 8004f5c:	b410      	push	{r4}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	6053      	str	r3, [r2, #4]
 8004f62:	bc10      	pop	{r4}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop

08004f68 <_write_r>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	4c08      	ldr	r4, [pc, #32]	; (8004f90 <_write_r+0x28>)
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4606      	mov	r6, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	4628      	mov	r0, r5
 8004f76:	2300      	movs	r3, #0
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	f002 f9f9 	bl	8007370 <_write>
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	d000      	beq.n	8004f84 <_write_r+0x1c>
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0fb      	beq.n	8004f82 <_write_r+0x1a>
 8004f8a:	6033      	str	r3, [r6, #0]
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000b3c 	.word	0x20000b3c

08004f94 <_calloc_r>:
 8004f94:	b510      	push	{r4, lr}
 8004f96:	fb02 f101 	mul.w	r1, r2, r1
 8004f9a:	f7ff f909 	bl	80041b0 <_malloc_r>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	b1d8      	cbz	r0, 8004fda <_calloc_r+0x46>
 8004fa2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004fa6:	f022 0203 	bic.w	r2, r2, #3
 8004faa:	3a04      	subs	r2, #4
 8004fac:	2a24      	cmp	r2, #36	; 0x24
 8004fae:	d818      	bhi.n	8004fe2 <_calloc_r+0x4e>
 8004fb0:	2a13      	cmp	r2, #19
 8004fb2:	d914      	bls.n	8004fde <_calloc_r+0x4a>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2a1b      	cmp	r2, #27
 8004fb8:	6003      	str	r3, [r0, #0]
 8004fba:	6043      	str	r3, [r0, #4]
 8004fbc:	d916      	bls.n	8004fec <_calloc_r+0x58>
 8004fbe:	2a24      	cmp	r2, #36	; 0x24
 8004fc0:	6083      	str	r3, [r0, #8]
 8004fc2:	60c3      	str	r3, [r0, #12]
 8004fc4:	bf11      	iteee	ne
 8004fc6:	f100 0210 	addne.w	r2, r0, #16
 8004fca:	6103      	streq	r3, [r0, #16]
 8004fcc:	6143      	streq	r3, [r0, #20]
 8004fce:	f100 0218 	addeq.w	r2, r0, #24
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	6053      	str	r3, [r2, #4]
 8004fd8:	6093      	str	r3, [r2, #8]
 8004fda:	4620      	mov	r0, r4
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	4602      	mov	r2, r0
 8004fe0:	e7f7      	b.n	8004fd2 <_calloc_r+0x3e>
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	f7ff fb9c 	bl	8004720 <memset>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	bd10      	pop	{r4, pc}
 8004fec:	f100 0208 	add.w	r2, r0, #8
 8004ff0:	e7ef      	b.n	8004fd2 <_calloc_r+0x3e>
 8004ff2:	bf00      	nop

08004ff4 <_close_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4c07      	ldr	r4, [pc, #28]	; (8005014 <_close_r+0x20>)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	f002 f9c4 	bl	800738c <_close>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d000      	beq.n	800500a <_close_r+0x16>
 8005008:	bd38      	pop	{r3, r4, r5, pc}
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0fb      	beq.n	8005008 <_close_r+0x14>
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000b3c 	.word	0x20000b3c

08005018 <_fclose_r>:
 8005018:	2900      	cmp	r1, #0
 800501a:	d03d      	beq.n	8005098 <_fclose_r+0x80>
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4605      	mov	r5, r0
 8005020:	460c      	mov	r4, r1
 8005022:	b108      	cbz	r0, 8005028 <_fclose_r+0x10>
 8005024:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005026:	b37b      	cbz	r3, 8005088 <_fclose_r+0x70>
 8005028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502c:	b90b      	cbnz	r3, 8005032 <_fclose_r+0x1a>
 800502e:	2000      	movs	r0, #0
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	4621      	mov	r1, r4
 8005034:	4628      	mov	r0, r5
 8005036:	f7fe fd9b 	bl	8003b70 <__sflush_r>
 800503a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800503c:	4606      	mov	r6, r0
 800503e:	b133      	cbz	r3, 800504e <_fclose_r+0x36>
 8005040:	69e1      	ldr	r1, [r4, #28]
 8005042:	4628      	mov	r0, r5
 8005044:	4798      	blx	r3
 8005046:	2800      	cmp	r0, #0
 8005048:	bfb8      	it	lt
 800504a:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	d41c      	bmi.n	800508e <_fclose_r+0x76>
 8005054:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005056:	b141      	cbz	r1, 800506a <_fclose_r+0x52>
 8005058:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800505c:	4299      	cmp	r1, r3
 800505e:	d002      	beq.n	8005066 <_fclose_r+0x4e>
 8005060:	4628      	mov	r0, r5
 8005062:	f7fe ff15 	bl	8003e90 <_free_r>
 8005066:	2300      	movs	r3, #0
 8005068:	6323      	str	r3, [r4, #48]	; 0x30
 800506a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800506c:	b121      	cbz	r1, 8005078 <_fclose_r+0x60>
 800506e:	4628      	mov	r0, r5
 8005070:	f7fe ff0e 	bl	8003e90 <_free_r>
 8005074:	2300      	movs	r3, #0
 8005076:	6463      	str	r3, [r4, #68]	; 0x44
 8005078:	f7fe feb8 	bl	8003dec <__sfp_lock_acquire>
 800507c:	2300      	movs	r3, #0
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	f7fe feb6 	bl	8003df0 <__sfp_lock_release>
 8005084:	4630      	mov	r0, r6
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f7fe feaa 	bl	8003de0 <__sinit>
 800508c:	e7cc      	b.n	8005028 <_fclose_r+0x10>
 800508e:	6921      	ldr	r1, [r4, #16]
 8005090:	4628      	mov	r0, r5
 8005092:	f7fe fefd 	bl	8003e90 <_free_r>
 8005096:	e7dd      	b.n	8005054 <_fclose_r+0x3c>
 8005098:	2000      	movs	r0, #0
 800509a:	4770      	bx	lr

0800509c <__fputwc>:
 800509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	4607      	mov	r7, r0
 80050a4:	460e      	mov	r6, r1
 80050a6:	4614      	mov	r4, r2
 80050a8:	f7ff f808 	bl	80040bc <__locale_mb_cur_max>
 80050ac:	2801      	cmp	r0, #1
 80050ae:	d041      	beq.n	8005134 <__fputwc+0x98>
 80050b0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80050b4:	4632      	mov	r2, r6
 80050b6:	a901      	add	r1, sp, #4
 80050b8:	4638      	mov	r0, r7
 80050ba:	f000 fcd3 	bl	8005a64 <_wcrtomb_r>
 80050be:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80050c2:	4680      	mov	r8, r0
 80050c4:	d02f      	beq.n	8005126 <__fputwc+0x8a>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d03c      	beq.n	8005144 <__fputwc+0xa8>
 80050ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80050ce:	2500      	movs	r5, #0
 80050d0:	e009      	b.n	80050e6 <__fputwc+0x4a>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	7019      	strb	r1, [r3, #0]
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	3501      	adds	r5, #1
 80050de:	45a8      	cmp	r8, r5
 80050e0:	d930      	bls.n	8005144 <__fputwc+0xa8>
 80050e2:	ab01      	add	r3, sp, #4
 80050e4:	5d59      	ldrb	r1, [r3, r5]
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	60a3      	str	r3, [r4, #8]
 80050ee:	daf0      	bge.n	80050d2 <__fputwc+0x36>
 80050f0:	69a2      	ldr	r2, [r4, #24]
 80050f2:	4293      	cmp	r3, r2
 80050f4:	db07      	blt.n	8005106 <__fputwc+0x6a>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	7019      	strb	r1, [r3, #0]
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	7819      	ldrb	r1, [r3, #0]
 80050fe:	290a      	cmp	r1, #10
 8005100:	f103 0301 	add.w	r3, r3, #1
 8005104:	d1e9      	bne.n	80050da <__fputwc+0x3e>
 8005106:	4622      	mov	r2, r4
 8005108:	4638      	mov	r0, r7
 800510a:	f000 fc57 	bl	80059bc <__swbuf_r>
 800510e:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8005112:	fab0 f080 	clz	r0, r0
 8005116:	0940      	lsrs	r0, r0, #5
 8005118:	2800      	cmp	r0, #0
 800511a:	d0df      	beq.n	80050dc <__fputwc+0x40>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005120:	b002      	add	sp, #8
 8005122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	b002      	add	sp, #8
 8005130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005134:	1e73      	subs	r3, r6, #1
 8005136:	2bfe      	cmp	r3, #254	; 0xfe
 8005138:	d8ba      	bhi.n	80050b0 <__fputwc+0x14>
 800513a:	b2f1      	uxtb	r1, r6
 800513c:	4680      	mov	r8, r0
 800513e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005142:	e7c4      	b.n	80050ce <__fputwc+0x32>
 8005144:	4630      	mov	r0, r6
 8005146:	b002      	add	sp, #8
 8005148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800514c <_fputwc_r>:
 800514c:	8993      	ldrh	r3, [r2, #12]
 800514e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005152:	d10a      	bne.n	800516a <_fputwc_r+0x1e>
 8005154:	b410      	push	{r4}
 8005156:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800515c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8005160:	6654      	str	r4, [r2, #100]	; 0x64
 8005162:	8193      	strh	r3, [r2, #12]
 8005164:	bc10      	pop	{r4}
 8005166:	f7ff bf99 	b.w	800509c <__fputwc>
 800516a:	f7ff bf97 	b.w	800509c <__fputwc>
 800516e:	bf00      	nop

08005170 <_fstat_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	460b      	mov	r3, r1
 8005174:	4c07      	ldr	r4, [pc, #28]	; (8005194 <_fstat_r+0x24>)
 8005176:	4605      	mov	r5, r0
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	2300      	movs	r3, #0
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	f002 f907 	bl	8007392 <_fstat>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d000      	beq.n	800518a <_fstat_r+0x1a>
 8005188:	bd38      	pop	{r3, r4, r5, pc}
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0fb      	beq.n	8005188 <_fstat_r+0x18>
 8005190:	602b      	str	r3, [r5, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20000b3c 	.word	0x20000b3c

08005198 <__sfvwrite_r>:
 8005198:	6893      	ldr	r3, [r2, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d076      	beq.n	800528c <__sfvwrite_r+0xf4>
 800519e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a2:	898b      	ldrh	r3, [r1, #12]
 80051a4:	b085      	sub	sp, #20
 80051a6:	460c      	mov	r4, r1
 80051a8:	0719      	lsls	r1, r3, #28
 80051aa:	9001      	str	r0, [sp, #4]
 80051ac:	4616      	mov	r6, r2
 80051ae:	d529      	bpl.n	8005204 <__sfvwrite_r+0x6c>
 80051b0:	6922      	ldr	r2, [r4, #16]
 80051b2:	b33a      	cbz	r2, 8005204 <__sfvwrite_r+0x6c>
 80051b4:	f003 0802 	and.w	r8, r3, #2
 80051b8:	fa1f f088 	uxth.w	r0, r8
 80051bc:	6835      	ldr	r5, [r6, #0]
 80051be:	2800      	cmp	r0, #0
 80051c0:	d02f      	beq.n	8005222 <__sfvwrite_r+0x8a>
 80051c2:	f04f 0900 	mov.w	r9, #0
 80051c6:	4fb3      	ldr	r7, [pc, #716]	; (8005494 <__sfvwrite_r+0x2fc>)
 80051c8:	46c8      	mov	r8, r9
 80051ca:	46b2      	mov	sl, r6
 80051cc:	45b8      	cmp	r8, r7
 80051ce:	4643      	mov	r3, r8
 80051d0:	464a      	mov	r2, r9
 80051d2:	bf28      	it	cs
 80051d4:	463b      	movcs	r3, r7
 80051d6:	9801      	ldr	r0, [sp, #4]
 80051d8:	f1b8 0f00 	cmp.w	r8, #0
 80051dc:	d050      	beq.n	8005280 <__sfvwrite_r+0xe8>
 80051de:	69e1      	ldr	r1, [r4, #28]
 80051e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051e2:	47b0      	blx	r6
 80051e4:	2800      	cmp	r0, #0
 80051e6:	dd71      	ble.n	80052cc <__sfvwrite_r+0x134>
 80051e8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80051ec:	1a1b      	subs	r3, r3, r0
 80051ee:	4481      	add	r9, r0
 80051f0:	ebc0 0808 	rsb	r8, r0, r8
 80051f4:	f8ca 3008 	str.w	r3, [sl, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e7      	bne.n	80051cc <__sfvwrite_r+0x34>
 80051fc:	2000      	movs	r0, #0
 80051fe:	b005      	add	sp, #20
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	4621      	mov	r1, r4
 8005206:	9801      	ldr	r0, [sp, #4]
 8005208:	f7fd fc90 	bl	8002b2c <__swsetup_r>
 800520c:	2800      	cmp	r0, #0
 800520e:	f040 8139 	bne.w	8005484 <__sfvwrite_r+0x2ec>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	6835      	ldr	r5, [r6, #0]
 8005216:	f003 0802 	and.w	r8, r3, #2
 800521a:	fa1f f088 	uxth.w	r0, r8
 800521e:	2800      	cmp	r0, #0
 8005220:	d1cf      	bne.n	80051c2 <__sfvwrite_r+0x2a>
 8005222:	f013 0901 	ands.w	r9, r3, #1
 8005226:	d15a      	bne.n	80052de <__sfvwrite_r+0x146>
 8005228:	464f      	mov	r7, r9
 800522a:	9602      	str	r6, [sp, #8]
 800522c:	b31f      	cbz	r7, 8005276 <__sfvwrite_r+0xde>
 800522e:	059a      	lsls	r2, r3, #22
 8005230:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005234:	d52c      	bpl.n	8005290 <__sfvwrite_r+0xf8>
 8005236:	4547      	cmp	r7, r8
 8005238:	46c2      	mov	sl, r8
 800523a:	f0c0 80a3 	bcc.w	8005384 <__sfvwrite_r+0x1ec>
 800523e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8005242:	f040 80b0 	bne.w	80053a6 <__sfvwrite_r+0x20e>
 8005246:	6820      	ldr	r0, [r4, #0]
 8005248:	4652      	mov	r2, sl
 800524a:	4649      	mov	r1, r9
 800524c:	f000 f94c 	bl	80054e8 <memmove>
 8005250:	68a0      	ldr	r0, [r4, #8]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	ebc8 0000 	rsb	r0, r8, r0
 8005258:	4453      	add	r3, sl
 800525a:	60a0      	str	r0, [r4, #8]
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	4638      	mov	r0, r7
 8005260:	9a02      	ldr	r2, [sp, #8]
 8005262:	6893      	ldr	r3, [r2, #8]
 8005264:	1a1b      	subs	r3, r3, r0
 8005266:	4481      	add	r9, r0
 8005268:	1a3f      	subs	r7, r7, r0
 800526a:	6093      	str	r3, [r2, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0c5      	beq.n	80051fc <__sfvwrite_r+0x64>
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	2f00      	cmp	r7, #0
 8005274:	d1db      	bne.n	800522e <__sfvwrite_r+0x96>
 8005276:	f8d5 9000 	ldr.w	r9, [r5]
 800527a:	686f      	ldr	r7, [r5, #4]
 800527c:	3508      	adds	r5, #8
 800527e:	e7d5      	b.n	800522c <__sfvwrite_r+0x94>
 8005280:	f8d5 9000 	ldr.w	r9, [r5]
 8005284:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005288:	3508      	adds	r5, #8
 800528a:	e79f      	b.n	80051cc <__sfvwrite_r+0x34>
 800528c:	2000      	movs	r0, #0
 800528e:	4770      	bx	lr
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	6923      	ldr	r3, [r4, #16]
 8005294:	4298      	cmp	r0, r3
 8005296:	d803      	bhi.n	80052a0 <__sfvwrite_r+0x108>
 8005298:	6961      	ldr	r1, [r4, #20]
 800529a:	428f      	cmp	r7, r1
 800529c:	f080 80b6 	bcs.w	800540c <__sfvwrite_r+0x274>
 80052a0:	45b8      	cmp	r8, r7
 80052a2:	bf28      	it	cs
 80052a4:	46b8      	movcs	r8, r7
 80052a6:	4642      	mov	r2, r8
 80052a8:	4649      	mov	r1, r9
 80052aa:	f000 f91d 	bl	80054e8 <memmove>
 80052ae:	68a3      	ldr	r3, [r4, #8]
 80052b0:	6822      	ldr	r2, [r4, #0]
 80052b2:	ebc8 0303 	rsb	r3, r8, r3
 80052b6:	4442      	add	r2, r8
 80052b8:	60a3      	str	r3, [r4, #8]
 80052ba:	6022      	str	r2, [r4, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d148      	bne.n	8005352 <__sfvwrite_r+0x1ba>
 80052c0:	4621      	mov	r1, r4
 80052c2:	9801      	ldr	r0, [sp, #4]
 80052c4:	f7fe fcf8 	bl	8003cb8 <_fflush_r>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d042      	beq.n	8005352 <__sfvwrite_r+0x1ba>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	b005      	add	sp, #20
 80052da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052de:	4680      	mov	r8, r0
 80052e0:	9002      	str	r0, [sp, #8]
 80052e2:	4682      	mov	sl, r0
 80052e4:	4681      	mov	r9, r0
 80052e6:	f1b9 0f00 	cmp.w	r9, #0
 80052ea:	d02a      	beq.n	8005342 <__sfvwrite_r+0x1aa>
 80052ec:	9b02      	ldr	r3, [sp, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04c      	beq.n	800538c <__sfvwrite_r+0x1f4>
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	6962      	ldr	r2, [r4, #20]
 80052f8:	45c8      	cmp	r8, r9
 80052fa:	46c3      	mov	fp, r8
 80052fc:	bf28      	it	cs
 80052fe:	46cb      	movcs	fp, r9
 8005300:	4298      	cmp	r0, r3
 8005302:	465f      	mov	r7, fp
 8005304:	d904      	bls.n	8005310 <__sfvwrite_r+0x178>
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	4413      	add	r3, r2
 800530a:	459b      	cmp	fp, r3
 800530c:	f300 8090 	bgt.w	8005430 <__sfvwrite_r+0x298>
 8005310:	4593      	cmp	fp, r2
 8005312:	db20      	blt.n	8005356 <__sfvwrite_r+0x1be>
 8005314:	4613      	mov	r3, r2
 8005316:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005318:	69e1      	ldr	r1, [r4, #28]
 800531a:	9801      	ldr	r0, [sp, #4]
 800531c:	4652      	mov	r2, sl
 800531e:	47b8      	blx	r7
 8005320:	1e07      	subs	r7, r0, #0
 8005322:	ddd3      	ble.n	80052cc <__sfvwrite_r+0x134>
 8005324:	ebb8 0807 	subs.w	r8, r8, r7
 8005328:	d023      	beq.n	8005372 <__sfvwrite_r+0x1da>
 800532a:	68b3      	ldr	r3, [r6, #8]
 800532c:	1bdb      	subs	r3, r3, r7
 800532e:	44ba      	add	sl, r7
 8005330:	ebc7 0909 	rsb	r9, r7, r9
 8005334:	60b3      	str	r3, [r6, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f43f af60 	beq.w	80051fc <__sfvwrite_r+0x64>
 800533c:	f1b9 0f00 	cmp.w	r9, #0
 8005340:	d1d4      	bne.n	80052ec <__sfvwrite_r+0x154>
 8005342:	2300      	movs	r3, #0
 8005344:	f8d5 a000 	ldr.w	sl, [r5]
 8005348:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	3508      	adds	r5, #8
 8005350:	e7c9      	b.n	80052e6 <__sfvwrite_r+0x14e>
 8005352:	4640      	mov	r0, r8
 8005354:	e784      	b.n	8005260 <__sfvwrite_r+0xc8>
 8005356:	465a      	mov	r2, fp
 8005358:	4651      	mov	r1, sl
 800535a:	f000 f8c5 	bl	80054e8 <memmove>
 800535e:	68a2      	ldr	r2, [r4, #8]
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	ebcb 0202 	rsb	r2, fp, r2
 8005366:	445b      	add	r3, fp
 8005368:	ebb8 0807 	subs.w	r8, r8, r7
 800536c:	60a2      	str	r2, [r4, #8]
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	d1db      	bne.n	800532a <__sfvwrite_r+0x192>
 8005372:	4621      	mov	r1, r4
 8005374:	9801      	ldr	r0, [sp, #4]
 8005376:	f7fe fc9f 	bl	8003cb8 <_fflush_r>
 800537a:	2800      	cmp	r0, #0
 800537c:	d1a6      	bne.n	80052cc <__sfvwrite_r+0x134>
 800537e:	f8cd 8008 	str.w	r8, [sp, #8]
 8005382:	e7d2      	b.n	800532a <__sfvwrite_r+0x192>
 8005384:	6820      	ldr	r0, [r4, #0]
 8005386:	46b8      	mov	r8, r7
 8005388:	46ba      	mov	sl, r7
 800538a:	e75d      	b.n	8005248 <__sfvwrite_r+0xb0>
 800538c:	464a      	mov	r2, r9
 800538e:	210a      	movs	r1, #10
 8005390:	4650      	mov	r0, sl
 8005392:	f7fa ff35 	bl	8000200 <memchr>
 8005396:	2800      	cmp	r0, #0
 8005398:	d06f      	beq.n	800547a <__sfvwrite_r+0x2e2>
 800539a:	3001      	adds	r0, #1
 800539c:	2301      	movs	r3, #1
 800539e:	ebca 0800 	rsb	r8, sl, r0
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	e7a5      	b.n	80052f2 <__sfvwrite_r+0x15a>
 80053a6:	6962      	ldr	r2, [r4, #20]
 80053a8:	6820      	ldr	r0, [r4, #0]
 80053aa:	6921      	ldr	r1, [r4, #16]
 80053ac:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 80053b0:	ebc1 0a00 	rsb	sl, r1, r0
 80053b4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80053b8:	f10a 0001 	add.w	r0, sl, #1
 80053bc:	ea4f 0868 	mov.w	r8, r8, asr #1
 80053c0:	4438      	add	r0, r7
 80053c2:	4540      	cmp	r0, r8
 80053c4:	4642      	mov	r2, r8
 80053c6:	bf84      	itt	hi
 80053c8:	4680      	movhi	r8, r0
 80053ca:	4642      	movhi	r2, r8
 80053cc:	055b      	lsls	r3, r3, #21
 80053ce:	d542      	bpl.n	8005456 <__sfvwrite_r+0x2be>
 80053d0:	4611      	mov	r1, r2
 80053d2:	9801      	ldr	r0, [sp, #4]
 80053d4:	f7fe feec 	bl	80041b0 <_malloc_r>
 80053d8:	4683      	mov	fp, r0
 80053da:	2800      	cmp	r0, #0
 80053dc:	d055      	beq.n	800548a <__sfvwrite_r+0x2f2>
 80053de:	4652      	mov	r2, sl
 80053e0:	6921      	ldr	r1, [r4, #16]
 80053e2:	f7fa ff5d 	bl	80002a0 <memcpy>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	ebca 0308 	rsb	r3, sl, r8
 80053f6:	eb0b 000a 	add.w	r0, fp, sl
 80053fa:	f8c4 8014 	str.w	r8, [r4, #20]
 80053fe:	f8c4 b010 	str.w	fp, [r4, #16]
 8005402:	6020      	str	r0, [r4, #0]
 8005404:	60a3      	str	r3, [r4, #8]
 8005406:	46b8      	mov	r8, r7
 8005408:	46ba      	mov	sl, r7
 800540a:	e71d      	b.n	8005248 <__sfvwrite_r+0xb0>
 800540c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005410:	42bb      	cmp	r3, r7
 8005412:	bf28      	it	cs
 8005414:	463b      	movcs	r3, r7
 8005416:	464a      	mov	r2, r9
 8005418:	fb93 f3f1 	sdiv	r3, r3, r1
 800541c:	9801      	ldr	r0, [sp, #4]
 800541e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	69e1      	ldr	r1, [r4, #28]
 8005426:	47b0      	blx	r6
 8005428:	2800      	cmp	r0, #0
 800542a:	f73f af19 	bgt.w	8005260 <__sfvwrite_r+0xc8>
 800542e:	e74d      	b.n	80052cc <__sfvwrite_r+0x134>
 8005430:	461a      	mov	r2, r3
 8005432:	4651      	mov	r1, sl
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	f000 f857 	bl	80054e8 <memmove>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	9801      	ldr	r0, [sp, #4]
 8005440:	441a      	add	r2, r3
 8005442:	6022      	str	r2, [r4, #0]
 8005444:	4621      	mov	r1, r4
 8005446:	f7fe fc37 	bl	8003cb8 <_fflush_r>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	2800      	cmp	r0, #0
 800544e:	f47f af3d 	bne.w	80052cc <__sfvwrite_r+0x134>
 8005452:	461f      	mov	r7, r3
 8005454:	e766      	b.n	8005324 <__sfvwrite_r+0x18c>
 8005456:	9801      	ldr	r0, [sp, #4]
 8005458:	f000 f8c0 	bl	80055dc <_realloc_r>
 800545c:	4683      	mov	fp, r0
 800545e:	2800      	cmp	r0, #0
 8005460:	d1c7      	bne.n	80053f2 <__sfvwrite_r+0x25a>
 8005462:	9d01      	ldr	r5, [sp, #4]
 8005464:	6921      	ldr	r1, [r4, #16]
 8005466:	4628      	mov	r0, r5
 8005468:	f7fe fd12 	bl	8003e90 <_free_r>
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	220c      	movs	r2, #12
 8005470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005474:	b29b      	uxth	r3, r3
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	e729      	b.n	80052ce <__sfvwrite_r+0x136>
 800547a:	2301      	movs	r3, #1
 800547c:	f109 0801 	add.w	r8, r9, #1
 8005480:	9302      	str	r3, [sp, #8]
 8005482:	e736      	b.n	80052f2 <__sfvwrite_r+0x15a>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005488:	e6b9      	b.n	80051fe <__sfvwrite_r+0x66>
 800548a:	9a01      	ldr	r2, [sp, #4]
 800548c:	230c      	movs	r3, #12
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	e71c      	b.n	80052ce <__sfvwrite_r+0x136>
 8005494:	7ffffc00 	.word	0x7ffffc00

08005498 <_isatty_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4c07      	ldr	r4, [pc, #28]	; (80054b8 <_isatty_r+0x20>)
 800549c:	2300      	movs	r3, #0
 800549e:	4605      	mov	r5, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	f001 ff7a 	bl	800739c <_isatty>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d000      	beq.n	80054ae <_isatty_r+0x16>
 80054ac:	bd38      	pop	{r3, r4, r5, pc}
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0fb      	beq.n	80054ac <_isatty_r+0x14>
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	20000b3c 	.word	0x20000b3c

080054bc <_lseek_r>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	460d      	mov	r5, r1
 80054c0:	4c08      	ldr	r4, [pc, #32]	; (80054e4 <_lseek_r+0x28>)
 80054c2:	4611      	mov	r1, r2
 80054c4:	4606      	mov	r6, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	4628      	mov	r0, r5
 80054ca:	2300      	movs	r3, #0
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	f001 ff67 	bl	80073a0 <_lseek>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d000      	beq.n	80054d8 <_lseek_r+0x1c>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0fb      	beq.n	80054d6 <_lseek_r+0x1a>
 80054de:	6033      	str	r3, [r6, #0]
 80054e0:	bd70      	pop	{r4, r5, r6, pc}
 80054e2:	bf00      	nop
 80054e4:	20000b3c 	.word	0x20000b3c

080054e8 <memmove>:
 80054e8:	4288      	cmp	r0, r1
 80054ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ec:	d90d      	bls.n	800550a <memmove+0x22>
 80054ee:	188b      	adds	r3, r1, r2
 80054f0:	4298      	cmp	r0, r3
 80054f2:	d20a      	bcs.n	800550a <memmove+0x22>
 80054f4:	1881      	adds	r1, r0, r2
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d051      	beq.n	800559e <memmove+0xb6>
 80054fa:	1a9a      	subs	r2, r3, r2
 80054fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005500:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005504:	4293      	cmp	r3, r2
 8005506:	d1f9      	bne.n	80054fc <memmove+0x14>
 8005508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800550a:	2a0f      	cmp	r2, #15
 800550c:	d948      	bls.n	80055a0 <memmove+0xb8>
 800550e:	ea41 0300 	orr.w	r3, r1, r0
 8005512:	079b      	lsls	r3, r3, #30
 8005514:	d146      	bne.n	80055a4 <memmove+0xbc>
 8005516:	f100 0410 	add.w	r4, r0, #16
 800551a:	f101 0310 	add.w	r3, r1, #16
 800551e:	4615      	mov	r5, r2
 8005520:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8005524:	f844 6c10 	str.w	r6, [r4, #-16]
 8005528:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800552c:	f844 6c0c 	str.w	r6, [r4, #-12]
 8005530:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8005534:	f844 6c08 	str.w	r6, [r4, #-8]
 8005538:	3d10      	subs	r5, #16
 800553a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800553e:	f844 6c04 	str.w	r6, [r4, #-4]
 8005542:	2d0f      	cmp	r5, #15
 8005544:	f103 0310 	add.w	r3, r3, #16
 8005548:	f104 0410 	add.w	r4, r4, #16
 800554c:	d8e8      	bhi.n	8005520 <memmove+0x38>
 800554e:	f1a2 0310 	sub.w	r3, r2, #16
 8005552:	f023 030f 	bic.w	r3, r3, #15
 8005556:	f002 0e0f 	and.w	lr, r2, #15
 800555a:	3310      	adds	r3, #16
 800555c:	f1be 0f03 	cmp.w	lr, #3
 8005560:	4419      	add	r1, r3
 8005562:	4403      	add	r3, r0
 8005564:	d921      	bls.n	80055aa <memmove+0xc2>
 8005566:	1f1e      	subs	r6, r3, #4
 8005568:	460d      	mov	r5, r1
 800556a:	4674      	mov	r4, lr
 800556c:	3c04      	subs	r4, #4
 800556e:	f855 7b04 	ldr.w	r7, [r5], #4
 8005572:	f846 7f04 	str.w	r7, [r6, #4]!
 8005576:	2c03      	cmp	r4, #3
 8005578:	d8f8      	bhi.n	800556c <memmove+0x84>
 800557a:	f1ae 0404 	sub.w	r4, lr, #4
 800557e:	f024 0403 	bic.w	r4, r4, #3
 8005582:	3404      	adds	r4, #4
 8005584:	4423      	add	r3, r4
 8005586:	4421      	add	r1, r4
 8005588:	f002 0203 	and.w	r2, r2, #3
 800558c:	b162      	cbz	r2, 80055a8 <memmove+0xc0>
 800558e:	3b01      	subs	r3, #1
 8005590:	440a      	add	r2, r1
 8005592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800559a:	428a      	cmp	r2, r1
 800559c:	d1f9      	bne.n	8005592 <memmove+0xaa>
 800559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a0:	4603      	mov	r3, r0
 80055a2:	e7f3      	b.n	800558c <memmove+0xa4>
 80055a4:	4603      	mov	r3, r0
 80055a6:	e7f2      	b.n	800558e <memmove+0xa6>
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055aa:	4672      	mov	r2, lr
 80055ac:	e7ee      	b.n	800558c <memmove+0xa4>
 80055ae:	bf00      	nop

080055b0 <_read_r>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	460d      	mov	r5, r1
 80055b4:	4c08      	ldr	r4, [pc, #32]	; (80055d8 <_read_r+0x28>)
 80055b6:	4611      	mov	r1, r2
 80055b8:	4606      	mov	r6, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	4628      	mov	r0, r5
 80055be:	2300      	movs	r3, #0
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	f001 feef 	bl	80073a4 <_read>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	d000      	beq.n	80055cc <_read_r+0x1c>
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0fb      	beq.n	80055ca <_read_r+0x1a>
 80055d2:	6033      	str	r3, [r6, #0]
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
 80055d6:	bf00      	nop
 80055d8:	20000b3c 	.word	0x20000b3c

080055dc <_realloc_r>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	4617      	mov	r7, r2
 80055e2:	b083      	sub	sp, #12
 80055e4:	2900      	cmp	r1, #0
 80055e6:	f000 80c1 	beq.w	800576c <_realloc_r+0x190>
 80055ea:	460e      	mov	r6, r1
 80055ec:	4681      	mov	r9, r0
 80055ee:	f107 050b 	add.w	r5, r7, #11
 80055f2:	f7ff f8e3 	bl	80047bc <__malloc_lock>
 80055f6:	f856 ec04 	ldr.w	lr, [r6, #-4]
 80055fa:	2d16      	cmp	r5, #22
 80055fc:	f02e 0403 	bic.w	r4, lr, #3
 8005600:	f1a6 0808 	sub.w	r8, r6, #8
 8005604:	d840      	bhi.n	8005688 <_realloc_r+0xac>
 8005606:	2210      	movs	r2, #16
 8005608:	4615      	mov	r5, r2
 800560a:	42af      	cmp	r7, r5
 800560c:	d841      	bhi.n	8005692 <_realloc_r+0xb6>
 800560e:	4294      	cmp	r4, r2
 8005610:	da75      	bge.n	80056fe <_realloc_r+0x122>
 8005612:	4bc9      	ldr	r3, [pc, #804]	; (8005938 <_realloc_r+0x35c>)
 8005614:	6899      	ldr	r1, [r3, #8]
 8005616:	eb08 0004 	add.w	r0, r8, r4
 800561a:	4288      	cmp	r0, r1
 800561c:	6841      	ldr	r1, [r0, #4]
 800561e:	f000 80d9 	beq.w	80057d4 <_realloc_r+0x1f8>
 8005622:	f021 0301 	bic.w	r3, r1, #1
 8005626:	4403      	add	r3, r0
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	07db      	lsls	r3, r3, #31
 800562c:	d57d      	bpl.n	800572a <_realloc_r+0x14e>
 800562e:	f01e 0f01 	tst.w	lr, #1
 8005632:	d035      	beq.n	80056a0 <_realloc_r+0xc4>
 8005634:	4639      	mov	r1, r7
 8005636:	4648      	mov	r0, r9
 8005638:	f7fe fdba 	bl	80041b0 <_malloc_r>
 800563c:	4607      	mov	r7, r0
 800563e:	b1e0      	cbz	r0, 800567a <_realloc_r+0x9e>
 8005640:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	4443      	add	r3, r8
 800564a:	f1a0 0208 	sub.w	r2, r0, #8
 800564e:	429a      	cmp	r2, r3
 8005650:	f000 8144 	beq.w	80058dc <_realloc_r+0x300>
 8005654:	1f22      	subs	r2, r4, #4
 8005656:	2a24      	cmp	r2, #36	; 0x24
 8005658:	f200 8131 	bhi.w	80058be <_realloc_r+0x2e2>
 800565c:	2a13      	cmp	r2, #19
 800565e:	f200 8104 	bhi.w	800586a <_realloc_r+0x28e>
 8005662:	4603      	mov	r3, r0
 8005664:	4632      	mov	r2, r6
 8005666:	6811      	ldr	r1, [r2, #0]
 8005668:	6019      	str	r1, [r3, #0]
 800566a:	6851      	ldr	r1, [r2, #4]
 800566c:	6059      	str	r1, [r3, #4]
 800566e:	6892      	ldr	r2, [r2, #8]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	4631      	mov	r1, r6
 8005674:	4648      	mov	r0, r9
 8005676:	f7fe fc0b 	bl	8003e90 <_free_r>
 800567a:	4648      	mov	r0, r9
 800567c:	f7ff f8a0 	bl	80047c0 <__malloc_unlock>
 8005680:	4638      	mov	r0, r7
 8005682:	b003      	add	sp, #12
 8005684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005688:	f025 0507 	bic.w	r5, r5, #7
 800568c:	2d00      	cmp	r5, #0
 800568e:	462a      	mov	r2, r5
 8005690:	dabb      	bge.n	800560a <_realloc_r+0x2e>
 8005692:	230c      	movs	r3, #12
 8005694:	2000      	movs	r0, #0
 8005696:	f8c9 3000 	str.w	r3, [r9]
 800569a:	b003      	add	sp, #12
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80056a4:	ebc3 0a08 	rsb	sl, r3, r8
 80056a8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80056ac:	f023 0c03 	bic.w	ip, r3, #3
 80056b0:	eb04 030c 	add.w	r3, r4, ip
 80056b4:	4293      	cmp	r3, r2
 80056b6:	dbbd      	blt.n	8005634 <_realloc_r+0x58>
 80056b8:	4657      	mov	r7, sl
 80056ba:	f8da 100c 	ldr.w	r1, [sl, #12]
 80056be:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80056c2:	1f22      	subs	r2, r4, #4
 80056c4:	2a24      	cmp	r2, #36	; 0x24
 80056c6:	60c1      	str	r1, [r0, #12]
 80056c8:	6088      	str	r0, [r1, #8]
 80056ca:	f200 8117 	bhi.w	80058fc <_realloc_r+0x320>
 80056ce:	2a13      	cmp	r2, #19
 80056d0:	f240 8112 	bls.w	80058f8 <_realloc_r+0x31c>
 80056d4:	6831      	ldr	r1, [r6, #0]
 80056d6:	f8ca 1008 	str.w	r1, [sl, #8]
 80056da:	6871      	ldr	r1, [r6, #4]
 80056dc:	f8ca 100c 	str.w	r1, [sl, #12]
 80056e0:	2a1b      	cmp	r2, #27
 80056e2:	f200 812b 	bhi.w	800593c <_realloc_r+0x360>
 80056e6:	3608      	adds	r6, #8
 80056e8:	f10a 0210 	add.w	r2, sl, #16
 80056ec:	6831      	ldr	r1, [r6, #0]
 80056ee:	6011      	str	r1, [r2, #0]
 80056f0:	6871      	ldr	r1, [r6, #4]
 80056f2:	6051      	str	r1, [r2, #4]
 80056f4:	68b1      	ldr	r1, [r6, #8]
 80056f6:	6091      	str	r1, [r2, #8]
 80056f8:	463e      	mov	r6, r7
 80056fa:	461c      	mov	r4, r3
 80056fc:	46d0      	mov	r8, sl
 80056fe:	1b63      	subs	r3, r4, r5
 8005700:	2b0f      	cmp	r3, #15
 8005702:	d81d      	bhi.n	8005740 <_realloc_r+0x164>
 8005704:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	4323      	orrs	r3, r4
 800570e:	4444      	add	r4, r8
 8005710:	f8c8 3004 	str.w	r3, [r8, #4]
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6063      	str	r3, [r4, #4]
 800571c:	4648      	mov	r0, r9
 800571e:	f7ff f84f 	bl	80047c0 <__malloc_unlock>
 8005722:	4630      	mov	r0, r6
 8005724:	b003      	add	sp, #12
 8005726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572a:	f021 0103 	bic.w	r1, r1, #3
 800572e:	4421      	add	r1, r4
 8005730:	4291      	cmp	r1, r2
 8005732:	db21      	blt.n	8005778 <_realloc_r+0x19c>
 8005734:	68c3      	ldr	r3, [r0, #12]
 8005736:	6882      	ldr	r2, [r0, #8]
 8005738:	460c      	mov	r4, r1
 800573a:	60d3      	str	r3, [r2, #12]
 800573c:	609a      	str	r2, [r3, #8]
 800573e:	e7de      	b.n	80056fe <_realloc_r+0x122>
 8005740:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005744:	eb08 0105 	add.w	r1, r8, r5
 8005748:	f002 0201 	and.w	r2, r2, #1
 800574c:	4315      	orrs	r5, r2
 800574e:	f043 0201 	orr.w	r2, r3, #1
 8005752:	440b      	add	r3, r1
 8005754:	f8c8 5004 	str.w	r5, [r8, #4]
 8005758:	604a      	str	r2, [r1, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	3108      	adds	r1, #8
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	4648      	mov	r0, r9
 8005766:	f7fe fb93 	bl	8003e90 <_free_r>
 800576a:	e7d7      	b.n	800571c <_realloc_r+0x140>
 800576c:	4611      	mov	r1, r2
 800576e:	b003      	add	sp, #12
 8005770:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	f7fe bd1c 	b.w	80041b0 <_malloc_r>
 8005778:	f01e 0f01 	tst.w	lr, #1
 800577c:	f47f af5a 	bne.w	8005634 <_realloc_r+0x58>
 8005780:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005784:	ebc3 0a08 	rsb	sl, r3, r8
 8005788:	f8da 3004 	ldr.w	r3, [sl, #4]
 800578c:	f023 0c03 	bic.w	ip, r3, #3
 8005790:	eb01 0e0c 	add.w	lr, r1, ip
 8005794:	4596      	cmp	lr, r2
 8005796:	db8b      	blt.n	80056b0 <_realloc_r+0xd4>
 8005798:	68c3      	ldr	r3, [r0, #12]
 800579a:	6882      	ldr	r2, [r0, #8]
 800579c:	4657      	mov	r7, sl
 800579e:	60d3      	str	r3, [r2, #12]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80057a6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80057aa:	60cb      	str	r3, [r1, #12]
 80057ac:	1f22      	subs	r2, r4, #4
 80057ae:	2a24      	cmp	r2, #36	; 0x24
 80057b0:	6099      	str	r1, [r3, #8]
 80057b2:	f200 8099 	bhi.w	80058e8 <_realloc_r+0x30c>
 80057b6:	2a13      	cmp	r2, #19
 80057b8:	d962      	bls.n	8005880 <_realloc_r+0x2a4>
 80057ba:	6833      	ldr	r3, [r6, #0]
 80057bc:	f8ca 3008 	str.w	r3, [sl, #8]
 80057c0:	6873      	ldr	r3, [r6, #4]
 80057c2:	f8ca 300c 	str.w	r3, [sl, #12]
 80057c6:	2a1b      	cmp	r2, #27
 80057c8:	f200 80a0 	bhi.w	800590c <_realloc_r+0x330>
 80057cc:	3608      	adds	r6, #8
 80057ce:	f10a 0310 	add.w	r3, sl, #16
 80057d2:	e056      	b.n	8005882 <_realloc_r+0x2a6>
 80057d4:	f021 0b03 	bic.w	fp, r1, #3
 80057d8:	44a3      	add	fp, r4
 80057da:	f105 0010 	add.w	r0, r5, #16
 80057de:	4583      	cmp	fp, r0
 80057e0:	da59      	bge.n	8005896 <_realloc_r+0x2ba>
 80057e2:	f01e 0f01 	tst.w	lr, #1
 80057e6:	f47f af25 	bne.w	8005634 <_realloc_r+0x58>
 80057ea:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80057ee:	ebc1 0a08 	rsb	sl, r1, r8
 80057f2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80057f6:	f021 0c03 	bic.w	ip, r1, #3
 80057fa:	44e3      	add	fp, ip
 80057fc:	4558      	cmp	r0, fp
 80057fe:	f73f af57 	bgt.w	80056b0 <_realloc_r+0xd4>
 8005802:	4657      	mov	r7, sl
 8005804:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005808:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800580c:	1f22      	subs	r2, r4, #4
 800580e:	2a24      	cmp	r2, #36	; 0x24
 8005810:	60c1      	str	r1, [r0, #12]
 8005812:	6088      	str	r0, [r1, #8]
 8005814:	f200 80b4 	bhi.w	8005980 <_realloc_r+0x3a4>
 8005818:	2a13      	cmp	r2, #19
 800581a:	f240 80a5 	bls.w	8005968 <_realloc_r+0x38c>
 800581e:	6831      	ldr	r1, [r6, #0]
 8005820:	f8ca 1008 	str.w	r1, [sl, #8]
 8005824:	6871      	ldr	r1, [r6, #4]
 8005826:	f8ca 100c 	str.w	r1, [sl, #12]
 800582a:	2a1b      	cmp	r2, #27
 800582c:	f200 80af 	bhi.w	800598e <_realloc_r+0x3b2>
 8005830:	3608      	adds	r6, #8
 8005832:	f10a 0210 	add.w	r2, sl, #16
 8005836:	6831      	ldr	r1, [r6, #0]
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	6871      	ldr	r1, [r6, #4]
 800583c:	6051      	str	r1, [r2, #4]
 800583e:	68b1      	ldr	r1, [r6, #8]
 8005840:	6091      	str	r1, [r2, #8]
 8005842:	eb0a 0105 	add.w	r1, sl, r5
 8005846:	ebc5 020b 	rsb	r2, r5, fp
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	6099      	str	r1, [r3, #8]
 8005850:	604a      	str	r2, [r1, #4]
 8005852:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	431d      	orrs	r5, r3
 800585c:	4648      	mov	r0, r9
 800585e:	f8ca 5004 	str.w	r5, [sl, #4]
 8005862:	f7fe ffad 	bl	80047c0 <__malloc_unlock>
 8005866:	4638      	mov	r0, r7
 8005868:	e75c      	b.n	8005724 <_realloc_r+0x148>
 800586a:	6833      	ldr	r3, [r6, #0]
 800586c:	6003      	str	r3, [r0, #0]
 800586e:	6873      	ldr	r3, [r6, #4]
 8005870:	6043      	str	r3, [r0, #4]
 8005872:	2a1b      	cmp	r2, #27
 8005874:	d827      	bhi.n	80058c6 <_realloc_r+0x2ea>
 8005876:	f100 0308 	add.w	r3, r0, #8
 800587a:	f106 0208 	add.w	r2, r6, #8
 800587e:	e6f2      	b.n	8005666 <_realloc_r+0x8a>
 8005880:	463b      	mov	r3, r7
 8005882:	6832      	ldr	r2, [r6, #0]
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	6872      	ldr	r2, [r6, #4]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	68b2      	ldr	r2, [r6, #8]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	463e      	mov	r6, r7
 8005890:	4674      	mov	r4, lr
 8005892:	46d0      	mov	r8, sl
 8005894:	e733      	b.n	80056fe <_realloc_r+0x122>
 8005896:	eb08 0105 	add.w	r1, r8, r5
 800589a:	ebc5 0b0b 	rsb	fp, r5, fp
 800589e:	f04b 0201 	orr.w	r2, fp, #1
 80058a2:	6099      	str	r1, [r3, #8]
 80058a4:	604a      	str	r2, [r1, #4]
 80058a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	431d      	orrs	r5, r3
 80058b0:	4648      	mov	r0, r9
 80058b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80058b6:	f7fe ff83 	bl	80047c0 <__malloc_unlock>
 80058ba:	4630      	mov	r0, r6
 80058bc:	e732      	b.n	8005724 <_realloc_r+0x148>
 80058be:	4631      	mov	r1, r6
 80058c0:	f7ff fe12 	bl	80054e8 <memmove>
 80058c4:	e6d5      	b.n	8005672 <_realloc_r+0x96>
 80058c6:	68b3      	ldr	r3, [r6, #8]
 80058c8:	6083      	str	r3, [r0, #8]
 80058ca:	68f3      	ldr	r3, [r6, #12]
 80058cc:	60c3      	str	r3, [r0, #12]
 80058ce:	2a24      	cmp	r2, #36	; 0x24
 80058d0:	d028      	beq.n	8005924 <_realloc_r+0x348>
 80058d2:	f100 0310 	add.w	r3, r0, #16
 80058d6:	f106 0210 	add.w	r2, r6, #16
 80058da:	e6c4      	b.n	8005666 <_realloc_r+0x8a>
 80058dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80058e0:	f023 0303 	bic.w	r3, r3, #3
 80058e4:	441c      	add	r4, r3
 80058e6:	e70a      	b.n	80056fe <_realloc_r+0x122>
 80058e8:	4631      	mov	r1, r6
 80058ea:	4638      	mov	r0, r7
 80058ec:	4674      	mov	r4, lr
 80058ee:	46d0      	mov	r8, sl
 80058f0:	f7ff fdfa 	bl	80054e8 <memmove>
 80058f4:	463e      	mov	r6, r7
 80058f6:	e702      	b.n	80056fe <_realloc_r+0x122>
 80058f8:	463a      	mov	r2, r7
 80058fa:	e6f7      	b.n	80056ec <_realloc_r+0x110>
 80058fc:	4631      	mov	r1, r6
 80058fe:	4638      	mov	r0, r7
 8005900:	461c      	mov	r4, r3
 8005902:	46d0      	mov	r8, sl
 8005904:	f7ff fdf0 	bl	80054e8 <memmove>
 8005908:	463e      	mov	r6, r7
 800590a:	e6f8      	b.n	80056fe <_realloc_r+0x122>
 800590c:	68b3      	ldr	r3, [r6, #8]
 800590e:	f8ca 3010 	str.w	r3, [sl, #16]
 8005912:	68f3      	ldr	r3, [r6, #12]
 8005914:	f8ca 3014 	str.w	r3, [sl, #20]
 8005918:	2a24      	cmp	r2, #36	; 0x24
 800591a:	d01b      	beq.n	8005954 <_realloc_r+0x378>
 800591c:	3610      	adds	r6, #16
 800591e:	f10a 0318 	add.w	r3, sl, #24
 8005922:	e7ae      	b.n	8005882 <_realloc_r+0x2a6>
 8005924:	6933      	ldr	r3, [r6, #16]
 8005926:	6103      	str	r3, [r0, #16]
 8005928:	6973      	ldr	r3, [r6, #20]
 800592a:	6143      	str	r3, [r0, #20]
 800592c:	f106 0218 	add.w	r2, r6, #24
 8005930:	f100 0318 	add.w	r3, r0, #24
 8005934:	e697      	b.n	8005666 <_realloc_r+0x8a>
 8005936:	bf00      	nop
 8005938:	20000490 	.word	0x20000490
 800593c:	68b1      	ldr	r1, [r6, #8]
 800593e:	f8ca 1010 	str.w	r1, [sl, #16]
 8005942:	68f1      	ldr	r1, [r6, #12]
 8005944:	f8ca 1014 	str.w	r1, [sl, #20]
 8005948:	2a24      	cmp	r2, #36	; 0x24
 800594a:	d00f      	beq.n	800596c <_realloc_r+0x390>
 800594c:	3610      	adds	r6, #16
 800594e:	f10a 0218 	add.w	r2, sl, #24
 8005952:	e6cb      	b.n	80056ec <_realloc_r+0x110>
 8005954:	6933      	ldr	r3, [r6, #16]
 8005956:	f8ca 3018 	str.w	r3, [sl, #24]
 800595a:	6973      	ldr	r3, [r6, #20]
 800595c:	f8ca 301c 	str.w	r3, [sl, #28]
 8005960:	3618      	adds	r6, #24
 8005962:	f10a 0320 	add.w	r3, sl, #32
 8005966:	e78c      	b.n	8005882 <_realloc_r+0x2a6>
 8005968:	463a      	mov	r2, r7
 800596a:	e764      	b.n	8005836 <_realloc_r+0x25a>
 800596c:	6932      	ldr	r2, [r6, #16]
 800596e:	f8ca 2018 	str.w	r2, [sl, #24]
 8005972:	6972      	ldr	r2, [r6, #20]
 8005974:	f8ca 201c 	str.w	r2, [sl, #28]
 8005978:	3618      	adds	r6, #24
 800597a:	f10a 0220 	add.w	r2, sl, #32
 800597e:	e6b5      	b.n	80056ec <_realloc_r+0x110>
 8005980:	4631      	mov	r1, r6
 8005982:	4638      	mov	r0, r7
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	f7ff fdaf 	bl	80054e8 <memmove>
 800598a:	9b01      	ldr	r3, [sp, #4]
 800598c:	e759      	b.n	8005842 <_realloc_r+0x266>
 800598e:	68b1      	ldr	r1, [r6, #8]
 8005990:	f8ca 1010 	str.w	r1, [sl, #16]
 8005994:	68f1      	ldr	r1, [r6, #12]
 8005996:	f8ca 1014 	str.w	r1, [sl, #20]
 800599a:	2a24      	cmp	r2, #36	; 0x24
 800599c:	d003      	beq.n	80059a6 <_realloc_r+0x3ca>
 800599e:	3610      	adds	r6, #16
 80059a0:	f10a 0218 	add.w	r2, sl, #24
 80059a4:	e747      	b.n	8005836 <_realloc_r+0x25a>
 80059a6:	6932      	ldr	r2, [r6, #16]
 80059a8:	f8ca 2018 	str.w	r2, [sl, #24]
 80059ac:	6972      	ldr	r2, [r6, #20]
 80059ae:	f8ca 201c 	str.w	r2, [sl, #28]
 80059b2:	3618      	adds	r6, #24
 80059b4:	f10a 0220 	add.w	r2, sl, #32
 80059b8:	e73d      	b.n	8005836 <_realloc_r+0x25a>
 80059ba:	bf00      	nop

080059bc <__swbuf_r>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	460e      	mov	r6, r1
 80059c0:	4614      	mov	r4, r2
 80059c2:	4607      	mov	r7, r0
 80059c4:	b110      	cbz	r0, 80059cc <__swbuf_r+0x10>
 80059c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d048      	beq.n	8005a5e <__swbuf_r+0xa2>
 80059cc:	89a2      	ldrh	r2, [r4, #12]
 80059ce:	69a3      	ldr	r3, [r4, #24]
 80059d0:	60a3      	str	r3, [r4, #8]
 80059d2:	b291      	uxth	r1, r2
 80059d4:	0708      	lsls	r0, r1, #28
 80059d6:	d538      	bpl.n	8005a4a <__swbuf_r+0x8e>
 80059d8:	6923      	ldr	r3, [r4, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d035      	beq.n	8005a4a <__swbuf_r+0x8e>
 80059de:	0489      	lsls	r1, r1, #18
 80059e0:	b2f5      	uxtb	r5, r6
 80059e2:	d515      	bpl.n	8005a10 <__swbuf_r+0x54>
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	6961      	ldr	r1, [r4, #20]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	428b      	cmp	r3, r1
 80059ec:	da1c      	bge.n	8005a28 <__swbuf_r+0x6c>
 80059ee:	3301      	adds	r3, #1
 80059f0:	68a1      	ldr	r1, [r4, #8]
 80059f2:	1c50      	adds	r0, r2, #1
 80059f4:	3901      	subs	r1, #1
 80059f6:	60a1      	str	r1, [r4, #8]
 80059f8:	6020      	str	r0, [r4, #0]
 80059fa:	7016      	strb	r6, [r2, #0]
 80059fc:	6962      	ldr	r2, [r4, #20]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d01a      	beq.n	8005a38 <__swbuf_r+0x7c>
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	07db      	lsls	r3, r3, #31
 8005a06:	d501      	bpl.n	8005a0c <__swbuf_r+0x50>
 8005a08:	2d0a      	cmp	r5, #10
 8005a0a:	d015      	beq.n	8005a38 <__swbuf_r+0x7c>
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a10:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a16:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005a1a:	81a2      	strh	r2, [r4, #12]
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	6661      	str	r1, [r4, #100]	; 0x64
 8005a20:	6961      	ldr	r1, [r4, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	428b      	cmp	r3, r1
 8005a26:	dbe2      	blt.n	80059ee <__swbuf_r+0x32>
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f7fe f944 	bl	8003cb8 <_fflush_r>
 8005a30:	b940      	cbnz	r0, 8005a44 <__swbuf_r+0x88>
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	2301      	movs	r3, #1
 8005a36:	e7db      	b.n	80059f0 <__swbuf_r+0x34>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	f7fe f93c 	bl	8003cb8 <_fflush_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d0e3      	beq.n	8005a0c <__swbuf_r+0x50>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7fd f86d 	bl	8002b2c <__swsetup_r>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d1f6      	bne.n	8005a44 <__swbuf_r+0x88>
 8005a56:	89a2      	ldrh	r2, [r4, #12]
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	b291      	uxth	r1, r2
 8005a5c:	e7bf      	b.n	80059de <__swbuf_r+0x22>
 8005a5e:	f7fe f9bf 	bl	8003de0 <__sinit>
 8005a62:	e7b3      	b.n	80059cc <__swbuf_r+0x10>

08005a64 <_wcrtomb_r>:
 8005a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a68:	4605      	mov	r5, r0
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	461e      	mov	r6, r3
 8005a6e:	460c      	mov	r4, r1
 8005a70:	b1a1      	cbz	r1, 8005a9c <_wcrtomb_r+0x38>
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <_wcrtomb_r+0x50>)
 8005a74:	4617      	mov	r7, r2
 8005a76:	f8d3 8000 	ldr.w	r8, [r3]
 8005a7a:	f7fe fb1b 	bl	80040b4 <__locale_charset>
 8005a7e:	9600      	str	r6, [sp, #0]
 8005a80:	4603      	mov	r3, r0
 8005a82:	463a      	mov	r2, r7
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	47c0      	blx	r8
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d103      	bne.n	8005a96 <_wcrtomb_r+0x32>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	238a      	movs	r3, #138	; 0x8a
 8005a92:	6032      	str	r2, [r6, #0]
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	b006      	add	sp, #24
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <_wcrtomb_r+0x50>)
 8005a9e:	681f      	ldr	r7, [r3, #0]
 8005aa0:	f7fe fb08 	bl	80040b4 <__locale_charset>
 8005aa4:	9600      	str	r6, [sp, #0]
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	a903      	add	r1, sp, #12
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	e7eb      	b.n	8005a8a <_wcrtomb_r+0x26>
 8005ab2:	bf00      	nop
 8005ab4:	200008a0 	.word	0x200008a0

08005ab8 <__ascii_wctomb>:
 8005ab8:	b121      	cbz	r1, 8005ac4 <__ascii_wctomb+0xc>
 8005aba:	2aff      	cmp	r2, #255	; 0xff
 8005abc:	d804      	bhi.n	8005ac8 <__ascii_wctomb+0x10>
 8005abe:	700a      	strb	r2, [r1, #0]
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	4770      	bx	lr
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	4770      	bx	lr
 8005ac8:	238a      	movs	r3, #138	; 0x8a
 8005aca:	6003      	str	r3, [r0, #0]
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop

08005ad4 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ad4:	6803      	ldr	r3, [r0, #0]
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ada:	07dd      	lsls	r5, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005adc:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ade:	d403      	bmi.n	8005ae8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	0798      	lsls	r0, r3, #30
 8005ae4:	d470      	bmi.n	8005bc8 <HAL_RCC_OscConfig+0xf4>
 8005ae6:	e0c3      	b.n	8005c70 <HAL_RCC_OscConfig+0x19c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005ae8:	4ba4      	ldr	r3, [pc, #656]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	f002 020c 	and.w	r2, r2, #12
 8005af0:	2a04      	cmp	r2, #4
 8005af2:	d007      	beq.n	8005b04 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	f002 020c 	and.w	r2, r2, #12
 8005afa:	2a08      	cmp	r2, #8
 8005afc:	d10b      	bne.n	8005b16 <HAL_RCC_OscConfig+0x42>
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	0259      	lsls	r1, r3, #9
 8005b02:	d508      	bpl.n	8005b16 <HAL_RCC_OscConfig+0x42>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	4b9d      	ldr	r3, [pc, #628]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	039a      	lsls	r2, r3, #14
 8005b0a:	d5e9      	bpl.n	8005ae0 <HAL_RCC_OscConfig+0xc>
 8005b0c:	6863      	ldr	r3, [r4, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8005b12:	2001      	movs	r0, #1
 8005b14:	e1b1      	b.n	8005e7a <HAL_RCC_OscConfig+0x3a6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8005b16:	4d99      	ldr	r5, [pc, #612]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005b18:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	462e      	mov	r6, r5
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8005b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b30:	602b      	str	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f000 fb09 	bl	8006148 <HAL_GetTick>
 8005b36:	4607      	mov	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	4d90      	ldr	r5, [pc, #576]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005b3c:	039b      	lsls	r3, r3, #14
 8005b3e:	d507      	bpl.n	8005b50 <HAL_RCC_OscConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b40:	f000 fb02 	bl	8006148 <HAL_GetTick>
 8005b44:	1bc0      	subs	r0, r0, r7
 8005b46:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8005b4a:	d9f5      	bls.n	8005b38 <HAL_RCC_OscConfig+0x64>
        {
          return HAL_TIMEOUT;
 8005b4c:	2003      	movs	r0, #3
 8005b4e:	e194      	b.n	8005e7a <HAL_RCC_OscConfig+0x3a6>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	6863      	ldr	r3, [r4, #4]
 8005b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5e:	d103      	bne.n	8005b68 <HAL_RCC_OscConfig+0x94>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b66:	e005      	b.n	8005b74 <HAL_RCC_OscConfig+0xa0>
 8005b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b6c:	d108      	bne.n	8005b80 <HAL_RCC_OscConfig+0xac>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7c:	602b      	str	r3, [r5, #0]
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0xbe>
 8005b80:	682a      	ldr	r2, [r5, #0]
 8005b82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b86:	602a      	str	r2, [r5, #0]
 8005b88:	682a      	ldr	r2, [r5, #0]
 8005b8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b8e:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b90:	b16b      	cbz	r3, 8005bae <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f000 fad9 	bl	8006148 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	4d79      	ldr	r5, [pc, #484]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	039f      	lsls	r7, r3, #14
 8005b9e:	d49f      	bmi.n	8005ae0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba0:	f000 fad2 	bl	8006148 <HAL_GetTick>
 8005ba4:	1b80      	subs	r0, r0, r6
 8005ba6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8005baa:	d9f6      	bls.n	8005b9a <HAL_RCC_OscConfig+0xc6>
 8005bac:	e7ce      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bae:	f000 facb 	bl	8006148 <HAL_GetTick>
 8005bb2:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	0398      	lsls	r0, r3, #14
 8005bb8:	d592      	bpl.n	8005ae0 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bba:	f000 fac5 	bl	8006148 <HAL_GetTick>
 8005bbe:	1b80      	subs	r0, r0, r6
 8005bc0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8005bc4:	d9f6      	bls.n	8005bb4 <HAL_RCC_OscConfig+0xe0>
 8005bc6:	e7c1      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005bc8:	4b6c      	ldr	r3, [pc, #432]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	f012 0f0c 	tst.w	r2, #12
 8005bd0:	d007      	beq.n	8005be2 <HAL_RCC_OscConfig+0x10e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	f002 020c 	and.w	r2, r2, #12
 8005bd8:	2a08      	cmp	r2, #8
 8005bda:	d117      	bne.n	8005c0c <HAL_RCC_OscConfig+0x138>
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	0259      	lsls	r1, r3, #9
 8005be0:	d414      	bmi.n	8005c0c <HAL_RCC_OscConfig+0x138>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	0792      	lsls	r2, r2, #30
 8005be8:	d502      	bpl.n	8005bf0 <HAL_RCC_OscConfig+0x11c>
 8005bea:	68e2      	ldr	r2, [r4, #12]
 8005bec:	2a01      	cmp	r2, #1
 8005bee:	d190      	bne.n	8005b12 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf0:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf2:	21f8      	movs	r1, #248	; 0xf8
 8005bf4:	fa91 f1a1 	rbit	r1, r1
 8005bf8:	6920      	ldr	r0, [r4, #16]
 8005bfa:	fab1 f181 	clz	r1, r1
 8005bfe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005c02:	fa00 f101 	lsl.w	r1, r0, r1
 8005c06:	430a      	orrs	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c0a:	e031      	b.n	8005c70 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c0c:	68e3      	ldr	r3, [r4, #12]
 8005c0e:	4d5b      	ldr	r5, [pc, #364]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005c10:	b1f3      	cbz	r3, 8005c50 <HAL_RCC_OscConfig+0x17c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f000 fa95 	bl	8006148 <HAL_GetTick>
 8005c1e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	4856      	ldr	r0, [pc, #344]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005c24:	079f      	lsls	r7, r3, #30
 8005c26:	d405      	bmi.n	8005c34 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c28:	f000 fa8e 	bl	8006148 <HAL_GetTick>
 8005c2c:	1b80      	subs	r0, r0, r6
 8005c2e:	2864      	cmp	r0, #100	; 0x64
 8005c30:	d9f6      	bls.n	8005c20 <HAL_RCC_OscConfig+0x14c>
 8005c32:	e78b      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	6803      	ldr	r3, [r0, #0]
 8005c36:	22f8      	movs	r2, #248	; 0xf8
 8005c38:	fa92 f2a2 	rbit	r2, r2
 8005c3c:	6921      	ldr	r1, [r4, #16]
 8005c3e:	fab2 f282 	clz	r2, r2
 8005c42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c46:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	e00f      	b.n	8005c70 <HAL_RCC_OscConfig+0x19c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f000 fa76 	bl	8006148 <HAL_GetTick>
 8005c5c:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	0799      	lsls	r1, r3, #30
 8005c62:	d505      	bpl.n	8005c70 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c64:	f000 fa70 	bl	8006148 <HAL_GetTick>
 8005c68:	1b80      	subs	r0, r0, r6
 8005c6a:	2864      	cmp	r0, #100	; 0x64
 8005c6c:	d9f7      	bls.n	8005c5e <HAL_RCC_OscConfig+0x18a>
 8005c6e:	e76d      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	071a      	lsls	r2, r3, #28
 8005c74:	d403      	bmi.n	8005c7e <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	075b      	lsls	r3, r3, #29
 8005c7a:	d569      	bpl.n	8005d50 <HAL_RCC_OscConfig+0x27c>
 8005c7c:	e022      	b.n	8005cc4 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c7e:	6963      	ldr	r3, [r4, #20]
 8005c80:	4d3e      	ldr	r5, [pc, #248]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005c82:	b17b      	cbz	r3, 8005ca4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c84:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8c:	f000 fa5c 	bl	8006148 <HAL_GetTick>
 8005c90:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005c94:	079f      	lsls	r7, r3, #30
 8005c96:	d4ee      	bmi.n	8005c76 <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c98:	f000 fa56 	bl	8006148 <HAL_GetTick>
 8005c9c:	1b80      	subs	r0, r0, r6
 8005c9e:	2864      	cmp	r0, #100	; 0x64
 8005ca0:	d9f7      	bls.n	8005c92 <HAL_RCC_OscConfig+0x1be>
 8005ca2:	e753      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ca4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f000 fa4c 	bl	8006148 <HAL_GetTick>
 8005cb0:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005cb4:	0798      	lsls	r0, r3, #30
 8005cb6:	d5de      	bpl.n	8005c76 <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb8:	f000 fa46 	bl	8006148 <HAL_GetTick>
 8005cbc:	1b80      	subs	r0, r0, r6
 8005cbe:	2864      	cmp	r0, #100	; 0x64
 8005cc0:	d9f7      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x1de>
 8005cc2:	e743      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cc4:	2300      	movs	r3, #0
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cc6:	4d2e      	ldr	r5, [pc, #184]	; (8005d80 <HAL_RCC_OscConfig+0x2ac>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	4b2c      	ldr	r3, [pc, #176]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cde:	682b      	ldr	r3, [r5, #0]
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce4:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ce6:	f000 fa2f 	bl	8006148 <HAL_GetTick>
 8005cea:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	05d9      	lsls	r1, r3, #23
 8005cf0:	d531      	bpl.n	8005d56 <HAL_RCC_OscConfig+0x282>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8005cf2:	4d22      	ldr	r5, [pc, #136]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f241 3888 	movw	r8, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8005cf8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfa:	462e      	mov	r6, r5
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	672b      	str	r3, [r5, #112]	; 0x70
 8005d02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d04:	f023 0304 	bic.w	r3, r3, #4
 8005d08:	672b      	str	r3, [r5, #112]	; 0x70
 8005d0a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	672b      	str	r3, [r5, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d12:	f000 fa19 	bl	8006148 <HAL_GetTick>
 8005d16:	4607      	mov	r7, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d18:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005d1a:	4d18      	ldr	r5, [pc, #96]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
 8005d1c:	079a      	lsls	r2, r3, #30
 8005d1e:	d420      	bmi.n	8005d62 <HAL_RCC_OscConfig+0x28e>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	672b      	str	r3, [r5, #112]	; 0x70
 8005d28:	68a3      	ldr	r3, [r4, #8]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d11f      	bne.n	8005d6e <HAL_RCC_OscConfig+0x29a>
 8005d2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d30:	f023 0304 	bic.w	r3, r3, #4
 8005d34:	672b      	str	r3, [r5, #112]	; 0x70
 8005d36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3e:	f000 fa03 	bl	8006148 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d42:	4d0e      	ldr	r5, [pc, #56]	; (8005d7c <HAL_RCC_OscConfig+0x2a8>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d44:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d4c:	079b      	lsls	r3, r3, #30
 8005d4e:	d523      	bpl.n	8005d98 <HAL_RCC_OscConfig+0x2c4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d50:	69a2      	ldr	r2, [r4, #24]
 8005d52:	bbaa      	cbnz	r2, 8005dc0 <HAL_RCC_OscConfig+0x2ec>
 8005d54:	e077      	b.n	8005e46 <HAL_RCC_OscConfig+0x372>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d56:	f000 f9f7 	bl	8006148 <HAL_GetTick>
 8005d5a:	1b80      	subs	r0, r0, r6
 8005d5c:	2864      	cmp	r0, #100	; 0x64
 8005d5e:	d9c5      	bls.n	8005cec <HAL_RCC_OscConfig+0x218>
 8005d60:	e6f4      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d62:	f000 f9f1 	bl	8006148 <HAL_GetTick>
 8005d66:	1bc0      	subs	r0, r0, r7
 8005d68:	4540      	cmp	r0, r8
 8005d6a:	d9d5      	bls.n	8005d18 <HAL_RCC_OscConfig+0x244>
 8005d6c:	e6ee      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d108      	bne.n	8005d84 <HAL_RCC_OscConfig+0x2b0>
 8005d72:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005d74:	f043 0304 	orr.w	r3, r3, #4
 8005d78:	e7dc      	b.n	8005d34 <HAL_RCC_OscConfig+0x260>
 8005d7a:	bf00      	nop
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	40007000 	.word	0x40007000
 8005d84:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005d86:	f022 0204 	bic.w	r2, r2, #4
 8005d8a:	672a      	str	r2, [r5, #112]	; 0x70
 8005d8c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d94:	b133      	cbz	r3, 8005da4 <HAL_RCC_OscConfig+0x2d0>
 8005d96:	e7d2      	b.n	8005d3e <HAL_RCC_OscConfig+0x26a>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f000 f9d6 	bl	8006148 <HAL_GetTick>
 8005d9c:	1b80      	subs	r0, r0, r6
 8005d9e:	42b8      	cmp	r0, r7
 8005da0:	d9d3      	bls.n	8005d4a <HAL_RCC_OscConfig+0x276>
 8005da2:	e6d3      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f000 f9d0 	bl	8006148 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da8:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dac:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005db0:	0798      	lsls	r0, r3, #30
 8005db2:	d5cd      	bpl.n	8005d50 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db4:	f000 f9c8 	bl	8006148 <HAL_GetTick>
 8005db8:	1b80      	subs	r0, r0, r6
 8005dba:	42b8      	cmp	r0, r7
 8005dbc:	d9f7      	bls.n	8005dae <HAL_RCC_OscConfig+0x2da>
 8005dbe:	e6c5      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc0:	4d2f      	ldr	r5, [pc, #188]	; (8005e80 <HAL_RCC_OscConfig+0x3ac>)
 8005dc2:	68ab      	ldr	r3, [r5, #8]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	f43f aea2 	beq.w	8005b12 <HAL_RCC_OscConfig+0x3e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dce:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd0:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd6:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd8:	d143      	bne.n	8005e62 <HAL_RCC_OscConfig+0x38e>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f000 f9b5 	bl	8006148 <HAL_GetTick>
 8005dde:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	4e27      	ldr	r6, [pc, #156]	; (8005e80 <HAL_RCC_OscConfig+0x3ac>)
 8005de4:	0199      	lsls	r1, r3, #6
 8005de6:	d430      	bmi.n	8005e4a <HAL_RCC_OscConfig+0x376>
 8005de8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005dec:	fa92 f2a2 	rbit	r2, r2
 8005df0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005df4:	fab2 f082 	clz	r0, r2
 8005df8:	fa93 f3a3 	rbit	r3, r3
 8005dfc:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005e00:	fab3 f583 	clz	r5, r3
 8005e04:	fa92 f2a2 	rbit	r2, r2
 8005e08:	6a23      	ldr	r3, [r4, #32]
 8005e0a:	fab2 f182 	clz	r1, r2
 8005e0e:	69e7      	ldr	r7, [r4, #28]
 8005e10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e12:	431f      	orrs	r7, r3
 8005e14:	4082      	lsls	r2, r0
 8005e16:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 8005e1a:	ea43 0002 	orr.w	r0, r3, r2
 8005e1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e20:	085a      	lsrs	r2, r3, #1
 8005e22:	3a01      	subs	r2, #1
 8005e24:	fa02 f305 	lsl.w	r3, r2, r5
 8005e28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e2a:	4303      	orrs	r3, r0
 8005e2c:	408a      	lsls	r2, r1
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e32:	6833      	ldr	r3, [r6, #0]
 8005e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e38:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3a:	f000 f985 	bl	8006148 <HAL_GetTick>
 8005e3e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e40:	6833      	ldr	r3, [r6, #0]
 8005e42:	019a      	lsls	r2, r3, #6
 8005e44:	d507      	bpl.n	8005e56 <HAL_RCC_OscConfig+0x382>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8005e46:	2000      	movs	r0, #0
 8005e48:	e017      	b.n	8005e7a <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4a:	f000 f97d 	bl	8006148 <HAL_GetTick>
 8005e4e:	1bc0      	subs	r0, r0, r7
 8005e50:	2864      	cmp	r0, #100	; 0x64
 8005e52:	d9c5      	bls.n	8005de0 <HAL_RCC_OscConfig+0x30c>
 8005e54:	e67a      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e56:	f000 f977 	bl	8006148 <HAL_GetTick>
 8005e5a:	1b00      	subs	r0, r0, r4
 8005e5c:	2864      	cmp	r0, #100	; 0x64
 8005e5e:	d9ef      	bls.n	8005e40 <HAL_RCC_OscConfig+0x36c>
 8005e60:	e674      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f000 f971 	bl	8006148 <HAL_GetTick>
 8005e66:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	019b      	lsls	r3, r3, #6
 8005e6c:	d5eb      	bpl.n	8005e46 <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6e:	f000 f96b 	bl	8006148 <HAL_GetTick>
 8005e72:	1b00      	subs	r0, r0, r4
 8005e74:	2864      	cmp	r0, #100	; 0x64
 8005e76:	d9f7      	bls.n	8005e68 <HAL_RCC_OscConfig+0x394>
 8005e78:	e668      	b.n	8005b4c <HAL_RCC_OscConfig+0x78>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8005e7a:	b002      	add	sp, #8
 8005e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e80:	40023800 	.word	0x40023800

08005e84 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005e84:	4a6c      	ldr	r2, [pc, #432]	; (8006038 <HAL_RCC_ClockConfig+0x1b4>)
 8005e86:	6813      	ldr	r3, [r2, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	4604      	mov	r4, r0
 8005e94:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005e96:	d266      	bcs.n	8005f66 <HAL_RCC_ClockConfig+0xe2>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e98:	6813      	ldr	r3, [r2, #0]
 8005e9a:	f023 030f 	bic.w	r3, r3, #15
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ea2:	6813      	ldr	r3, [r2, #0]
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	d002      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x2e>
    {
      return HAL_ERROR;
 8005eac:	2001      	movs	r0, #1
 8005eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb2:	6801      	ldr	r1, [r0, #0]
 8005eb4:	078f      	lsls	r7, r1, #30
 8005eb6:	d506      	bpl.n	8005ec6 <HAL_RCC_ClockConfig+0x42>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb8:	4860      	ldr	r0, [pc, #384]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005eba:	6883      	ldr	r3, [r0, #8]
 8005ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec0:	68a3      	ldr	r3, [r4, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	6083      	str	r3, [r0, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ec6:	07ce      	lsls	r6, r1, #31
 8005ec8:	d40b      	bmi.n	8005ee2 <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eca:	6821      	ldr	r1, [r4, #0]
 8005ecc:	074d      	lsls	r5, r1, #29
 8005ece:	f140 80a3 	bpl.w	8006018 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed2:	485a      	ldr	r0, [pc, #360]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed4:	6883      	ldr	r3, [r0, #8]
 8005ed6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	6083      	str	r3, [r0, #8]
 8005ee0:	e09a      	b.n	8006018 <HAL_RCC_ClockConfig+0x194>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee2:	6862      	ldr	r2, [r4, #4]
 8005ee4:	4b55      	ldr	r3, [pc, #340]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee6:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee8:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eea:	d102      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0x6e>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eec:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8005ef0:	e006      	b.n	8005f00 <HAL_RCC_ClockConfig+0x7c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef2:	2a02      	cmp	r2, #2
 8005ef4:	d102      	bne.n	8005efc <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef6:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8005efa:	e001      	b.n	8005f00 <HAL_RCC_ClockConfig+0x7c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efc:	f011 0f02 	tst.w	r1, #2
 8005f00:	d0d4      	beq.n	8005eac <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f02:	6899      	ldr	r1, [r3, #8]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f04:	f241 3788 	movw	r7, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f08:	4e4c      	ldr	r6, [pc, #304]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f0a:	f021 0103 	bic.w	r1, r1, #3
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f12:	f000 f919 	bl	8006148 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f16:	6863      	ldr	r3, [r4, #4]
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f18:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_ClockConfig+0xb4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f1e:	68b3      	ldr	r3, [r6, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d0d0      	beq.n	8005eca <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f28:	f000 f90e 	bl	8006148 <HAL_GetTick>
 8005f2c:	1b40      	subs	r0, r0, r5
 8005f2e:	42b8      	cmp	r0, r7
 8005f30:	d9f5      	bls.n	8005f1e <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8005f32:	2003      	movs	r0, #3
 8005f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d10f      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xd8>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f3c:	68b3      	ldr	r3, [r6, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d0c1      	beq.n	8005eca <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f46:	f000 f8ff 	bl	8006148 <HAL_GetTick>
 8005f4a:	1b40      	subs	r0, r0, r5
 8005f4c:	42b8      	cmp	r0, r7
 8005f4e:	d9f5      	bls.n	8005f3c <HAL_RCC_ClockConfig+0xb8>
 8005f50:	e7ef      	b.n	8005f32 <HAL_RCC_ClockConfig+0xae>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f52:	f000 f8f9 	bl	8006148 <HAL_GetTick>
 8005f56:	1b40      	subs	r0, r0, r5
 8005f58:	42b8      	cmp	r0, r7
 8005f5a:	d8ea      	bhi.n	8005f32 <HAL_RCC_ClockConfig+0xae>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f5c:	68b3      	ldr	r3, [r6, #8]
 8005f5e:	f013 0f0c 	tst.w	r3, #12
 8005f62:	d1f6      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xce>
 8005f64:	e7b1      	b.n	8005eca <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f66:	6801      	ldr	r1, [r0, #0]
 8005f68:	0788      	lsls	r0, r1, #30
 8005f6a:	d506      	bpl.n	8005f7a <HAL_RCC_ClockConfig+0xf6>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f6c:	4833      	ldr	r0, [pc, #204]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005f6e:	6883      	ldr	r3, [r0, #8]
 8005f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f74:	68a3      	ldr	r3, [r4, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	6083      	str	r3, [r0, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f7a:	07ca      	lsls	r2, r1, #31
 8005f7c:	d40b      	bmi.n	8005f96 <HAL_RCC_ClockConfig+0x112>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7e:	4a2e      	ldr	r2, [pc, #184]	; (8006038 <HAL_RCC_ClockConfig+0x1b4>)
 8005f80:	6813      	ldr	r3, [r2, #0]
 8005f82:	f023 030f 	bic.w	r3, r3, #15
 8005f86:	432b      	orrs	r3, r5
 8005f88:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	429d      	cmp	r5, r3
 8005f92:	d18b      	bne.n	8005eac <HAL_RCC_ClockConfig+0x28>
 8005f94:	e799      	b.n	8005eca <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f96:	6862      	ldr	r2, [r4, #4]
 8005f98:	4b28      	ldr	r3, [pc, #160]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005f9a:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9c:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9e:	d102      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0x122>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa0:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8005fa4:	e006      	b.n	8005fb4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fa6:	2a02      	cmp	r2, #2
 8005fa8:	d102      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x12c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005faa:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8005fae:	e001      	b.n	8005fb4 <HAL_RCC_ClockConfig+0x130>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb0:	f011 0f02 	tst.w	r1, #2
 8005fb4:	f43f af7a 	beq.w	8005eac <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb8:	6899      	ldr	r1, [r3, #8]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fba:	f241 3888 	movw	r8, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fbe:	4f1f      	ldr	r7, [pc, #124]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fc0:	f021 0103 	bic.w	r1, r1, #3
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f000 f8be 	bl	8006148 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fcc:	6863      	ldr	r3, [r4, #4]
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fce:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d10a      	bne.n	8005fea <HAL_RCC_ClockConfig+0x166>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d0cf      	beq.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fde:	f000 f8b3 	bl	8006148 <HAL_GetTick>
 8005fe2:	1b80      	subs	r0, r0, r6
 8005fe4:	4540      	cmp	r0, r8
 8005fe6:	d9f5      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x150>
 8005fe8:	e7a3      	b.n	8005f32 <HAL_RCC_ClockConfig+0xae>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d10f      	bne.n	800600e <HAL_RCC_ClockConfig+0x18a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d0c2      	beq.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f000 f8a6 	bl	8006148 <HAL_GetTick>
 8005ffc:	1b80      	subs	r0, r0, r6
 8005ffe:	4540      	cmp	r0, r8
 8006000:	d9f5      	bls.n	8005fee <HAL_RCC_ClockConfig+0x16a>
 8006002:	e796      	b.n	8005f32 <HAL_RCC_ClockConfig+0xae>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006004:	f000 f8a0 	bl	8006148 <HAL_GetTick>
 8006008:	1b80      	subs	r0, r0, r6
 800600a:	4540      	cmp	r0, r8
 800600c:	d891      	bhi.n	8005f32 <HAL_RCC_ClockConfig+0xae>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f013 0f0c 	tst.w	r3, #12
 8006014:	d1f6      	bne.n	8006004 <HAL_RCC_ClockConfig+0x180>
 8006016:	e7b2      	b.n	8005f7e <HAL_RCC_ClockConfig+0xfa>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006018:	070b      	lsls	r3, r1, #28
 800601a:	d507      	bpl.n	800602c <HAL_RCC_ClockConfig+0x1a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800601c:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 800601e:	6921      	ldr	r1, [r4, #16]
 8006020:	6893      	ldr	r3, [r2, #8]
 8006022:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006026:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800602a:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800602c:	200f      	movs	r0, #15
 800602e:	f000 f85f 	bl	80060f0 <HAL_InitTick>
  
  return HAL_OK;
 8006032:	2000      	movs	r0, #0
}
 8006034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006038:	40023c00 	.word	0x40023c00
 800603c:	40023800 	.word	0x40023800

08006040 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006040:	491b      	ldr	r1, [pc, #108]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x70>)
 8006042:	688b      	ldr	r3, [r1, #8]
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	2b04      	cmp	r3, #4
 800604a:	d02c      	beq.n	80060a6 <HAL_RCC_GetSysClockFreq+0x66>
 800604c:	2b08      	cmp	r3, #8
 800604e:	d12c      	bne.n	80060aa <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006050:	6848      	ldr	r0, [r1, #4]
 8006052:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006056:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006058:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800605c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8006060:	684b      	ldr	r3, [r1, #4]
 8006062:	fa92 f2a2 	rbit	r2, r2
 8006066:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800606a:	fab2 f282 	clz	r2, r2
 800606e:	ea01 0103 	and.w	r1, r1, r3
 8006072:	fa21 f102 	lsr.w	r1, r1, r2
 8006076:	bf14      	ite	ne
 8006078:	4a0e      	ldrne	r2, [pc, #56]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800607a:	4a0f      	ldreq	r2, [pc, #60]	; (80060b8 <HAL_RCC_GetSysClockFreq+0x78>)
 800607c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8006080:	4a0b      	ldr	r2, [pc, #44]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8006082:	fb00 f301 	mul.w	r3, r0, r1
 8006086:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800608a:	6852      	ldr	r2, [r2, #4]
 800608c:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8006090:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8006094:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8006098:	fa22 f000 	lsr.w	r0, r2, r0
 800609c:	3001      	adds	r0, #1
 800609e:	0040      	lsls	r0, r0, #1
 80060a0:	fbb3 f0f0 	udiv	r0, r3, r0
 80060a4:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060a6:	4803      	ldr	r0, [pc, #12]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x74>)
 80060a8:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060aa:	4803      	ldr	r0, [pc, #12]	; (80060b8 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800
 80060b4:	017d7840 	.word	0x017d7840
 80060b8:	00f42400 	.word	0x00f42400

080060bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060bc:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80060be:	f7ff ffbf 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <HAL_RCC_GetHCLKFreq+0x28>)
 80060c4:	22f0      	movs	r2, #240	; 0xf0
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	fa92 f2a2 	rbit	r2, r2
 80060cc:	fab2 f282 	clz	r2, r2
 80060d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d4:	40d3      	lsrs	r3, r2
 80060d6:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80060d8:	5cd3      	ldrb	r3, [r2, r3]
 80060da:	40d8      	lsrs	r0, r3
 80060dc:	4b03      	ldr	r3, [pc, #12]	; (80060ec <HAL_RCC_GetHCLKFreq+0x30>)
 80060de:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80060e0:	bd08      	pop	{r3, pc}
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800
 80060e8:	080084b0 	.word	0x080084b0
 80060ec:	20000000 	.word	0x20000000

080060f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80060f4:	f7ff ffe2 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 80060f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8006100:	f000 f984 	bl	800640c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8006104:	2200      	movs	r2, #0
 8006106:	4621      	mov	r1, r4
 8006108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800610c:	f000 f93a 	bl	8006384 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8006110:	2000      	movs	r0, #0
 8006112:	bd10      	pop	{r4, pc}

08006114 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8006114:	4a07      	ldr	r2, [pc, #28]	; (8006134 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006116:	2003      	movs	r0, #3
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006118:	b508      	push	{r3, lr}
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006120:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006122:	f000 f91d 	bl	8006360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006126:	200f      	movs	r0, #15
 8006128:	f7ff ffe2 	bl	80060f0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800612c:	f7fa ffe6 	bl	80010fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8006130:	2000      	movs	r0, #0
 8006132:	bd08      	pop	{r3, pc}
 8006134:	40023c00 	.word	0x40023c00

08006138 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8006138:	4a02      	ldr	r2, [pc, #8]	; (8006144 <HAL_IncTick+0xc>)
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	200008f4 	.word	0x200008f4

08006148 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006148:	4b01      	ldr	r3, [pc, #4]	; (8006150 <HAL_GetTick+0x8>)
 800614a:	6818      	ldr	r0, [r3, #0]
}
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	200008f4 	.word	0x200008f4

08006154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006154:	b513      	push	{r0, r1, r4, lr}
 8006156:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8006158:	f7ff fff6 	bl	8006148 <HAL_GetTick>
 800615c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800615e:	f7ff fff3 	bl	8006148 <HAL_GetTick>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	1b00      	subs	r0, r0, r4
 8006166:	4298      	cmp	r0, r3
 8006168:	d3f9      	bcc.n	800615e <HAL_Delay+0xa>
  {
  }
}
 800616a:	b002      	add	sp, #8
 800616c:	bd10      	pop	{r4, pc}
	...

08006170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006174:	4f72      	ldr	r7, [pc, #456]	; (8006340 <HAL_GPIO_Init+0x1d0>)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006176:	b085      	sub	sp, #20
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006178:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800617a:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617c:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8006348 <HAL_GPIO_Init+0x1d8>
 8006180:	46be      	mov	lr, r7

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006182:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800634c <HAL_GPIO_Init+0x1dc>
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006186:	9301      	str	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006188:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800618a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800618c:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800618e:	ea34 0303 	bics.w	r3, r4, r3
 8006192:	f040 80cd 	bne.w	8006330 <HAL_GPIO_Init+0x1c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006196:	684d      	ldr	r5, [r1, #4]
 8006198:	f025 0a10 	bic.w	sl, r5, #16
 800619c:	f1ba 0f02 	cmp.w	sl, #2
 80061a0:	d114      	bne.n	80061cc <HAL_GPIO_Init+0x5c>
 80061a2:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061a6:	f002 0b07 	and.w	fp, r2, #7
 80061aa:	230f      	movs	r3, #15
 80061ac:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80061b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80061b4:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061b8:	fa03 f30b 	lsl.w	r3, r3, fp
 80061bc:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80061c0:	690b      	ldr	r3, [r1, #16]
 80061c2:	fa03 f30b 	lsl.w	r3, r3, fp
 80061c6:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3] = temp;
 80061c8:	f8c9 3020 	str.w	r3, [r9, #32]
 80061cc:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061d0:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061d4:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061d6:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061da:	fa09 f90b 	lsl.w	r9, r9, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061e2:	fa06 f60b 	lsl.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061e6:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061ea:	f1ba 0f01 	cmp.w	sl, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061ee:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061f2:	ea43 0306 	orr.w	r3, r3, r6
      GPIOx->MODER = temp;
 80061f6:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061f8:	d80f      	bhi.n	800621a <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061fa:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 80061fc:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80061fe:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8006202:	fa06 f60b 	lsl.w	r6, r6, fp
 8006206:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8006208:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800620a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800620e:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006210:	4096      	lsls	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006212:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006216:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8006218:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800621a:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800621c:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006220:	688b      	ldr	r3, [r1, #8]
 8006222:	fa03 f30b 	lsl.w	r3, r3, fp
 8006226:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800622a:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800622c:	00eb      	lsls	r3, r5, #3
 800622e:	d57f      	bpl.n	8006330 <HAL_GPIO_Init+0x1c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006230:	2300      	movs	r3, #0
 8006232:	f022 0903 	bic.w	r9, r2, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006236:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800623a:	9303      	str	r3, [sp, #12]
 800623c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8006240:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006244:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006248:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800624c:	4b3d      	ldr	r3, [pc, #244]	; (8006344 <HAL_GPIO_Init+0x1d4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800624e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006252:	4298      	cmp	r0, r3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006254:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8006258:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800625c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8006260:	9603      	str	r6, [sp, #12]
 8006262:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006264:	f04f 060f 	mov.w	r6, #15
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8006268:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800626c:	fa06 f60a 	lsl.w	r6, r6, sl
 8006270:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006274:	d024      	beq.n	80062c0 <HAL_GPIO_Init+0x150>
 8006276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800627a:	4298      	cmp	r0, r3
 800627c:	d022      	beq.n	80062c4 <HAL_GPIO_Init+0x154>
 800627e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006282:	4298      	cmp	r0, r3
 8006284:	d020      	beq.n	80062c8 <HAL_GPIO_Init+0x158>
 8006286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628a:	4298      	cmp	r0, r3
 800628c:	d01e      	beq.n	80062cc <HAL_GPIO_Init+0x15c>
 800628e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006292:	4298      	cmp	r0, r3
 8006294:	d01c      	beq.n	80062d0 <HAL_GPIO_Init+0x160>
 8006296:	4540      	cmp	r0, r8
 8006298:	d01c      	beq.n	80062d4 <HAL_GPIO_Init+0x164>
 800629a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629e:	4298      	cmp	r0, r3
 80062a0:	d01a      	beq.n	80062d8 <HAL_GPIO_Init+0x168>
 80062a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a6:	4298      	cmp	r0, r3
 80062a8:	d018      	beq.n	80062dc <HAL_GPIO_Init+0x16c>
 80062aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ae:	4298      	cmp	r0, r3
 80062b0:	d016      	beq.n	80062e0 <HAL_GPIO_Init+0x170>
 80062b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bf14      	ite	ne
 80062ba:	230a      	movne	r3, #10
 80062bc:	2309      	moveq	r3, #9
 80062be:	e010      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062c0:	2300      	movs	r3, #0
 80062c2:	e00e      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e00c      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e00a      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062cc:	2303      	movs	r3, #3
 80062ce:	e008      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062d0:	2304      	movs	r3, #4
 80062d2:	e006      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062d4:	2305      	movs	r3, #5
 80062d6:	e004      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062d8:	2306      	movs	r3, #6
 80062da:	e002      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062dc:	2307      	movs	r3, #7
 80062de:	e000      	b.n	80062e2 <HAL_GPIO_Init+0x172>
 80062e0:	2308      	movs	r3, #8
 80062e2:	fa03 f30a 	lsl.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062e6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80062ea:	ea43 0306 	orr.w	r3, r3, r6
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80062ee:	ea6f 0604 	mvn.w	r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 80062f2:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062f6:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80062f8:	bf0c      	ite	eq
 80062fa:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80062fc:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062fe:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8006302:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8006306:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800630a:	bf0c      	ite	eq
 800630c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800630e:	4323      	orrne	r3, r4
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006310:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8006314:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006316:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8006318:	bf0c      	ite	eq
 800631a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800631c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800631e:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8006320:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8006324:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8006328:	bf54      	ite	pl
 800632a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800632c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800632e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006330:	3201      	adds	r2, #1
 8006332:	2a10      	cmp	r2, #16
 8006334:	f47f af28 	bne.w	8006188 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8006338:	b005      	add	sp, #20
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633e:	bf00      	nop
 8006340:	40013c00 	.word	0x40013c00
 8006344:	40020000 	.word	0x40020000
 8006348:	40023800 	.word	0x40023800
 800634c:	40021400 	.word	0x40021400

08006350 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006350:	b902      	cbnz	r2, 8006354 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006352:	0409      	lsls	r1, r1, #16
 8006354:	6181      	str	r1, [r0, #24]
 8006356:	4770      	bx	lr

08006358 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8006358:	6943      	ldr	r3, [r0, #20]
 800635a:	4059      	eors	r1, r3
 800635c:	6141      	str	r1, [r0, #20]
 800635e:	4770      	bx	lr

08006360 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006360:	4a07      	ldr	r2, [pc, #28]	; (8006380 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8006362:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006364:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8006366:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800636a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800637a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800637c:	60d3      	str	r3, [r2, #12]
 800637e:	4770      	bx	lr
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <HAL_NVIC_SetPriority+0x68>)
 8006386:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006388:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800638c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800638e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006392:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006394:	2c04      	cmp	r4, #4
 8006396:	bf28      	it	cs
 8006398:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639a:	2d06      	cmp	r5, #6

  return (
 800639c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063a0:	bf8c      	ite	hi
 80063a2:	3b03      	subhi	r3, #3
 80063a4:	2300      	movls	r3, #0

  return (
 80063a6:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80063aa:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80063ac:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80063b0:	ea04 0401 	and.w	r4, r4, r1
 80063b4:	fa04 f403 	lsl.w	r4, r4, r3
 80063b8:	fa05 f303 	lsl.w	r3, r5, r3
 80063bc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80063c0:	ea02 0203 	and.w	r2, r2, r3
 80063c4:	ea42 0204 	orr.w	r2, r2, r4
 80063c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80063cc:	da05      	bge.n	80063da <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ce:	f000 000f 	and.w	r0, r0, #15
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <HAL_NVIC_SetPriority+0x6c>)
 80063d6:	541a      	strb	r2, [r3, r0]
 80063d8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80063e4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80063e8:	bd30      	pop	{r4, r5, pc}
 80063ea:	bf00      	nop
 80063ec:	e000ed00 	.word	0xe000ed00
 80063f0:	e000ed14 	.word	0xe000ed14

080063f4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80063f4:	0942      	lsrs	r2, r0, #5
 80063f6:	2301      	movs	r3, #1
 80063f8:	f000 001f 	and.w	r0, r0, #31
 80063fc:	fa03 f000 	lsl.w	r0, r3, r0
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <HAL_NVIC_EnableIRQ+0x14>)
 8006402:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006406:	4770      	bx	lr
 8006408:	e000e100 	.word	0xe000e100

0800640c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800640c:	3801      	subs	r0, #1
 800640e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006412:	d20a      	bcs.n	800642a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006414:	4b06      	ldr	r3, [pc, #24]	; (8006430 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006416:	21f0      	movs	r1, #240	; 0xf0
 8006418:	4a06      	ldr	r2, [pc, #24]	; (8006434 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800641a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800641c:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800641e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006422:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006424:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800642a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	e000e010 	.word	0xe000e010
 8006434:	e000ed00 	.word	0xe000ed00

08006438 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006438:	7843      	ldrb	r3, [r0, #1]
 800643a:	4911      	ldr	r1, [pc, #68]	; (8006480 <HAL_MPU_ConfigRegion+0x48>)
 800643c:	608b      	str	r3, [r1, #8]

  if ((MPU_Init->Enable) != RESET)
 800643e:	7803      	ldrb	r3, [r0, #0]
 8006440:	b1db      	cbz	r3, 800647a <HAL_MPU_ConfigRegion+0x42>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006442:	6843      	ldr	r3, [r0, #4]
 8006444:	60cb      	str	r3, [r1, #12]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006446:	7ac3      	ldrb	r3, [r0, #11]
 8006448:	7b02      	ldrb	r2, [r0, #12]
 800644a:	061b      	lsls	r3, r3, #24
 800644c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006450:	7802      	ldrb	r2, [r0, #0]
 8006452:	4313      	orrs	r3, r2
 8006454:	7a82      	ldrb	r2, [r0, #10]
 8006456:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 800645a:	7b42      	ldrb	r2, [r0, #13]
 800645c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8006460:	7b82      	ldrb	r2, [r0, #14]
 8006462:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006466:	7bc2      	ldrb	r2, [r0, #15]
 8006468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800646c:	7a42      	ldrb	r2, [r0, #9]
 800646e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006472:	7a02      	ldrb	r2, [r0, #8]
 8006474:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006478:	e000      	b.n	800647c <HAL_MPU_ConfigRegion+0x44>
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800647a:	60cb      	str	r3, [r1, #12]
    MPU->RASR = 0x00;
 800647c:	610b      	str	r3, [r1, #16]
 800647e:	4770      	bx	lr
 8006480:	e000ed90 	.word	0xe000ed90

08006484 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006484:	2300      	movs	r3, #0
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006486:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800648c:	4c19      	ldr	r4, [pc, #100]	; (80064f4 <HAL_PWREx_EnableOverDrive+0x70>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800648e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006490:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006496:	641a      	str	r2, [r3, #64]	; 0x40
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a8:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064aa:	f7ff fe4d 	bl	8006148 <HAL_GetTick>
 80064ae:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064b0:	686b      	ldr	r3, [r5, #4]
 80064b2:	4c10      	ldr	r4, [pc, #64]	; (80064f4 <HAL_PWREx_EnableOverDrive+0x70>)
 80064b4:	03da      	lsls	r2, r3, #15
 80064b6:	d407      	bmi.n	80064c8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064b8:	f7ff fe46 	bl	8006148 <HAL_GetTick>
 80064bc:	1b80      	subs	r0, r0, r6
 80064be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80064c2:	d9f5      	bls.n	80064b0 <HAL_PWREx_EnableOverDrive+0x2c>
    {
      return HAL_TIMEOUT;
 80064c4:	2003      	movs	r0, #3
 80064c6:	e011      	b.n	80064ec <HAL_PWREx_EnableOverDrive+0x68>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ce:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064d0:	f7ff fe3a 	bl	8006148 <HAL_GetTick>
 80064d4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	039b      	lsls	r3, r3, #14
 80064da:	d406      	bmi.n	80064ea <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064dc:	f7ff fe34 	bl	8006148 <HAL_GetTick>
 80064e0:	1b40      	subs	r0, r0, r5
 80064e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80064e6:	d9f6      	bls.n	80064d6 <HAL_PWREx_EnableOverDrive+0x52>
 80064e8:	e7ec      	b.n	80064c4 <HAL_PWREx_EnableOverDrive+0x40>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80064ea:	2000      	movs	r0, #0
}
 80064ec:	b002      	add	sp, #8
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	40007000 	.word	0x40007000

080064f8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80064f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80064fc:	4c22      	ldr	r4, [pc, #136]	; (8006588 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80064fe:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006500:	4d22      	ldr	r5, [pc, #136]	; (800658c <BSP_SDRAM_Initialization_sequence+0x94>)
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 8006502:	f04f 0800 	mov.w	r8, #0
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006506:	2710      	movs	r7, #16
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006508:	4621      	mov	r1, r4
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800650a:	4681      	mov	r9, r0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800650c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006510:	4628      	mov	r0, r5
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 8006512:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 8006516:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006518:	f8c4 800c 	str.w	r8, [r4, #12]
{
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800651c:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006520:	f001 fe06 	bl	8008130 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006524:	4630      	mov	r0, r6
 8006526:	f7ff fe15 	bl	8006154 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800652a:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800652c:	4621      	mov	r1, r4
 800652e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006532:	4628      	mov	r0, r5
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 8006534:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8006536:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800653a:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800653e:	f001 fdf7 	bl	8008130 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006542:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006544:	4621      	mov	r1, r4
 8006546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800654a:	4628      	mov	r0, r5
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 800654c:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006550:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8006554:	2308      	movs	r3, #8
 8006556:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006558:	f001 fdea 	bl	8008130 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800655c:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006564:	4621      	mov	r1, r4
 8006566:	4628      	mov	r0, r5

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006568:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800656a:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 800656c:	60a6      	str	r6, [r4, #8]
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800656e:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006576:	f001 fddb 	bl	8008130 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800657a:	4649      	mov	r1, r9
 800657c:	4628      	mov	r0, r5
 800657e:	f001 fdee 	bl	800815e <HAL_SDRAM_ProgramRefreshRate>
}
 8006582:	b003      	add	sp, #12
 8006584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006588:	200008f8 	.word	0x200008f8
 800658c:	20000908 	.word	0x20000908

08006590 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006590:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006592:	4b59      	ldr	r3, [pc, #356]	; (80066f8 <BSP_SDRAM_MspInit+0x168>)
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006594:	b08e      	sub	sp, #56	; 0x38
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006596:	2500      	movs	r5, #0
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006598:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800659a:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800659c:	4857      	ldr	r0, [pc, #348]	; (80066fc <BSP_SDRAM_MspInit+0x16c>)
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800659e:	9501      	str	r5, [sp, #4]
 80065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38
 80065a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065aa:	f002 0201 	and.w	r2, r2, #1
 80065ae:	9201      	str	r2, [sp, #4]
 80065b0:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80065b2:	9502      	str	r5, [sp, #8]
 80065b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
 80065bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065be:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80065c2:	9202      	str	r2, [sp, #8]
 80065c4:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c6:	9503      	str	r5, [sp, #12]
 80065c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ca:	f042 0204 	orr.w	r2, r2, #4
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
 80065d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d2:	f002 0204 	and.w	r2, r2, #4
 80065d6:	9203      	str	r2, [sp, #12]
 80065d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065da:	9504      	str	r5, [sp, #16]
 80065dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065de:	f042 0208 	orr.w	r2, r2, #8
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
 80065e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e6:	f002 0208 	and.w	r2, r2, #8
 80065ea:	9204      	str	r2, [sp, #16]
 80065ec:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80065ee:	9505      	str	r5, [sp, #20]
 80065f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f2:	f042 0210 	orr.w	r2, r2, #16
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
 80065f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fa:	f002 0210 	and.w	r2, r2, #16
 80065fe:	9205      	str	r2, [sp, #20]
 8006600:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006602:	9506      	str	r5, [sp, #24]
 8006604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006606:	f042 0220 	orr.w	r2, r2, #32
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
 800660c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800660e:	f002 0220 	and.w	r2, r2, #32
 8006612:	9206      	str	r2, [sp, #24]
 8006614:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006616:	9507      	str	r5, [sp, #28]
 8006618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
 8006620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006622:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006626:	9207      	str	r2, [sp, #28]
 8006628:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800662a:	9508      	str	r5, [sp, #32]
 800662c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800662e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006634:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006638:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006642:	2302      	movs	r3, #2
 8006644:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006646:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006648:	230c      	movs	r3, #12
 800664a:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800664c:	2308      	movs	r3, #8
 800664e:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006652:	4621      	mov	r1, r4
 8006654:	f7ff fd8c 	bl	8006170 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006658:	f24c 730b 	movw	r3, #50955	; 0xc70b
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800665c:	4621      	mov	r1, r4
 800665e:	4828      	ldr	r0, [pc, #160]	; (8006700 <BSP_SDRAM_MspInit+0x170>)
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006660:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006662:	f7ff fd85 	bl	8006170 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006666:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800666a:	4621      	mov	r1, r4
 800666c:	4825      	ldr	r0, [pc, #148]	; (8006704 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006670:	f7ff fd7e 	bl	8006170 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006674:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006678:	4621      	mov	r1, r4
 800667a:	4823      	ldr	r0, [pc, #140]	; (8006708 <BSP_SDRAM_MspInit+0x178>)
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800667c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800667e:	f7ff fd77 	bl	8006170 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006682:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006686:	4621      	mov	r1, r4
 8006688:	4820      	ldr	r0, [pc, #128]	; (800670c <BSP_SDRAM_MspInit+0x17c>)
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800668a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800668c:	f7ff fd70 	bl	8006170 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006690:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006692:	4621      	mov	r1, r4
 8006694:	481e      	ldr	r0, [pc, #120]	; (8006710 <BSP_SDRAM_MspInit+0x180>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006696:	4c1f      	ldr	r4, [pc, #124]	; (8006714 <BSP_SDRAM_MspInit+0x184>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006698:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800669a:	f7ff fd69 	bl	8006170 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800669e:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80066a0:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80066a2:	4620      	mov	r0, r4
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80066a4:	6334      	str	r4, [r6, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80066a6:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80066a8:	f44f 7300 	mov.w	r3, #512	; 0x200
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80066ac:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80066ae:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80066b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
 80066b4:	61e5      	str	r5, [r4, #28]
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80066b6:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80066b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80066bc:	6265      	str	r5, [r4, #36]	; 0x24
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80066be:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80066c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80066c4:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80066c6:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80066c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80066cc:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80066ce:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <BSP_SDRAM_MspInit+0x188>)
 80066d6:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80066d8:	f001 fce6 	bl	80080a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80066dc:	4620      	mov	r0, r4
 80066de:	f001 fca9 	bl	8008034 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 80066e2:	462a      	mov	r2, r5
 80066e4:	2105      	movs	r1, #5
 80066e6:	2038      	movs	r0, #56	; 0x38
 80066e8:	f7ff fe4c 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80066ec:	2038      	movs	r0, #56	; 0x38
 80066ee:	f7ff fe81 	bl	80063f4 <HAL_NVIC_EnableIRQ>
}
 80066f2:	b00e      	add	sp, #56	; 0x38
 80066f4:	bd70      	pop	{r4, r5, r6, pc}
 80066f6:	bf00      	nop
 80066f8:	40023800 	.word	0x40023800
 80066fc:	40020800 	.word	0x40020800
 8006700:	40020c00 	.word	0x40020c00
 8006704:	40021000 	.word	0x40021000
 8006708:	40021400 	.word	0x40021400
 800670c:	40021800 	.word	0x40021800
 8006710:	40021c00 	.word	0x40021c00
 8006714:	2000093c 	.word	0x2000093c
 8006718:	40026410 	.word	0x40026410

0800671c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800671c:	b538      	push	{r3, r4, r5, lr}
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800671e:	4c1a      	ldr	r4, [pc, #104]	; (8006788 <BSP_SDRAM_Init+0x6c>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
 8006720:	2107      	movs	r1, #7
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <BSP_SDRAM_Init+0x70>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 8006724:	2204      	movs	r2, #4
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006726:	4d1a      	ldr	r5, [pc, #104]	; (8006790 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006728:	4620      	mov	r0, r4
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800672a:	6023      	str	r3, [r4, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800672c:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 800672e:	6069      	str	r1, [r5, #4]
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006730:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
 8006732:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 8006734:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 8006736:	61ab      	str	r3, [r5, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006738:	2310      	movs	r3, #16
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
 800673a:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800673c:	2100      	movs	r1, #0
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800673e:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006740:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006742:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006744:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006746:	f44f 7380 	mov.w	r3, #256	; 0x100
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800674a:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800674c:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800674e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006752:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006754:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800675a:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800675c:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800675e:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 8006760:	60aa      	str	r2, [r5, #8]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006762:	f7ff ff15 	bl	8006590 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	f001 fcc1 	bl	80080f0 <HAL_SDRAM_Init>
 800676e:	4c09      	ldr	r4, [pc, #36]	; (8006794 <BSP_SDRAM_Init+0x78>)
 8006770:	b110      	cbz	r0, 8006778 <BSP_SDRAM_Init+0x5c>
  {
    sdramstatus = SDRAM_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	7023      	strb	r3, [r4, #0]
 8006776:	e000      	b.n	800677a <BSP_SDRAM_Init+0x5e>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006778:	7020      	strb	r0, [r4, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800677a:	f240 6003 	movw	r0, #1539	; 0x603
 800677e:	f7ff febb 	bl	80064f8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
}
 8006782:	7820      	ldrb	r0, [r4, #0]
 8006784:	bd38      	pop	{r3, r4, r5, pc}
 8006786:	bf00      	nop
 8006788:	20000908 	.word	0x20000908
 800678c:	a0000140 	.word	0xa0000140
 8006790:	20000994 	.word	0x20000994
 8006794:	200008a4 	.word	0x200008a4

08006798 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006798:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800679c:	4616      	mov	r6, r2
 800679e:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80067a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80067a4:	4b17      	ldr	r3, [pc, #92]	; (8006804 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80067a6:	460d      	mov	r5, r1
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80067a8:	f04f 0e34 	mov.w	lr, #52	; 0x34
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80067ac:	605a      	str	r2, [r3, #4]
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80067ae:	4680      	mov	r8, r0
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80067b0:	4a15      	ldr	r2, [pc, #84]	; (8006808 <LL_FillBuffer+0x70>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80067b2:	9808      	ldr	r0, [sp, #32]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80067b4:	6811      	ldr	r1, [r2, #0]
 80067b6:	4a15      	ldr	r2, [pc, #84]	; (800680c <LL_FillBuffer+0x74>)
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80067b8:	60d8      	str	r0, [r3, #12]
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80067ba:	fb0e 2201 	mla	r2, lr, r1, r2
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80067be:	4811      	ldr	r0, [pc, #68]	; (8006804 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80067c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80067c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067c4:	2a02      	cmp	r2, #2
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80067c6:	bf18      	it	ne
 80067c8:	2200      	movne	r2, #0
 80067ca:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
 80067cc:	4a10      	ldr	r2, [pc, #64]	; (8006810 <LL_FillBuffer+0x78>)
 80067ce:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80067d0:	f000 fe37 	bl	8007442 <HAL_DMA2D_Init>
 80067d4:	b998      	cbnz	r0, 80067fe <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80067d6:	4641      	mov	r1, r8
 80067d8:	480a      	ldr	r0, [pc, #40]	; (8006804 <LL_FillBuffer+0x6c>)
 80067da:	f000 fee1 	bl	80075a0 <HAL_DMA2D_ConfigLayer>
 80067de:	b970      	cbnz	r0, 80067fe <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80067e0:	9700      	str	r7, [sp, #0]
 80067e2:	4633      	mov	r3, r6
 80067e4:	462a      	mov	r2, r5
 80067e6:	4621      	mov	r1, r4
 80067e8:	4806      	ldr	r0, [pc, #24]	; (8006804 <LL_FillBuffer+0x6c>)
 80067ea:	f000 fe56 	bl	800749a <HAL_DMA2D_Start>
 80067ee:	b930      	cbnz	r0, 80067fe <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80067f0:	210a      	movs	r1, #10
 80067f2:	4804      	ldr	r0, [pc, #16]	; (8006804 <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 80067f4:	b002      	add	sp, #8
 80067f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80067fa:	f000 be6e 	b.w	80074da <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80067fe:	b002      	add	sp, #8
 8006800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006804:	20000af8 	.word	0x20000af8
 8006808:	200009b0 	.word	0x200009b0
 800680c:	200009b4 	.word	0x200009b4
 8006810:	4002b000 	.word	0x4002b000

08006814 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006814:	4b03      	ldr	r3, [pc, #12]	; (8006824 <BSP_LCD_GetXSize+0x10>)
 8006816:	2134      	movs	r1, #52	; 0x34
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4b03      	ldr	r3, [pc, #12]	; (8006828 <BSP_LCD_GetXSize+0x14>)
 800681c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8006820:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8006822:	4770      	bx	lr
 8006824:	200009b0 	.word	0x200009b0
 8006828:	200009b4 	.word	0x200009b4

0800682c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <BSP_LCD_GetYSize+0x10>)
 800682e:	2134      	movs	r1, #52	; 0x34
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b03      	ldr	r3, [pc, #12]	; (8006840 <BSP_LCD_GetYSize+0x14>)
 8006834:	fb01 3302 	mla	r3, r1, r2, r3
}
 8006838:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800683a:	4770      	bx	lr
 800683c:	200009b0 	.word	0x200009b0
 8006840:	200009b4 	.word	0x200009b4

08006844 <BSP_LCD_LayerDefaultInit>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006844:	4a19      	ldr	r2, [pc, #100]	; (80068ac <BSP_LCD_LayerDefaultInit+0x68>)
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006846:	2300      	movs	r3, #0
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006848:	b530      	push	{r4, r5, lr}
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800684a:	6812      	ldr	r2, [r2, #0]
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800684c:	4604      	mov	r4, r0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800684e:	2534      	movs	r5, #52	; 0x34
 8006850:	4817      	ldr	r0, [pc, #92]	; (80068b0 <BSP_LCD_LayerDefaultInit+0x6c>)
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006852:	b08f      	sub	sp, #60	; 0x3c
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006854:	fb05 0202 	mla	r2, r5, r2, r0
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006858:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
 800685a:	9303      	str	r3, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800685c:	9305      	str	r3, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
 800685e:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8006860:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8006864:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8006868:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800686c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006870:	6e15      	ldr	r5, [r2, #96]	; 0x60
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
 8006872:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8006874:	21ff      	movs	r1, #255	; 0xff
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006876:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006878:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800687a:	2307      	movs	r3, #7

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800687c:	9204      	str	r2, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
 800687e:	9106      	str	r1, [sp, #24]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006880:	a901      	add	r1, sp, #4
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8006882:	920c      	str	r2, [sp, #48]	; 0x30
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006884:	4622      	mov	r2, r4
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006886:	9309      	str	r3, [sp, #36]	; 0x24
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006888:	9502      	str	r5, [sp, #8]
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800688a:	950b      	str	r5, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800688c:	f000 ffec 	bl	8007868 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006890:	200c      	movs	r0, #12
 8006892:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <BSP_LCD_LayerDefaultInit+0x70>)
 8006894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006898:	4360      	muls	r0, r4
 800689a:	181a      	adds	r2, r3, r0
 800689c:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 800689e:	4906      	ldr	r1, [pc, #24]	; (80068b8 <BSP_LCD_LayerDefaultInit+0x74>)
 80068a0:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80068a2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80068a6:	501a      	str	r2, [r3, r0]
}
 80068a8:	b00f      	add	sp, #60	; 0x3c
 80068aa:	bd30      	pop	{r4, r5, pc}
 80068ac:	200009b0 	.word	0x200009b0
 80068b0:	200009b4 	.word	0x200009b4
 80068b4:	20000a5c 	.word	0x20000a5c
 80068b8:	200008b8 	.word	0x200008b8

080068bc <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 80068bc:	4b01      	ldr	r3, [pc, #4]	; (80068c4 <BSP_LCD_SelectLayer+0x8>)
 80068be:	6018      	str	r0, [r3, #0]
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	200009b0 	.word	0x200009b0

080068c8 <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 80068c8:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <BSP_LCD_SetTextColor+0x10>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	230c      	movs	r3, #12
 80068ce:	4353      	muls	r3, r2
 80068d0:	4a02      	ldr	r2, [pc, #8]	; (80068dc <BSP_LCD_SetTextColor+0x14>)
 80068d2:	50d0      	str	r0, [r2, r3]
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	200009b0 	.word	0x200009b0
 80068dc:	20000a5c 	.word	0x20000a5c

080068e0 <BSP_LCD_SetBackColor>:
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[ActiveLayer].BackColor = Color;
 80068e0:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <BSP_LCD_SetBackColor+0x10>)
 80068e2:	210c      	movs	r1, #12
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b03      	ldr	r3, [pc, #12]	; (80068f4 <BSP_LCD_SetBackColor+0x14>)
 80068e8:	fb01 3302 	mla	r3, r1, r2, r3
 80068ec:	6058      	str	r0, [r3, #4]
 80068ee:	4770      	bx	lr
 80068f0:	200009b0 	.word	0x200009b0
 80068f4:	20000a5c 	.word	0x20000a5c

080068f8 <BSP_LCD_SetFont>:
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 80068f8:	4b03      	ldr	r3, [pc, #12]	; (8006908 <BSP_LCD_SetFont+0x10>)
 80068fa:	210c      	movs	r1, #12
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b03      	ldr	r3, [pc, #12]	; (800690c <BSP_LCD_SetFont+0x14>)
 8006900:	fb01 3302 	mla	r3, r1, r2, r3
 8006904:	6098      	str	r0, [r3, #8]
 8006906:	4770      	bx	lr
 8006908:	200009b0 	.word	0x200009b0
 800690c:	20000a5c 	.word	0x20000a5c

08006910 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp[ActiveLayer].pFont;
 8006910:	4b03      	ldr	r3, [pc, #12]	; (8006920 <BSP_LCD_GetFont+0x10>)
 8006912:	210c      	movs	r1, #12
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b03      	ldr	r3, [pc, #12]	; (8006924 <BSP_LCD_GetFont+0x14>)
 8006918:	fb01 3302 	mla	r3, r1, r2, r3
}
 800691c:	6898      	ldr	r0, [r3, #8]
 800691e:	4770      	bx	lr
 8006920:	200009b0 	.word	0x200009b0
 8006924:	20000a5c 	.word	0x20000a5c

08006928 <BSP_LCD_Clear>:
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006928:	4b08      	ldr	r3, [pc, #32]	; (800694c <BSP_LCD_Clear+0x24>)
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800692a:	b513      	push	{r0, r1, r4, lr}
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800692c:	681c      	ldr	r4, [r3, #0]
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800692e:	2334      	movs	r3, #52	; 0x34
 8006930:	4907      	ldr	r1, [pc, #28]	; (8006950 <BSP_LCD_Clear+0x28>)
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006932:	9001      	str	r0, [sp, #4]
 8006934:	4620      	mov	r0, r4
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006936:	fb03 1104 	mla	r1, r3, r4, r1
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800693a:	2300      	movs	r3, #0
 800693c:	315c      	adds	r1, #92	; 0x5c
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	c90e      	ldmia	r1, {r1, r2, r3}
 8006942:	f7ff ff29 	bl	8006798 <LL_FillBuffer>
}
 8006946:	b002      	add	sp, #8
 8006948:	bd10      	pop	{r4, pc}
 800694a:	bf00      	nop
 800694c:	200009b0 	.word	0x200009b0
 8006950:	200009b4 	.word	0x200009b4

08006954 <BSP_LCD_DrawHLine>:
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <BSP_LCD_DrawHLine+0x40>)
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006956:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006958:	681c      	ldr	r4, [r3, #0]
 800695a:	2334      	movs	r3, #52	; 0x34
 800695c:	4d0e      	ldr	r5, [pc, #56]	; (8006998 <BSP_LCD_DrawHLine+0x44>)
 800695e:	fb03 5304 	mla	r3, r3, r4, r5
 8006962:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8006964:	2d02      	cmp	r5, #2
 8006966:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800696a:	fb05 0101 	mla	r1, r5, r1, r0
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800696e:	480b      	ldr	r0, [pc, #44]	; (800699c <BSP_LCD_DrawHLine+0x48>)
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006970:	bf0c      	ite	eq
 8006972:	eb03 0141 	addeq.w	r1, r3, r1, lsl #1
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006976:	eb03 0181 	addne.w	r1, r3, r1, lsl #2
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800697a:	230c      	movs	r3, #12
 800697c:	4363      	muls	r3, r4
 800697e:	58c3      	ldr	r3, [r0, r3]
 8006980:	4620      	mov	r0, r4
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2301      	movs	r3, #1
 800698a:	f7ff ff05 	bl	8006798 <LL_FillBuffer>
}
 800698e:	b003      	add	sp, #12
 8006990:	bd30      	pop	{r4, r5, pc}
 8006992:	bf00      	nop
 8006994:	200009b0 	.word	0x200009b0
 8006998:	200009b4 	.word	0x200009b4
 800699c:	20000a5c 	.word	0x20000a5c

080069a0 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80069a0:	4613      	mov	r3, r2
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80069a2:	4a12      	ldr	r2, [pc, #72]	; (80069ec <BSP_LCD_DrawVLine+0x4c>)
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80069a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80069a6:	6815      	ldr	r5, [r2, #0]
 80069a8:	2434      	movs	r4, #52	; 0x34
 80069aa:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <BSP_LCD_DrawVLine+0x50>)
 80069ac:	fb04 2405 	mla	r4, r4, r5, r2
 80069b0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80069b2:	2e02      	cmp	r6, #2
 80069b4:	4616      	mov	r6, r2
 80069b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80069b8:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80069ba:	fb02 0101 	mla	r1, r2, r1, r0
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80069be:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <BSP_LCD_DrawVLine+0x54>)
  uint32_t  Xaddress = 0;
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80069c0:	bf0c      	ite	eq
 80069c2:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80069c6:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80069ca:	240c      	movs	r4, #12
 80069cc:	436c      	muls	r4, r5
 80069ce:	5912      	ldr	r2, [r2, r4]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80069d0:	2434      	movs	r4, #52	; 0x34
 80069d2:	fb04 6005 	mla	r0, r4, r5, r6
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80069d6:	9201      	str	r2, [sp, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80069dc:	3801      	subs	r0, #1
 80069de:	9000      	str	r0, [sp, #0]
 80069e0:	4628      	mov	r0, r5
 80069e2:	f7ff fed9 	bl	8006798 <LL_FillBuffer>
}
 80069e6:	b002      	add	sp, #8
 80069e8:	bd70      	pop	{r4, r5, r6, pc}
 80069ea:	bf00      	nop
 80069ec:	200009b0 	.word	0x200009b0
 80069f0:	200009b4 	.word	0x200009b4
 80069f4:	20000a5c 	.word	0x20000a5c

080069f8 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	461e      	mov	r6, r3
 80069fc:	460d      	mov	r5, r1
 80069fe:	4607      	mov	r7, r0
 8006a00:	4614      	mov	r4, r2
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8006a02:	f7ff ffa7 	bl	8006954 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8006a06:	19a9      	adds	r1, r5, r6
 8006a08:	4622      	mov	r2, r4
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	b289      	uxth	r1, r1
 8006a0e:	f7ff ffa1 	bl	8006954 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8006a12:	4632      	mov	r2, r6
 8006a14:	4629      	mov	r1, r5
 8006a16:	4638      	mov	r0, r7
 8006a18:	f7ff ffc2 	bl	80069a0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8006a1c:	1938      	adds	r0, r7, r4
 8006a1e:	4632      	mov	r2, r6
 8006a20:	4629      	mov	r1, r5
 8006a22:	b280      	uxth	r0, r0
}
 8006a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8006a28:	f7ff bfba 	b.w	80069a0 <BSP_LCD_DrawVLine>

08006a2c <BSP_LCD_DrawPixel>:
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <BSP_LCD_DrawPixel+0x2c>)
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006a2e:	b530      	push	{r4, r5, lr}
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006a30:	681c      	ldr	r4, [r3, #0]
 8006a32:	2534      	movs	r5, #52	; 0x34
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <BSP_LCD_DrawPixel+0x30>)
 8006a36:	fb05 3304 	mla	r3, r5, r4, r3
 8006a3a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8006a3c:	2c02      	cmp	r4, #2
 8006a3e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8006a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006a42:	fb04 0101 	mla	r1, r4, r1, r0
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006a46:	d103      	bne.n	8006a50 <BSP_LCD_DrawPixel+0x24>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006a48:	b292      	uxth	r2, r2
 8006a4a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006a4e:	bd30      	pop	{r4, r5, pc}
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006a50:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8006a54:	bd30      	pop	{r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	200009b0 	.word	0x200009b0
 8006a5c:	200009b4 	.word	0x200009b4

08006a60 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a64:	4b32      	ldr	r3, [pc, #200]	; (8006b30 <BSP_LCD_DisplayChar+0xd0>)
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006a66:	b085      	sub	sp, #20
 8006a68:	3a20      	subs	r2, #32
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 8006a6a:	f04f 0800 	mov.w	r8, #0
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a6e:	f8d3 a000 	ldr.w	sl, [r3]
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8006a72:	9001      	str	r0, [sp, #4]
 8006a74:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006a76:	210c      	movs	r1, #12
 8006a78:	482e      	ldr	r0, [pc, #184]	; (8006b34 <BSP_LCD_DisplayChar+0xd4>)
 8006a7a:	fb01 010a 	mla	r1, r1, sl, r0
 8006a7e:	6888      	ldr	r0, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006a80:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8006a84:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8006a88:	f109 0507 	add.w	r5, r9, #7
 8006a8c:	fb0b f202 	mul.w	r2, fp, r2
 8006a90:	10ed      	asrs	r5, r5, #3
 8006a92:	fb05 f402 	mul.w	r4, r5, r2
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 8006a96:	ebc9 01c5 	rsb	r1, r9, r5, lsl #3
 8006a9a:	1ca2      	adds	r2, r4, #2
 8006a9c:	6804      	ldr	r4, [r0, #0]
 8006a9e:	4414      	add	r4, r2
      break;
    } 
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006aa0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8006aa4:	fa52 f381 	uxtab	r3, r2, r1
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	9b02      	ldr	r3, [sp, #8]
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 8006aac:	45d8      	cmp	r8, fp
 8006aae:	eb03 0208 	add.w	r2, r3, r8
 8006ab2:	b293      	uxth	r3, r2
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	d238      	bcs.n	8006b2a <BSP_LCD_DisplayChar+0xca>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
    
    switch(((width + 7)/8))
 8006ab8:	2d01      	cmp	r5, #1
 8006aba:	d008      	beq.n	8006ace <BSP_LCD_DisplayChar+0x6e>
 8006abc:	2d02      	cmp	r5, #2
 8006abe:	d109      	bne.n	8006ad4 <BSP_LCD_DisplayChar+0x74>
    case 1:
      line =  pchar[0];      
      break;
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8006ac0:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8006ac4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006ac8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8006acc:	e00b      	b.n	8006ae6 <BSP_LCD_DisplayChar+0x86>
    
    switch(((width + 7)/8))
    {
      
    case 1:
      line =  pchar[0];      
 8006ace:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8006ad2:	e008      	b.n	8006ae6 <BSP_LCD_DisplayChar+0x86>
      line =  (pchar[0]<< 8) | pchar[1];      
      break;
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006ad4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8006ad8:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8006adc:	0236      	lsls	r6, r6, #8
 8006ade:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 8006ae2:	7826      	ldrb	r6, [r4, #0]
 8006ae4:	4316      	orrs	r6, r2
      break;
    } 
    
    for (j = 0; j < width; j++)
 8006ae6:	2700      	movs	r7, #0
 8006ae8:	45b9      	cmp	r9, r7
 8006aea:	d91a      	bls.n	8006b22 <BSP_LCD_DisplayChar+0xc2>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	1bd9      	subs	r1, r3, r7
 8006af2:	408a      	lsls	r2, r1
 8006af4:	4232      	tst	r2, r6
 8006af6:	f04f 020c 	mov.w	r2, #12
 8006afa:	d006      	beq.n	8006b0a <BSP_LCD_DisplayChar+0xaa>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	fb02 f20a 	mul.w	r2, r2, sl
 8006b02:	19d8      	adds	r0, r3, r7
 8006b04:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <BSP_LCD_DisplayChar+0xd4>)
 8006b06:	589a      	ldr	r2, [r3, r2]
 8006b08:	e005      	b.n	8006b16 <BSP_LCD_DisplayChar+0xb6>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <BSP_LCD_DisplayChar+0xd4>)
 8006b0c:	fb02 320a 	mla	r2, r2, sl, r3
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	6852      	ldr	r2, [r2, #4]
 8006b14:	19d8      	adds	r0, r3, r7
 8006b16:	9900      	ldr	r1, [sp, #0]
 8006b18:	b280      	uxth	r0, r0
 8006b1a:	f7ff ff87 	bl	8006a2c <BSP_LCD_DrawPixel>
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
      break;
    } 
    
    for (j = 0; j < width; j++)
 8006b1e:	3701      	adds	r7, #1
 8006b20:	e7e2      	b.n	8006ae8 <BSP_LCD_DisplayChar+0x88>
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 8006b22:	f108 0801 	add.w	r8, r8, #1
 8006b26:	442c      	add	r4, r5
 8006b28:	e7bf      	b.n	8006aaa <BSP_LCD_DisplayChar+0x4a>
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
}
 8006b2a:	b005      	add	sp, #20
 8006b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b30:	200009b0 	.word	0x200009b0
 8006b34:	20000a5c 	.word	0x20000a5c

08006b38 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460e      	mov	r6, r1
 8006b40:	4615      	mov	r5, r2
 8006b42:	ebc5 0c02 	rsb	ip, r5, r2
  uint16_t ref_column = 1, i = 0;
  uint32_t size = 0, xsize = 0; 
  uint8_t  *ptr = Text;
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006b46:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d1f9      	bne.n	8006b42 <BSP_LCD_DisplayStringAt+0xa>
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006b4e:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <BSP_LCD_DisplayStringAt+0xa0>)
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
  
  switch (Mode)
 8006b50:	2b01      	cmp	r3, #1
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006b52:	4922      	ldr	r1, [pc, #136]	; (8006bdc <BSP_LCD_DisplayStringAt+0xa4>)
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006b54:	f8d2 e000 	ldr.w	lr, [r2]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006b58:	f04f 020c 	mov.w	r2, #12
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006b5c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8006be0 <BSP_LCD_DisplayStringAt+0xa8>
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006b60:	fb02 110e 	mla	r1, r2, lr, r1
 8006b64:	688f      	ldr	r7, [r1, #8]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006b66:	f04f 0134 	mov.w	r1, #52	; 0x34
 8006b6a:	fb01 810e 	mla	r1, r1, lr, r8
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006b6e:	88b8      	ldrh	r0, [r7, #4]
 8006b70:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8006b72:	fbb1 f2f0 	udiv	r2, r1, r0
  
  switch (Mode)
 8006b76:	d007      	beq.n	8006b88 <BSP_LCD_DisplayStringAt+0x50>
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d10b      	bne.n	8006b94 <BSP_LCD_DisplayStringAt+0x5c>
      ref_column = Xpos;
      break;
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006b7c:	ebcc 0202 	rsb	r2, ip, r2
 8006b80:	fb12 f000 	smulbb	r0, r2, r0
 8006b84:	1b00      	subs	r0, r0, r4
 8006b86:	e004      	b.n	8006b92 <BSP_LCD_DisplayStringAt+0x5a>
  
  switch (Mode)
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006b88:	ebcc 0202 	rsb	r2, ip, r2
 8006b8c:	4350      	muls	r0, r2
 8006b8e:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      ref_column = Xpos;
      break;
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8006b92:	b284      	uxth	r4, r0
      break;
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006b94:	b223      	sxth	r3, r4
  {
    ref_column = 1;
 8006b96:	46a9      	mov	r9, r5
 8006b98:	2b00      	cmp	r3, #0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006b9a:	f04f 0334 	mov.w	r3, #52	; 0x34
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
  {
    ref_column = 1;
 8006b9e:	bfd8      	it	le
 8006ba0:	2401      	movle	r4, #1
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006ba2:	fb03 880e 	mla	r8, r3, lr, r8
 8006ba6:	ebc5 0309 	rsb	r3, r5, r9
  {
    ref_column = 1;
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006baa:	88b8      	ldrh	r0, [r7, #4]
 8006bac:	f8d8 1060 	ldr.w	r1, [r8, #96]	; 0x60
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f819 2b01 	ldrb.w	r2, [r9], #1
 8006bb6:	fb00 1313 	mls	r3, r0, r3, r1
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4283      	cmp	r3, r0
 8006bbe:	d308      	bcc.n	8006bd2 <BSP_LCD_DisplayStringAt+0x9a>
 8006bc0:	b13a      	cbz	r2, 8006bd2 <BSP_LCD_DisplayStringAt+0x9a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	f7ff ff4b 	bl	8006a60 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006bca:	88b8      	ldrh	r0, [r7, #4]
 8006bcc:	4420      	add	r0, r4
 8006bce:	b284      	uxth	r4, r0
 8006bd0:	e7e9      	b.n	8006ba6 <BSP_LCD_DisplayStringAt+0x6e>
 8006bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200009b0 	.word	0x200009b0
 8006bdc:	20000a5c 	.word	0x20000a5c
 8006be0:	200009b4 	.word	0x200009b4

08006be4 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp[ActiveLayer].pFont;
 8006be4:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <BSP_LCD_DisplayStringAtLine+0x24>)
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8006be6:	b410      	push	{r4}
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp[ActiveLayer].pFont;
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	240c      	movs	r4, #12
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <BSP_LCD_DisplayStringAtLine+0x28>)
 8006bee:	fb04 3302 	mla	r3, r4, r2, r3
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8006bf2:	460a      	mov	r2, r1
}
 8006bf4:	bc10      	pop	{r4}
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	88db      	ldrh	r3, [r3, #6]
 8006bfa:	fb13 f000 	smulbb	r0, r3, r0
 8006bfe:	2303      	movs	r3, #3
 8006c00:	b281      	uxth	r1, r0
 8006c02:	2000      	movs	r0, #0
 8006c04:	f7ff bf98 	b.w	8006b38 <BSP_LCD_DisplayStringAt>
 8006c08:	200009b0 	.word	0x200009b0
 8006c0c:	20000a5c 	.word	0x20000a5c

08006c10 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8006c14:	1a15      	subs	r5, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8006c16:	1a5e      	subs	r6, r3, r1
    xinc1 = 1;
    xinc2 = 1;
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8006c18:	f64f 74ff 	movw	r4, #65535	; 0xffff
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8006c1c:	b087      	sub	sp, #28
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8006c1e:	2d00      	cmp	r5, #0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
  x = x1;                       /* Start x off at the first pixel */
 8006c20:	fa1f f980 	uxth.w	r9, r0
  y = y1;                       /* Start y off at the first pixel */
 8006c24:	fa1f fa81 	uxth.w	sl, r1
{
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8006c28:	bfb8      	it	lt
 8006c2a:	426d      	neglt	r5, r5
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	bfb8      	it	lt
 8006c30:	4276      	neglt	r6, r6
{
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8006c32:	b2ad      	uxth	r5, r5
    xinc1 = 1;
    xinc2 = 1;
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8006c34:	4282      	cmp	r2, r0
 8006c36:	bf34      	ite	cc
 8006c38:	4627      	movcc	r7, r4
 8006c3a:	2701      	movcs	r7, #1
    yinc1 = 1;
    yinc2 = 1;
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8006c3c:	428b      	cmp	r3, r1
 8006c3e:	bf34      	ite	cc
 8006c40:	46a0      	movcc	r8, r4
 8006c42:	f04f 0801 	movcs.w	r8, #1
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
  curpixel = 0;
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8006c46:	b2b6      	uxth	r6, r6
 8006c48:	2402      	movs	r4, #2
  {
    yinc1 = -1;
    yinc2 = -1;
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8006c4a:	b22a      	sxth	r2, r5
 8006c4c:	b233      	sxth	r3, r6
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	db06      	blt.n	8006c60 <BSP_LCD_DrawLine+0x50>
 8006c52:	9701      	str	r7, [sp, #4]
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8006c54:	2700      	movs	r7, #0
    den = deltax;
    num = deltax / 2;
 8006c56:	fb92 f4f4 	sdiv	r4, r2, r4
    yinc2 = -1;
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8006c5a:	9702      	str	r7, [sp, #8]
    yinc2 = 0;                  /* Don't change the y for every iteration */
    den = deltax;
    num = deltax / 2;
 8006c5c:	b2a4      	uxth	r4, r4
 8006c5e:	e00b      	b.n	8006c78 <BSP_LCD_DrawLine+0x68>
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
    den = deltay;
    num = deltay / 2;
 8006c60:	fb93 f4f4 	sdiv	r4, r3, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	f8cd 8008 	str.w	r8, [sp, #8]
 8006c6a:	4635      	mov	r5, r6
    num_pixels = deltax;         /* There are more x-values than y-values */
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8006c6c:	f04f 0800 	mov.w	r8, #0
    den = deltay;
    num = deltay / 2;
 8006c70:	b2a4      	uxth	r4, r4
 8006c72:	461e      	mov	r6, r3
    num_add = deltay;
    num_pixels = deltax;         /* There are more x-values than y-values */
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8006c74:	f8cd 8004 	str.w	r8, [sp, #4]
    num = deltay / 2;
    num_add = deltax;
    num_pixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8006c78:	b22a      	sxth	r2, r5
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9204      	str	r2, [sp, #16]
 8006c7e:	b21a      	sxth	r2, r3
 8006c80:	9904      	ldr	r1, [sp, #16]
 8006c82:	4291      	cmp	r1, r2
 8006c84:	db2b      	blt.n	8006cde <BSP_LCD_DrawLine+0xce>
 8006c86:	9305      	str	r3, [sp, #20]
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8006c88:	fa1f f38a 	uxth.w	r3, sl
 8006c8c:	220c      	movs	r2, #12
 8006c8e:	fa1f fb89 	uxth.w	fp, r9
 8006c92:	9303      	str	r3, [sp, #12]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8006c94:	4434      	add	r4, r6
    num_pixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8006c96:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <BSP_LCD_DrawLine+0xd4>)
 8006c98:	4658      	mov	r0, fp
 8006c9a:	6819      	ldr	r1, [r3, #0]
 8006c9c:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <BSP_LCD_DrawLine+0xd8>)
 8006c9e:	434a      	muls	r2, r1
 8006ca0:	9903      	ldr	r1, [sp, #12]
 8006ca2:	589a      	ldr	r2, [r3, r2]
 8006ca4:	f7ff fec2 	bl	8006a2c <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
    if (num >= den)                           /* Check if numerator >= denominator */
 8006ca8:	9b04      	ldr	r3, [sp, #16]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8006caa:	b2a2      	uxth	r2, r4
 8006cac:	b294      	uxth	r4, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 8006cae:	b221      	sxth	r1, r4
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	9b05      	ldr	r3, [sp, #20]
 8006cb4:	dc09      	bgt.n	8006cca <BSP_LCD_DrawLine+0xba>
    {
      num -= den;                             /* Calculate the new numerator value */
 8006cb6:	1b54      	subs	r4, r2, r5
      x += xinc1;                             /* Change the x as appropriate */
      y += yinc1;                             /* Change the y as appropriate */
 8006cb8:	9a03      	ldr	r2, [sp, #12]
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
    num += num_add;                            /* Increase the numerator by the top of the fraction */
    if (num >= den)                           /* Check if numerator >= denominator */
    {
      num -= den;                             /* Calculate the new numerator value */
      x += xinc1;                             /* Change the x as appropriate */
 8006cba:	eb0b 0907 	add.w	r9, fp, r7
      y += yinc1;                             /* Change the y as appropriate */
 8006cbe:	4442      	add	r2, r8
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
    num += num_add;                            /* Increase the numerator by the top of the fraction */
    if (num >= den)                           /* Check if numerator >= denominator */
    {
      num -= den;                             /* Calculate the new numerator value */
 8006cc0:	b2a4      	uxth	r4, r4
      x += xinc1;                             /* Change the x as appropriate */
 8006cc2:	fa1f f989 	uxth.w	r9, r9
      y += yinc1;                             /* Change the y as appropriate */
 8006cc6:	fa1f fa82 	uxth.w	sl, r2
    }
    x += xinc2;                               /* Change the x as appropriate */
 8006cca:	9a01      	ldr	r2, [sp, #4]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 8006cd0:	9a02      	ldr	r2, [sp, #8]
 8006cd2:	4492      	add	sl, r2
    {
      num -= den;                             /* Calculate the new numerator value */
      x += xinc1;                             /* Change the x as appropriate */
      y += yinc1;                             /* Change the y as appropriate */
    }
    x += xinc2;                               /* Change the x as appropriate */
 8006cd4:	fa1f f989 	uxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8006cd8:	fa1f fa8a 	uxth.w	sl, sl
 8006cdc:	e7cf      	b.n	8006c7e <BSP_LCD_DrawLine+0x6e>
  }
}
 8006cde:	b007      	add	sp, #28
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	200009b0 	.word	0x200009b0
 8006ce8:	20000a5c 	.word	0x20000a5c

08006cec <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t  x_address = 0;
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006cee:	4c12      	ldr	r4, [pc, #72]	; (8006d38 <BSP_LCD_FillRect+0x4c>)
 8006cf0:	4e12      	ldr	r6, [pc, #72]	; (8006d3c <BSP_LCD_FillRect+0x50>)
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	240c      	movs	r4, #12
 8006cf6:	436c      	muls	r4, r5
 8006cf8:	f856 e004 	ldr.w	lr, [r6, r4]
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006cfc:	2434      	movs	r4, #52	; 0x34
 8006cfe:	4e10      	ldr	r6, [pc, #64]	; (8006d40 <BSP_LCD_FillRect+0x54>)
 8006d00:	fb04 6405 	mla	r4, r4, r5, r6
 8006d04:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006d06:	2f02      	cmp	r7, #2
 8006d08:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8006d0a:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006d0c:	fb07 0101 	mla	r1, r7, r1, r0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006d10:	f04f 0034 	mov.w	r0, #52	; 0x34
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006d14:	f8cd e004 	str.w	lr, [sp, #4]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006d18:	fb00 6605 	mla	r6, r0, r5, r6
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006d1c:	bf0c      	ite	eq
 8006d1e:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006d22:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006d26:	6e30      	ldr	r0, [r6, #96]	; 0x60
 8006d28:	1a80      	subs	r0, r0, r2
 8006d2a:	9000      	str	r0, [sp, #0]
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f7ff fd33 	bl	8006798 <LL_FillBuffer>
}
 8006d32:	b003      	add	sp, #12
 8006d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d36:	bf00      	nop
 8006d38:	200009b0 	.word	0x200009b0
 8006d3c:	20000a5c 	.word	0x20000a5c
 8006d40:	200009b4 	.word	0x200009b4

08006d44 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8006d46:	4e10      	ldr	r6, [pc, #64]	; (8006d88 <BSP_LCD_ClearStringLine+0x44>)
 8006d48:	240c      	movs	r4, #12
 8006d4a:	4d10      	ldr	r5, [pc, #64]	; (8006d8c <BSP_LCD_ClearStringLine+0x48>)
 8006d4c:	6832      	ldr	r2, [r6, #0]
 8006d4e:	fb04 f302 	mul.w	r3, r4, r2
 8006d52:	eb05 0e03 	add.w	lr, r5, r3
 8006d56:	58ef      	ldr	r7, [r5, r3]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8006d58:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006d5c:	50e9      	str	r1, [r5, r3]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8006d5e:	f8de 3008 	ldr.w	r3, [lr, #8]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006d62:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8006d66:	490a      	ldr	r1, [pc, #40]	; (8006d90 <BSP_LCD_ClearStringLine+0x4c>)
{
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8006d68:	88db      	ldrh	r3, [r3, #6]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006d6a:	fb0e 1202 	mla	r2, lr, r2, r1
{
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8006d6e:	fb10 f103 	smulbb	r1, r0, r3
 8006d72:	2000      	movs	r0, #0
 8006d74:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8006d78:	b289      	uxth	r1, r1
 8006d7a:	f7ff ffb7 	bl	8006cec <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 8006d7e:	6833      	ldr	r3, [r6, #0]
 8006d80:	435c      	muls	r4, r3
 8006d82:	512f      	str	r7, [r5, r4]
 8006d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	200009b0 	.word	0x200009b0
 8006d8c:	20000a5c 	.word	0x20000a5c
 8006d90:	200009b4 	.word	0x200009b4

08006d94 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8006d94:	b508      	push	{r3, lr}
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006d96:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d9c:	4808      	ldr	r0, [pc, #32]	; (8006dc0 <BSP_LCD_DisplayOn+0x2c>)
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	6993      	ldr	r3, [r2, #24]
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006da8:	2201      	movs	r2, #1
 8006daa:	f7ff fad1 	bl	8006350 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006dae:	2201      	movs	r2, #1
 8006db0:	2108      	movs	r1, #8
 8006db2:	4804      	ldr	r0, [pc, #16]	; (8006dc4 <BSP_LCD_DisplayOn+0x30>)
}
 8006db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006db8:	f7ff baca 	b.w	8006350 <HAL_GPIO_WritePin>
 8006dbc:	200009b4 	.word	0x200009b4
 8006dc0:	40022000 	.word	0x40022000
 8006dc4:	40022800 	.word	0x40022800

08006dc8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006dca:	4b4f      	ldr	r3, [pc, #316]	; (8006f08 <BSP_LCD_MspInit+0x140>)
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006dcc:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006dce:	2200      	movs	r2, #0
  LCD_BL_CTRL_GPIO_CLK_ENABLE();

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006dd0:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006dd2:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006dd4:	484d      	ldr	r0, [pc, #308]	; (8006f0c <BSP_LCD_MspInit+0x144>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006dd6:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006dd8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006ddc:	6c59      	ldr	r1, [r3, #68]	; 0x44
  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006dde:	4e4c      	ldr	r6, [pc, #304]	; (8006f10 <BSP_LCD_MspInit+0x148>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006de0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8006de4:	6459      	str	r1, [r3, #68]	; 0x44
 8006de6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006de8:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8006dec:	9100      	str	r1, [sp, #0]
 8006dee:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006df0:	9201      	str	r2, [sp, #4]
 8006df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006df4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006df8:	6319      	str	r1, [r3, #48]	; 0x30
 8006dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dfc:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8006e00:	9101      	str	r1, [sp, #4]
 8006e02:	9901      	ldr	r1, [sp, #4]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e04:	9202      	str	r2, [sp, #8]
 8006e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e08:	f041 0110 	orr.w	r1, r1, #16
 8006e0c:	6319      	str	r1, [r3, #48]	; 0x30
 8006e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e10:	f001 0110 	and.w	r1, r1, #16
 8006e14:	9102      	str	r1, [sp, #8]
 8006e16:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e18:	9203      	str	r2, [sp, #12]
 8006e1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e1c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006e20:	6319      	str	r1, [r3, #48]	; 0x30
 8006e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e24:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8006e28:	9103      	str	r1, [sp, #12]
 8006e2a:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006e2c:	9204      	str	r2, [sp, #16]
 8006e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e30:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006e34:	6319      	str	r1, [r3, #48]	; 0x30
 8006e36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e38:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8006e3c:	9104      	str	r1, [sp, #16]
 8006e3e:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006e40:	9205      	str	r2, [sp, #20]
 8006e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e44:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006e48:	6319      	str	r1, [r3, #48]	; 0x30
 8006e4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e4c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8006e50:	9105      	str	r1, [sp, #20]
 8006e52:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006e54:	9206      	str	r2, [sp, #24]
 8006e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e58:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006e5c:	6319      	str	r1, [r3, #48]	; 0x30
 8006e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e60:	f401 6180 	and.w	r1, r1, #1024	; 0x400
 8006e64:	9106      	str	r1, [sp, #24]
 8006e66:	9906      	ldr	r1, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006e68:	9207      	str	r2, [sp, #28]
 8006e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e6c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006e70:	6319      	str	r1, [r3, #48]	; 0x30
 8006e72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e74:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8006e78:	9107      	str	r1, [sp, #28]
 8006e7a:	9907      	ldr	r1, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006e7c:	9208      	str	r2, [sp, #32]
 8006e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e80:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006e84:	6319      	str	r1, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006e86:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006e8a:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006e90:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006e92:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006e94:	9308      	str	r3, [sp, #32]
 8006e96:	9b08      	ldr	r3, [sp, #32]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006e98:	2310      	movs	r3, #16
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006e9a:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006e9c:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006e9e:	f7ff f967 	bl	8006170 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006ea2:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006ea4:	a909      	add	r1, sp, #36	; 0x24
 8006ea6:	481b      	ldr	r0, [pc, #108]	; (8006f14 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ea8:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006eaa:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006eac:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006eae:	f7ff f95f 	bl	8006170 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8006eb2:	f44f 4367 	mov.w	r3, #59136	; 0xe700
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006eb6:	a909      	add	r1, sp, #36	; 0x24
 8006eb8:	4630      	mov	r0, r6
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006eba:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8006ebc:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006ebe:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006ec0:	f7ff f956 	bl	8006170 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006ec4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006ec8:	a909      	add	r1, sp, #36	; 0x24
 8006eca:	4813      	ldr	r0, [pc, #76]	; (8006f18 <BSP_LCD_MspInit+0x150>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006ecc:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ece:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006ed0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006ed2:	f7ff f94d 	bl	8006170 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ed6:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006ed8:	23f7      	movs	r3, #247	; 0xf7
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006eda:	4c10      	ldr	r4, [pc, #64]	; (8006f1c <BSP_LCD_MspInit+0x154>)
 8006edc:	a909      	add	r1, sp, #36	; 0x24

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006ede:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006ee0:	2501      	movs	r5, #1
  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006ee2:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006ee4:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006ee6:	f7ff f943 	bl	8006170 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006eea:	a909      	add	r1, sp, #36	; 0x24
 8006eec:	4630      	mov	r0, r6
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006eee:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006ef0:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006ef2:	f7ff f93d 	bl	8006170 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006ef6:	2308      	movs	r3, #8
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006ef8:	a909      	add	r1, sp, #36	; 0x24
 8006efa:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006efc:	950a      	str	r5, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006efe:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006f00:	f7ff f936 	bl	8006170 <HAL_GPIO_Init>
}
 8006f04:	b00f      	add	sp, #60	; 0x3c
 8006f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40022000 	.word	0x40022000
 8006f14:	40021800 	.word	0x40021800
 8006f18:	40022400 	.word	0x40022400
 8006f1c:	40022800 	.word	0x40022800

08006f20 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006f20:	4805      	ldr	r0, [pc, #20]	; (8006f38 <BSP_LCD_ClockConfig+0x18>)
 8006f22:	2308      	movs	r3, #8
 8006f24:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006f26:	23c0      	movs	r3, #192	; 0xc0
 8006f28:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006f2a:	2305      	movs	r3, #5
 8006f2c:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f32:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006f34:	f000 bcc4 	b.w	80078c0 <HAL_RCCEx_PeriphCLKConfig>
 8006f38:	20000a74 	.word	0x20000a74

08006f3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006f3c:	b510      	push	{r4, lr}
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006f3e:	2328      	movs	r3, #40	; 0x28
 8006f40:	4c26      	ldr	r4, [pc, #152]	; (8006fdc <BSP_LCD_Init+0xa0>)
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006f42:	2100      	movs	r1, #0
{    
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006f44:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006f46:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006f48:	4620      	mov	r0, r4
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006f4a:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006f4c:	2335      	movs	r3, #53	; 0x35
 8006f4e:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006f50:	230b      	movs	r3, #11
 8006f52:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006f54:	f240 131b 	movw	r3, #283	; 0x11b
 8006f58:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006f5a:	f240 2315 	movw	r3, #533	; 0x215
 8006f5e:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006f60:	f240 131d 	movw	r3, #285	; 0x11d
 8006f64:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006f66:	f240 2335 	movw	r3, #565	; 0x235
 8006f6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006f6c:	f7ff ffd8 	bl	8006f20 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006f70:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hLtdcHandler.Instance = LTDC;

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006f74:	4620      	mov	r0, r4
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006f76:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006f78:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f7c:	6663      	str	r3, [r4, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006f84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006f88:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006f8c:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006f8e:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006f90:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006f92:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 8006f94:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <BSP_LCD_Init+0xa4>)
 8006f96:	6023      	str	r3, [r4, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006f98:	f000 fc8f 	bl	80078ba <HAL_LTDC_GetState>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	b910      	cbnz	r0, 8006fa6 <BSP_LCD_Init+0x6a>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f7ff ff11 	bl	8006dc8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8006fa6:	480d      	ldr	r0, [pc, #52]	; (8006fdc <BSP_LCD_Init+0xa0>)
 8006fa8:	f000 fbea 	bl	8007780 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006fac:	2201      	movs	r2, #1
 8006fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fb2:	480c      	ldr	r0, [pc, #48]	; (8006fe4 <BSP_LCD_Init+0xa8>)
 8006fb4:	f7ff f9cc 	bl	8006350 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006fb8:	2201      	movs	r2, #1
 8006fba:	2108      	movs	r1, #8
 8006fbc:	480a      	ldr	r0, [pc, #40]	; (8006fe8 <BSP_LCD_Init+0xac>)
 8006fbe:	f7ff f9c7 	bl	8006350 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006fc2:	f7ff fbab 	bl	800671c <BSP_SDRAM_Init>
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 8006fc6:	4b09      	ldr	r3, [pc, #36]	; (8006fec <BSP_LCD_Init+0xb0>)
 8006fc8:	210c      	movs	r1, #12
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 8006fca:	2000      	movs	r0, #0
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <BSP_LCD_Init+0xb4>)
 8006fd0:	fb01 3302 	mla	r3, r1, r2, r3
 8006fd4:	4a07      	ldr	r2, [pc, #28]	; (8006ff4 <BSP_LCD_Init+0xb8>)
 8006fd6:	609a      	str	r2, [r3, #8]
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 8006fd8:	bd10      	pop	{r4, pc}
 8006fda:	bf00      	nop
 8006fdc:	200009b4 	.word	0x200009b4
 8006fe0:	40016800 	.word	0x40016800
 8006fe4:	40022000 	.word	0x40022000
 8006fe8:	40022800 	.word	0x40022800
 8006fec:	200009b0 	.word	0x200009b0
 8006ff0:	20000a5c 	.word	0x20000a5c
 8006ff4:	200008b8 	.word	0x200008b8

08006ff8 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006ff8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 8006ffa:	4604      	mov	r4, r0
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006ffc:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 8006ffe:	b9d0      	cbnz	r0, 8007036 <BSP_LED_Init+0x3e>
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8007000:	4b0e      	ldr	r3, [pc, #56]	; (800703c <BSP_LED_Init+0x44>)

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8007002:	2502      	movs	r5, #2

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8007004:	9000      	str	r0, [sp, #0]
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8007006:	a901      	add	r1, sp, #4

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8007008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800700a:	480d      	ldr	r0, [pc, #52]	; (8007040 <BSP_LED_Init+0x48>)

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 800700c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007010:	631a      	str	r2, [r3, #48]	; 0x30
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8007014:	9501      	str	r5, [sp, #4]

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8007016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	9b00      	ldr	r3, [sp, #0]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800701e:	2301      	movs	r3, #1
 8007020:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8007022:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8007024:	2303      	movs	r3, #3
 8007026:	9304      	str	r3, [sp, #16]
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8007028:	f7ff f8a2 	bl	8006170 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800702c:	4622      	mov	r2, r4
 800702e:	4629      	mov	r1, r5
 8007030:	4803      	ldr	r0, [pc, #12]	; (8007040 <BSP_LED_Init+0x48>)
 8007032:	f7ff f98d 	bl	8006350 <HAL_GPIO_WritePin>
  }
}
 8007036:	b007      	add	sp, #28
 8007038:	bd30      	pop	{r4, r5, pc}
 800703a:	bf00      	nop
 800703c:	40023800 	.word	0x40023800
 8007040:	40022000 	.word	0x40022000

08007044 <BSP_LED_On>:
  */
void BSP_LED_On(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8007044:	b920      	cbnz	r0, 8007050 <BSP_LED_On+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8007046:	2201      	movs	r2, #1
 8007048:	2102      	movs	r1, #2
 800704a:	4802      	ldr	r0, [pc, #8]	; (8007054 <BSP_LED_On+0x10>)
 800704c:	f7ff b980 	b.w	8006350 <HAL_GPIO_WritePin>
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40022000 	.word	0x40022000

08007058 <BSP_LED_Off>:
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 8007058:	4602      	mov	r2, r0
 800705a:	b918      	cbnz	r0, 8007064 <BSP_LED_Off+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800705c:	2102      	movs	r1, #2
 800705e:	4802      	ldr	r0, [pc, #8]	; (8007068 <BSP_LED_Off+0x10>)
 8007060:	f7ff b976 	b.w	8006350 <HAL_GPIO_WritePin>
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40022000 	.word	0x40022000

0800706c <BSP_LED_Toggle>:
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 800706c:	b918      	cbnz	r0, 8007076 <BSP_LED_Toggle+0xa>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 800706e:	2102      	movs	r1, #2
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <BSP_LED_Toggle+0xc>)
 8007072:	f7ff b971 	b.w	8006358 <HAL_GPIO_TogglePin>
 8007076:	4770      	bx	lr
 8007078:	40022000 	.word	0x40022000

0800707c <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800707c:	4a0c      	ldr	r2, [pc, #48]	; (80070b0 <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800707e:	2101      	movs	r1, #1
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <LCD_LOG_DeInit+0x38>)
 8007082:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <LCD_LOG_DeInit+0x3c>)
 8007088:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <LCD_LOG_DeInit+0x40>)
 800708c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 800708e:	4a0c      	ldr	r2, [pc, #48]	; (80070c0 <LCD_LOG_DeInit+0x44>)
 8007090:	8013      	strh	r3, [r2, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8007092:	4a0c      	ldr	r2, [pc, #48]	; (80070c4 <LCD_LOG_DeInit+0x48>)
 8007094:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8007096:	4a0c      	ldr	r2, [pc, #48]	; (80070c8 <LCD_LOG_DeInit+0x4c>)
 8007098:	8013      	strh	r3, [r2, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800709a:	4a0c      	ldr	r2, [pc, #48]	; (80070cc <LCD_LOG_DeInit+0x50>)
 800709c:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 800709e:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <LCD_LOG_DeInit+0x54>)
 80070a0:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 80070a2:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <LCD_LOG_DeInit+0x58>)
 80070a4:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 80070a6:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <LCD_LOG_DeInit+0x5c>)
 80070a8:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 80070aa:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <LCD_LOG_DeInit+0x60>)
 80070ac:	8013      	strh	r3, [r2, #0]
 80070ae:	4770      	bx	lr
 80070b0:	ff000080 	.word	0xff000080
 80070b4:	20001414 	.word	0x20001414
 80070b8:	20000b46 	.word	0x20000b46
 80070bc:	20000b4c 	.word	0x20000b4c
 80070c0:	20000b44 	.word	0x20000b44
 80070c4:	20000b42 	.word	0x20000b42
 80070c8:	20000b40 	.word	0x20000b40
 80070cc:	20000b48 	.word	0x20000b48
 80070d0:	20000b4e 	.word	0x20000b4e
 80070d4:	20000b49 	.word	0x20000b49
 80070d8:	20000b4a 	.word	0x20000b4a
 80070dc:	20001418 	.word	0x20001418

080070e0 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 80070e0:	b508      	push	{r3, lr}
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 80070e2:	f7ff ffcb 	bl	800707c <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80070ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80070ee:	f7ff bc1b 	b.w	8006928 <BSP_LCD_Clear>
	...

080070f4 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 80070f4:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80070f6:	4c16      	ldr	r4, [pc, #88]	; (8007150 <LCD_LOG_SetHeader+0x5c>)
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 80070f8:	4606      	mov	r6, r0
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80070fa:	4d16      	ldr	r5, [pc, #88]	; (8007154 <LCD_LOG_SetHeader+0x60>)
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7ff fbfb 	bl	80068f8 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8007102:	4628      	mov	r0, r5
 8007104:	f7ff fbe0 	bl	80068c8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8007108:	f7ff fb84 	bl	8006814 <BSP_LCD_GetXSize>
 800710c:	88e3      	ldrh	r3, [r4, #6]
 800710e:	2100      	movs	r1, #0
 8007110:	b282      	uxth	r2, r0
 8007112:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007116:	4608      	mov	r0, r1
 8007118:	b29b      	uxth	r3, r3
 800711a:	f7ff fde7 	bl	8006cec <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800711e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007122:	f7ff fbd1 	bl	80068c8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8007126:	4628      	mov	r0, r5
 8007128:	f7ff fbda 	bl	80068e0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800712c:	4632      	mov	r2, r6
 800712e:	88e1      	ldrh	r1, [r4, #6]
 8007130:	2301      	movs	r3, #1
 8007132:	2000      	movs	r0, #0
 8007134:	f7ff fd00 	bl	8006b38 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8007138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800713c:	f7ff fbd0 	bl	80068e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8007140:	4805      	ldr	r0, [pc, #20]	; (8007158 <LCD_LOG_SetHeader+0x64>)
 8007142:	f7ff fbc1 	bl	80068c8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8007146:	4805      	ldr	r0, [pc, #20]	; (800715c <LCD_LOG_SetHeader+0x68>)
}
 8007148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800714c:	f7ff bbd4 	b.w	80068f8 <BSP_LCD_SetFont>
 8007150:	200008b0 	.word	0x200008b0
 8007154:	ff0000ff 	.word	0xff0000ff
 8007158:	ff000080 	.word	0xff000080
 800715c:	200008a8 	.word	0x200008a8

08007160 <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 8007160:	b510      	push	{r4, lr}
 8007162:	2404      	movs	r4, #4
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 8007164:	4620      	mov	r0, r4
 8007166:	3401      	adds	r4, #1
 8007168:	f7ff fdec 	bl	8006d44 <BSP_LCD_ClearStringLine>
  */
void LCD_LOG_ClearTextZone(void)
{
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800716c:	2c15      	cmp	r4, #21
 800716e:	d1f9      	bne.n	8007164 <LCD_LOG_ClearTextZone+0x4>
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
  }
  
  LCD_LOG_DeInit();
}
 8007170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
  }
  
  LCD_LOG_DeInit();
 8007174:	f7ff bf82 	b.w	800707c <LCD_LOG_DeInit>

08007178 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8007178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800717c:	4d1d      	ldr	r5, [pc, #116]	; (80071f4 <LCD_LOG_UpdateDisplay+0x7c>)
 800717e:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <LCD_LOG_UpdateDisplay+0x80>)
 8007180:	882b      	ldrh	r3, [r5, #0]
 8007182:	4f1e      	ldr	r7, [pc, #120]	; (80071fc <LCD_LOG_UpdateDisplay+0x84>)
 8007184:	2b0f      	cmp	r3, #15
 8007186:	d812      	bhi.n	80071ae <LCD_LOG_UpdateDisplay+0x36>
 8007188:	8811      	ldrh	r1, [r2, #0]
 800718a:	4299      	cmp	r1, r3
 800718c:	d80f      	bhi.n	80071ae <LCD_LOG_UpdateDisplay+0x36>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800718e:	2484      	movs	r4, #132	; 0x84
 8007190:	fb04 7303 	mla	r3, r4, r3, r7
 8007194:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007198:	f7ff fb96 	bl	80068c8 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800719c:	8829      	ldrh	r1, [r5, #0]
 800719e:	1d08      	adds	r0, r1, #4
 80071a0:	fb04 7101 	mla	r1, r4, r1, r7
 80071a4:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 80071a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80071aa:	f7ff bd1b 	b.w	8006be4 <BSP_LCD_DisplayStringAtLine>
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80071ae:	8812      	ldrh	r2, [r2, #0]
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 80071b0:	2600      	movs	r6, #0
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80071b2:	f04f 0911 	mov.w	r9, #17
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80071b6:	f04f 0884 	mov.w	r8, #132	; 0x84
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80071ba:	429a      	cmp	r2, r3
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80071bc:	bf84      	itt	hi
 80071be:	3311      	addhi	r3, #17
 80071c0:	b29b      	uxthhi	r3, r3
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 80071c2:	3b10      	subs	r3, #16
 80071c4:	b29c      	uxth	r4, r3
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80071c6:	19a3      	adds	r3, r4, r6
 80071c8:	fb93 f5f9 	sdiv	r5, r3, r9
 80071cc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80071d0:	1b5d      	subs	r5, r3, r5
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80071d2:	fb08 7505 	mla	r5, r8, r5, r7
 80071d6:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80071da:	f7ff fb75 	bl	80068c8 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80071de:	1d30      	adds	r0, r6, #4
 80071e0:	3601      	adds	r6, #1
 80071e2:	4629      	mov	r1, r5
 80071e4:	b280      	uxth	r0, r0
 80071e6:	f7ff fcfd 	bl	8006be4 <BSP_LCD_DisplayStringAtLine>
      length = LCD_CacheBuffer_yptr_bottom;
    }
    
    ptr = length - YWINDOW_SIZE + 1;
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80071ea:	2e11      	cmp	r6, #17
 80071ec:	d1eb      	bne.n	80071c6 <LCD_LOG_UpdateDisplay+0x4e>
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	bf00      	nop
 80071f4:	20000b44 	.word	0x20000b44
 80071f8:	20000b4c 	.word	0x20000b4c
 80071fc:	20000b50 	.word	0x20000b50

08007200 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8007200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	4607      	mov	r7, r0
  
  sFONT *cFont = BSP_LCD_GetFont();
 8007206:	f7ff fb83 	bl	8006910 <BSP_LCD_GetFont>
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 800720a:	4b40      	ldr	r3, [pc, #256]	; (800730c <__io_putchar+0x10c>)
  * @retval None
 */
LCD_LOG_PUTCHAR
{
  
  sFONT *cFont = BSP_LCD_GetFont();
 800720c:	4680      	mov	r8, r0
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d177      	bne.n	8007304 <__io_putchar+0x104>
  {
    if(LCD_ScrollActive == ENABLE)
 8007214:	4a3e      	ldr	r2, [pc, #248]	; (8007310 <__io_putchar+0x110>)
 8007216:	4c3f      	ldr	r4, [pc, #252]	; (8007314 <__io_putchar+0x114>)
 8007218:	7811      	ldrb	r1, [r2, #0]
 800721a:	2901      	cmp	r1, #1
 800721c:	d10b      	bne.n	8007236 <__io_putchar+0x36>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800721e:	493e      	ldr	r1, [pc, #248]	; (8007318 <__io_putchar+0x118>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
      LCD_ScrollActive = DISABLE;
 8007220:	7013      	strb	r3, [r2, #0]
  
  if(LCD_Lock == DISABLE)
  {
    if(LCD_ScrollActive == ENABLE)
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8007222:	8809      	ldrh	r1, [r1, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
      LCD_ScrollActive = DISABLE;
      LCD_Scrolled = DISABLE;
 8007224:	4a3d      	ldr	r2, [pc, #244]	; (800731c <__io_putchar+0x11c>)
  
  if(LCD_Lock == DISABLE)
  {
    if(LCD_ScrollActive == ENABLE)
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8007226:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8007228:	493d      	ldr	r1, [pc, #244]	; (8007320 <__io_putchar+0x120>)
      LCD_ScrollActive = DISABLE;
      LCD_Scrolled = DISABLE;
 800722a:	7013      	strb	r3, [r2, #0]
  if(LCD_Lock == DISABLE)
  {
    if(LCD_ScrollActive == ENABLE)
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800722c:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollActive = DISABLE;
      LCD_Scrolled = DISABLE;
      LCD_ScrollBackStep = 0;
 800722e:	4a3d      	ldr	r2, [pc, #244]	; (8007324 <__io_putchar+0x124>)
  if(LCD_Lock == DISABLE)
  {
    if(LCD_ScrollActive == ENABLE)
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8007230:	493d      	ldr	r1, [pc, #244]	; (8007328 <__io_putchar+0x128>)
      LCD_ScrollActive = DISABLE;
      LCD_Scrolled = DISABLE;
      LCD_ScrollBackStep = 0;
 8007232:	8013      	strh	r3, [r2, #0]
  if(LCD_Lock == DISABLE)
  {
    if(LCD_ScrollActive == ENABLE)
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8007234:	8008      	strh	r0, [r1, #0]
      LCD_Scrolled = DISABLE;
      LCD_ScrollBackStep = 0;
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8007236:	4e3d      	ldr	r6, [pc, #244]	; (800732c <__io_putchar+0x12c>)
 8007238:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8007338 <__io_putchar+0x138>
 800723c:	8835      	ldrh	r5, [r6, #0]
 800723e:	f7ff fae9 	bl	8006814 <BSP_LCD_GetXSize>
 8007242:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007246:	fbb0 f0f3 	udiv	r0, r0, r3
 800724a:	4285      	cmp	r5, r0
 800724c:	4635      	mov	r5, r6
 800724e:	d206      	bcs.n	800725e <__io_putchar+0x5e>
 8007250:	2f0a      	cmp	r7, #10
 8007252:	d004      	beq.n	800725e <__io_putchar+0x5e>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8007254:	8832      	ldrh	r2, [r6, #0]
 8007256:	8823      	ldrh	r3, [r4, #0]
 8007258:	1c51      	adds	r1, r2, #1
 800725a:	8031      	strh	r1, [r6, #0]
 800725c:	e04d      	b.n	80072fa <__io_putchar+0xfa>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800725e:	4e32      	ldr	r6, [pc, #200]	; (8007328 <__io_putchar+0x128>)
 8007260:	8822      	ldrh	r2, [r4, #0]
 8007262:	8833      	ldrh	r3, [r6, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d80b      	bhi.n	8007280 <__io_putchar+0x80>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8007268:	4a31      	ldr	r2, [pc, #196]	; (8007330 <__io_putchar+0x130>)
 800726a:	7811      	ldrb	r1, [r2, #0]
 800726c:	b931      	cbnz	r1, 800727c <__io_putchar+0x7c>
        {
          LCD_CacheBuffer_yptr_top++;
 800726e:	3301      	adds	r3, #1
 8007270:	b29b      	uxth	r3, r3
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8007272:	2b11      	cmp	r3, #17
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
        {
          LCD_CacheBuffer_yptr_top++;
 8007274:	bf14      	ite	ne
 8007276:	8033      	strhne	r3, [r6, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8007278:	8031      	strheq	r1, [r6, #0]
 800727a:	e001      	b.n	8007280 <__io_putchar+0x80>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800727c:	2300      	movs	r3, #0
 800727e:	7013      	strb	r3, [r2, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8007280:	f8b5 a000 	ldrh.w	sl, [r5]
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8007284:	f04f 0b84 	mov.w	fp, #132	; 0x84
 8007288:	2220      	movs	r2, #32
 800728a:	9201      	str	r2, [sp, #4]
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800728c:	f7ff fac2 	bl	8006814 <BSP_LCD_GetXSize>
 8007290:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007294:	9a01      	ldr	r2, [sp, #4]
 8007296:	fbb0 f0f3 	udiv	r0, r0, r3
 800729a:	4582      	cmp	sl, r0
 800729c:	d209      	bcs.n	80072b2 <__io_putchar+0xb2>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800729e:	8829      	ldrh	r1, [r5, #0]
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80072a0:	f10a 0a01 	add.w	sl, sl, #1
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80072a4:	8823      	ldrh	r3, [r4, #0]
 80072a6:	1c48      	adds	r0, r1, #1
 80072a8:	fb0b 9303 	mla	r3, fp, r3, r9
 80072ac:	8028      	strh	r0, [r5, #0]
 80072ae:	545a      	strb	r2, [r3, r1]
 80072b0:	e7eb      	b.n	800728a <__io_putchar+0x8a>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80072b2:	8823      	ldrh	r3, [r4, #0]
 80072b4:	2284      	movs	r2, #132	; 0x84
      
      LCD_CacheBuffer_xptr = 0;
 80072b6:	f04f 0a00 	mov.w	sl, #0
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80072ba:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8007314 <__io_putchar+0x114>
 80072be:	fb02 9303 	mla	r3, r2, r3, r9
 80072c2:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <__io_putchar+0x134>)
      
      LCD_CacheBuffer_xptr = 0;
 80072c4:	f8a5 a000 	strh.w	sl, [r5]
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      
      LCD_CacheBuffer_xptr = 0;
      
      LCD_LOG_UpdateDisplay (); 
 80072ce:	f7ff ff53 	bl	8007178 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 80072d2:	8823      	ldrh	r3, [r4, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	b29b      	uxth	r3, r3
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 80072d8:	2b11      	cmp	r3, #17
      {
        LCD_CacheBuffer_yptr_bottom = 0;
        LCD_CacheBuffer_yptr_top = 1;    
 80072da:	bf05      	ittet	eq
 80072dc:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80072de:	4a14      	ldreq	r2, [pc, #80]	; (8007330 <__io_putchar+0x130>)
      
      LCD_CacheBuffer_xptr = 0;
      
      LCD_LOG_UpdateDisplay (); 
      
      LCD_CacheBuffer_yptr_bottom ++; 
 80072e0:	f8a8 3000 	strhne.w	r3, [r8]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 80072e4:	f8a8 a000 	strheq.w	sl, [r8]
        LCD_CacheBuffer_yptr_top = 1;    
 80072e8:	bf04      	itt	eq
 80072ea:	8033      	strheq	r3, [r6, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80072ec:	7013      	strbeq	r3, [r2, #0]
      }
      
      if( ch != '\n')
 80072ee:	2f0a      	cmp	r7, #10
 80072f0:	d008      	beq.n	8007304 <__io_putchar+0x104>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80072f2:	882a      	ldrh	r2, [r5, #0]
 80072f4:	8823      	ldrh	r3, [r4, #0]
 80072f6:	1c51      	adds	r1, r2, #1
 80072f8:	8029      	strh	r1, [r5, #0]
 80072fa:	2184      	movs	r1, #132	; 0x84
 80072fc:	fb01 9903 	mla	r9, r1, r3, r9
 8007300:	f809 7002 	strb.w	r7, [r9, r2]
      }
      
    }
  }
  return ch;
}
 8007304:	4638      	mov	r0, r7
 8007306:	b003      	add	sp, #12
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	20000b49 	.word	0x20000b49
 8007310:	20000b4e 	.word	0x20000b4e
 8007314:	20000b44 	.word	0x20000b44
 8007318:	20000b40 	.word	0x20000b40
 800731c:	20000b4a 	.word	0x20000b4a
 8007320:	20000b42 	.word	0x20000b42
 8007324:	20001418 	.word	0x20001418
 8007328:	20000b4c 	.word	0x20000b4c
 800732c:	20000b46 	.word	0x20000b46
 8007330:	20000b48 	.word	0x20000b48
 8007334:	20001414 	.word	0x20001414
 8007338:	20000b50 	.word	0x20000b50

0800733c <_sbrk>:




caddr_t _sbrk(int incr)
{
 800733c:	b508      	push	{r3, lr}
	extern char end __asm__("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800733e:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <_sbrk+0x2c>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	b90a      	cbnz	r2, 8007348 <_sbrk+0xc>
		heap_end = &end;
 8007344:	4a09      	ldr	r2, [pc, #36]	; (800736c <_sbrk+0x30>)
 8007346:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007348:	681b      	ldr	r3, [r3, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
#else
	if (heap_end + incr > stack_ptr)
 800734a:	466a      	mov	r2, sp
 800734c:	4418      	add	r0, r3
 800734e:	4290      	cmp	r0, r2
 8007350:	d906      	bls.n	8007360 <_sbrk+0x24>
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007352:	f000 ffd1 	bl	80082f8 <__errno>
 8007356:	230c      	movs	r3, #12
 8007358:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800735a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800735e:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8007360:	4a01      	ldr	r2, [pc, #4]	; (8007368 <_sbrk+0x2c>)
 8007362:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007364:	4618      	mov	r0, r3
}
 8007366:	bd08      	pop	{r3, pc}
 8007368:	20000b38 	.word	0x20000b38
 800736c:	2000141c 	.word	0x2000141c

08007370 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	460e      	mov	r6, r1
 8007374:	4615      	mov	r5, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007376:	460c      	mov	r4, r1
 8007378:	1ba3      	subs	r3, r4, r6
 800737a:	429d      	cmp	r5, r3
 800737c:	dd04      	ble.n	8007388 <_write+0x18>
		{
		   __io_putchar( *ptr++ );
 800737e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007382:	f7ff ff3d 	bl	8007200 <__io_putchar>
 8007386:	e7f7      	b.n	8007378 <_write+0x8>
		}
	return len;
}
 8007388:	4628      	mov	r0, r5
 800738a:	bd70      	pop	{r4, r5, r6, pc}

0800738c <_close>:

int _close(int file)
{
	return -1;
}
 800738c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007390:	4770      	bx	lr

08007392 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8007396:	2000      	movs	r0, #0
	return -1;
}

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007398:	604b      	str	r3, [r1, #4]
	return 0;
}
 800739a:	4770      	bx	lr

0800739c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800739c:	2001      	movs	r0, #1
 800739e:	4770      	bx	lr

080073a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80073a0:	2000      	movs	r0, #0
 80073a2:	4770      	bx	lr

080073a4 <_read>:

int _read(int file, char *ptr, int len)
{
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	460e      	mov	r6, r1
 80073a8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073aa:	460c      	mov	r4, r1
 80073ac:	1ba3      	subs	r3, r4, r6
 80073ae:	429d      	cmp	r5, r3
 80073b0:	dd04      	ble.n	80073bc <_read+0x18>
	{
	  *ptr++ = __io_getchar();
 80073b2:	f3af 8000 	nop.w
 80073b6:	f804 0b01 	strb.w	r0, [r4], #1
 80073ba:	e7f7      	b.n	80073ac <_read+0x8>
	}

   return len;
}
 80073bc:	4628      	mov	r0, r5
 80073be:	bd70      	pop	{r4, r5, r6, pc}

080073c0 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80073c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp4 = 0;
  
  tmp = Width << 16;
  
  /* Configure DMA2D data size */
  hdma2d->Instance->NLR = (Height | tmp);
 80073c2:	9d04      	ldr	r5, [sp, #16]
 80073c4:	6804      	ldr	r4, [r0, #0]
 80073c6:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80073ca:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  hdma2d->Instance->OMAR = DstAddress;
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80073cc:	6843      	ldr	r3, [r0, #4]
  
  /* Configure DMA2D data size */
  hdma2d->Instance->NLR = (Height | tmp);
  
  /* Configure DMA2D destination address */
  hdma2d->Instance->OMAR = DstAddress;
 80073ce:	63e2      	str	r2, [r4, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80073d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073d4:	d132      	bne.n	800743c <DMA2D_SetConfig+0x7c>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
    
    /* Prepare the value to be wrote to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_ARGB8888)
 80073d6:	6882      	ldr	r2, [r0, #8]
  hdma2d->Instance->OMAR = DstAddress;
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80073d8:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80073dc:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80073e0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80073e4:	b2c9      	uxtb	r1, r1
    
    /* Prepare the value to be wrote to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_ARGB8888)
 80073e6:	b90a      	cbnz	r2, 80073ec <DMA2D_SetConfig+0x2c>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80073e8:	4333      	orrs	r3, r6
 80073ea:	e001      	b.n	80073f0 <DMA2D_SetConfig+0x30>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_RGB888)
 80073ec:	2a01      	cmp	r2, #1
 80073ee:	d102      	bne.n	80073f6 <DMA2D_SetConfig+0x36>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 80073f0:	432b      	orrs	r3, r5
 80073f2:	4319      	orrs	r1, r3
 80073f4:	e020      	b.n	8007438 <DMA2D_SetConfig+0x78>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_RGB565)
 80073f6:	2a02      	cmp	r2, #2
 80073f8:	d107      	bne.n	800740a <DMA2D_SetConfig+0x4a>
    {
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 10);
      tmp4 = (tmp4 >> 3 );
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80073fa:	0cd8      	lsrs	r0, r3, #19
 80073fc:	0aaa      	lsrs	r2, r5, #10
 80073fe:	02c0      	lsls	r0, r0, #11
 8007400:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8007404:	ea42 01d1 	orr.w	r1, r2, r1, lsr #3
 8007408:	e016      	b.n	8007438 <DMA2D_SetConfig+0x78>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_ARGB1555)
 800740a:	2a03      	cmp	r2, #3
 800740c:	d10a      	bne.n	8007424 <DMA2D_SetConfig+0x64>
    { 
      tmp1 = (tmp1 >> 31);
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 11);
      tmp4 = (tmp4 >> 3 );      
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 800740e:	0cd8      	lsrs	r0, r3, #19
 8007410:	0aea      	lsrs	r2, r5, #11
 8007412:	0280      	lsls	r0, r0, #10
 8007414:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8007418:	ea42 01d1 	orr.w	r1, r2, r1, lsr #3
 800741c:	0ff2      	lsrs	r2, r6, #31
 800741e:	ea41 31c2 	orr.w	r1, r1, r2, lsl #15
 8007422:	e009      	b.n	8007438 <DMA2D_SetConfig+0x78>
    {
      tmp1 = (tmp1 >> 28);
      tmp2 = (tmp2 >> 20);
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8007424:	0d18      	lsrs	r0, r3, #20
 8007426:	0b2a      	lsrs	r2, r5, #12
 8007428:	0200      	lsls	r0, r0, #8
 800742a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800742e:	ea42 1111 	orr.w	r1, r2, r1, lsr #4
 8007432:	0f32      	lsrs	r2, r6, #28
 8007434:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
    }    
    /* Write to DMA2D OCOLR register */
    hdma2d->Instance->OCOLR = tmp;
 8007438:	63a1      	str	r1, [r4, #56]	; 0x38
 800743a:	bd70      	pop	{r4, r5, r6, pc}
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    hdma2d->Instance->FGMAR = pdata;
 800743c:	60e1      	str	r1, [r4, #12]
 800743e:	bd70      	pop	{r4, r5, r6, pc}

08007440 <HAL_DMA2D_MspInit>:
 8007440:	4770      	bx	lr

08007442 <HAL_DMA2D_Init>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8007442:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8007444:	4604      	mov	r4, r0
 8007446:	b330      	cbz	r0, 8007496 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007448:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800744c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007450:	b91b      	cbnz	r3, 800745a <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007452:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007456:	f7ff fff3 	bl	8007440 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800745a:	2302      	movs	r3, #2

  /* Write to DMA2D OOR register */
  hdma2d->Instance->OOR = tmp;

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800745c:	2000      	movs	r0, #0
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800745e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

/* DMA2D CR register configuration -------------------------------------------*/
  /* Get the CR register value */
  tmp = hdma2d->Instance->CR;
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	681a      	ldr	r2, [r3, #0]

  /* Clear Mode bits */
  tmp &= (uint32_t)~DMA2D_CR_MODE;
 8007466:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000

  /* Prepare the value to be wrote to the CR register */
  tmp |= hdma2d->Init.Mode;
 800746a:	6862      	ldr	r2, [r4, #4]
 800746c:	430a      	orrs	r2, r1

  /* Write to DMA2D CR register */
  hdma2d->Instance->CR = tmp;
 800746e:	601a      	str	r2, [r3, #0]

/* DMA2D OPFCCR register configuration ---------------------------------------*/
  /* Get the OPFCCR register value */
  tmp = hdma2d->Instance->OPFCCR;
 8007470:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /* Clear Color Mode bits */
  tmp &= (uint32_t)~DMA2D_OPFCCR_CM;
 8007472:	f022 0107 	bic.w	r1, r2, #7

  /* Prepare the value to be wrote to the OPFCCR register */
  tmp |= hdma2d->Init.ColorMode;
 8007476:	68a2      	ldr	r2, [r4, #8]
 8007478:	430a      	orrs	r2, r1

  /* Clear Offset bits */
  tmp &= (uint32_t)~DMA2D_OOR_LO;

  /* Prepare the value to be wrote to the OOR register */
  tmp |= hdma2d->Init.OutputOffset;
 800747a:	68e1      	ldr	r1, [r4, #12]

  /* Prepare the value to be wrote to the OPFCCR register */
  tmp |= hdma2d->Init.ColorMode;

  /* Write to DMA2D OPFCCR register */
  hdma2d->Instance->OPFCCR = tmp;
 800747c:	635a      	str	r2, [r3, #52]	; 0x34

/* DMA2D OOR register configuration ------------------------------------------*/  
  /* Get the OOR register value */
  tmp = hdma2d->Instance->OOR;
 800747e:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Clear Offset bits */
  tmp &= (uint32_t)~DMA2D_OOR_LO;
 8007480:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8007484:	f022 023f 	bic.w	r2, r2, #63	; 0x3f

  /* Prepare the value to be wrote to the OOR register */
  tmp |= hdma2d->Init.OutputOffset;
 8007488:	430a      	orrs	r2, r1

  /* Write to DMA2D OOR register */
  hdma2d->Instance->OOR = tmp;
 800748a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800748c:	2301      	movs	r3, #1

  /* Write to DMA2D OOR register */
  hdma2d->Instance->OOR = tmp;

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800748e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007490:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8007494:	bd10      	pop	{r4, pc}
  uint32_t tmp = 0;

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
  {
     return HAL_ERROR;
 8007496:	2001      	movs	r0, #1

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;

  return HAL_OK;
}
 8007498:	bd10      	pop	{r4, pc}

0800749a <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:      The height of data to be transferred from source to destination.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800749a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800749c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:      The height of data to be transferred from source to destination.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80074a0:	4605      	mov	r5, r0
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80074a2:	2c01      	cmp	r4, #1
 80074a4:	f04f 0402 	mov.w	r4, #2
 80074a8:	d014      	beq.n	80074d4 <HAL_DMA2D_Start+0x3a>
 80074aa:	2601      	movs	r6, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80074ac:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80074b0:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Disable the Peripheral */
  __HAL_DMA2D_DISABLE(hdma2d);
 80074b4:	6806      	ldr	r6, [r0, #0]
 80074b6:	6834      	ldr	r4, [r6, #0]
 80074b8:	f024 0401 	bic.w	r4, r4, #1
 80074bc:	6034      	str	r4, [r6, #0]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80074be:	9c06      	ldr	r4, [sp, #24]
 80074c0:	9400      	str	r4, [sp, #0]
 80074c2:	f7ff ff7d 	bl	80073c0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80074c6:	682a      	ldr	r2, [r5, #0]

  return HAL_OK;
 80074c8:	2000      	movs	r0, #0

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	f043 0301 	orr.w	r3, r3, #1
 80074d0:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80074d2:	e000      	b.n	80074d6 <HAL_DMA2D_Start+0x3c>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80074d4:	4620      	mov	r0, r4

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);

  return HAL_OK;
}
 80074d6:	b002      	add	sp, #8
 80074d8:	bd70      	pop	{r4, r5, r6, pc}

080074da <HAL_DMA2D_PollForTransfer>:
{
  uint32_t tmp, tmp1;
  uint32_t tickstart = 0;

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 80074da:	6803      	ldr	r3, [r0, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	07db      	lsls	r3, r3, #31
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	4604      	mov	r4, r0
 80074e4:	460d      	mov	r5, r1
  uint32_t tmp, tmp1;
  uint32_t tickstart = 0;

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 80074e6:	d404      	bmi.n	80074f2 <HAL_DMA2D_PollForTransfer+0x18>
        }
      }        
    }
  }
  /* Polling for CLUT loading */
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	069e      	lsls	r6, r3, #26
 80074ee:	d52c      	bpl.n	800754a <HAL_DMA2D_PollForTransfer+0x70>
 80074f0:	e037      	b.n	8007562 <HAL_DMA2D_PollForTransfer+0x88>

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80074f2:	f7fe fe29 	bl	8006148 <HAL_GetTick>
 80074f6:	4606      	mov	r6, r0

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	0792      	lsls	r2, r2, #30
 80074fe:	d4f3      	bmi.n	80074e8 <HAL_DMA2D_PollForTransfer+0xe>
    {
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007500:	6859      	ldr	r1, [r3, #4]
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007502:	685a      	ldr	r2, [r3, #4]

      if((tmp != RESET) || (tmp1 != RESET))
 8007504:	0688      	lsls	r0, r1, #26
   tickstart = HAL_GetTick();

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
    {
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007506:	f002 0201 	and.w	r2, r2, #1

      if((tmp != RESET) || (tmp1 != RESET))
 800750a:	d50a      	bpl.n	8007522 <HAL_DMA2D_PollForTransfer+0x48>
      {
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800750c:	2220      	movs	r2, #32
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800750e:	2001      	movs	r0, #1
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);

      if((tmp != RESET) || (tmp1 != RESET))
      {
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007510:	609a      	str	r2, [r3, #8]
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007512:	6098      	str	r0, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007514:	2304      	movs	r3, #4
 8007516:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800751a:	2300      	movs	r3, #0
 800751c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        
        return HAL_ERROR;
 8007520:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
    {
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);

      if((tmp != RESET) || (tmp1 != RESET))
 8007522:	2a00      	cmp	r2, #0
 8007524:	d1f2      	bne.n	800750c <HAL_DMA2D_PollForTransfer+0x32>
        __HAL_UNLOCK(hdma2d);
        
        return HAL_ERROR;
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007526:	1c69      	adds	r1, r5, #1
 8007528:	d0e7      	beq.n	80074fa <HAL_DMA2D_PollForTransfer+0x20>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800752a:	b91d      	cbnz	r5, 8007534 <HAL_DMA2D_PollForTransfer+0x5a>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800752c:	2300      	movs	r3, #0
 800752e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8007532:	e01b      	b.n	800756c <HAL_DMA2D_PollForTransfer+0x92>
        return HAL_ERROR;
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8007534:	f7fe fe08 	bl	8006148 <HAL_GetTick>
 8007538:	1b80      	subs	r0, r0, r6
 800753a:	4285      	cmp	r5, r0
 800753c:	d2dc      	bcs.n	80074f8 <HAL_DMA2D_PollForTransfer+0x1e>
 800753e:	e7f5      	b.n	800752c <HAL_DMA2D_PollForTransfer+0x52>
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
        
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007540:	1c69      	adds	r1, r5, #1
 8007542:	d112      	bne.n	800756a <HAL_DMA2D_PollForTransfer+0x90>
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	06d2      	lsls	r2, r2, #27
 8007548:	d51f      	bpl.n	800758a <HAL_DMA2D_PollForTransfer+0xb0>
        }
      }      
    }
  }
  /* Clear the transfer complete flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	2202      	movs	r2, #2
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800754e:	2000      	movs	r0, #0
        }
      }      
    }
  }
  /* Clear the transfer complete flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007550:	609a      	str	r2, [r3, #8]
  
  /* Clear the CLUT loading flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);  
 8007552:	2210      	movs	r2, #16
 8007554:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007556:	2301      	movs	r3, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007558:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  /* Clear the CLUT loading flag */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);  
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800755c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
 8007560:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Polling for CLUT loading */
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007562:	f7fe fdf1 	bl	8006148 <HAL_GetTick>
 8007566:	4606      	mov	r6, r0
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8007568:	e00d      	b.n	8007586 <HAL_DMA2D_PollForTransfer+0xac>
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800756a:	b93d      	cbnz	r5, 800757c <HAL_DMA2D_PollForTransfer+0xa2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800756c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800756e:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007570:	f043 0320 	orr.w	r3, r3, #32
 8007574:	63e3      	str	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8007576:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          
          return HAL_TIMEOUT;
 800757a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800757c:	f7fe fde4 	bl	8006148 <HAL_GetTick>
 8007580:	1b80      	subs	r0, r0, r6
 8007582:	4285      	cmp	r5, r0
 8007584:	d3f2      	bcc.n	800756c <HAL_DMA2D_PollForTransfer+0x92>
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	e7dc      	b.n	8007544 <HAL_DMA2D_PollForTransfer+0x6a>
    {
      if((__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CAE) != RESET))
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	0710      	lsls	r0, r2, #28
 800758e:	d5d7      	bpl.n	8007540 <HAL_DMA2D_PollForTransfer+0x66>
      {      
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007590:	2208      	movs	r2, #8
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
        
        return HAL_ERROR;      
 8007592:	2001      	movs	r0, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
    {
      if((__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CAE) != RESET))
      {      
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007594:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007596:	2304      	movs	r3, #4
 8007598:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        
        return HAL_ERROR;      
 800759c:	bd70      	pop	{r4, r5, r6, pc}
	...

080075a0 <HAL_DMA2D_ConfigLayer>:
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80075a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 80075aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80075ac:	d05a      	beq.n	8007664 <HAL_DMA2D_ConfigLayer+0xc4>
 80075ae:	2201      	movs	r2, #1
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 80075b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80075b4:	6803      	ldr	r3, [r0, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80075b6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 80075ba:	bb11      	cbnz	r1, 8007602 <HAL_DMA2D_ConfigLayer+0x62>
  {
    /* DMA2D BGPFCR register configuration -----------------------------------*/
    /* Get the BGPFCCR register value */
    tmp = hdma2d->Instance->BGPFCCR;
 80075bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA); 
 80075be:	492a      	ldr	r1, [pc, #168]	; (8007668 <HAL_DMA2D_ConfigLayer+0xc8>)
 80075c0:	6a06      	ldr	r6, [r0, #32]
 80075c2:	4011      	ands	r1, r2
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80075c4:	69c2      	ldr	r2, [r0, #28]
 80075c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80075c8:	f1a2 0509 	sub.w	r5, r2, #9
 80075cc:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80075d0:	2d01      	cmp	r5, #1
 80075d2:	ea42 0201 	orr.w	r2, r2, r1
    {
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80075d6:	bf96      	itet	ls
 80075d8:	f004 417f 	andls.w	r1, r4, #4278190080	; 0xff000000
    }
    else
    {
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 80075dc:	ea42 6204 	orrhi.w	r2, r2, r4, lsl #24
    tmp &= (uint32_t)~(DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
    {
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80075e0:	430a      	orrls	r2, r1
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_BGOR_LO; 
    
    /* Prepare the value to be wrote to the BGOR register */
    tmp |= pLayerCfg->InputOffset;
 80075e2:	6981      	ldr	r1, [r0, #24]
    
    /* Write to DMA2D BGOR register */
    hdma2d->Instance->BGOR = tmp;
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80075e4:	2d01      	cmp	r5, #1
      /* Prepare the value to be wrote to the BGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
    }
    
    /* Write to DMA2D BGPFCCR register */
    hdma2d->Instance->BGPFCCR = tmp; 
 80075e6:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* DMA2D BGOR register configuration -------------------------------------*/  
    /* Get the BGOR register value */
    tmp = hdma2d->Instance->BGOR;
 80075e8:	699a      	ldr	r2, [r3, #24]
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_BGOR_LO; 
 80075ea:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80075ee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    
    /* Prepare the value to be wrote to the BGOR register */
    tmp |= pLayerCfg->InputOffset;
 80075f2:	ea42 0201 	orr.w	r2, r2, r1
    
    /* Write to DMA2D BGOR register */
    hdma2d->Instance->BGOR = tmp;
 80075f6:	619a      	str	r2, [r3, #24]
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80075f8:	d82e      	bhi.n	8007658 <HAL_DMA2D_ConfigLayer+0xb8>
    {
      /* Prepare the value to be wrote to the BGCOLR register */
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 80075fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    
      /* Write to DMA2D BGCOLR register */
      hdma2d->Instance->BGCOLR = tmp;
 80075fe:	629c      	str	r4, [r3, #40]	; 0x28
 8007600:	e02a      	b.n	8007658 <HAL_DMA2D_ConfigLayer+0xb8>
    tmp = hdma2d->Instance->FGPFCCR;
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8007602:	010d      	lsls	r5, r1, #4
  /* Configure the foreground DMA2D layer */
  else
  {
    /* DMA2D FGPFCR register configuration -----------------------------------*/
    /* Get the FGPFCCR register value */
    tmp = hdma2d->Instance->FGPFCCR;
 8007604:	69da      	ldr	r2, [r3, #28]
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
 8007606:	4c18      	ldr	r4, [pc, #96]	; (8007668 <HAL_DMA2D_ConfigLayer+0xc8>)
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8007608:	eb00 0e05 	add.w	lr, r0, r5
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
    
    /* Prepare the value to be wrote to the FGOR register */
    tmp |= pLayerCfg->InputOffset;
 800760c:	4405      	add	r5, r0
    /* DMA2D FGPFCR register configuration -----------------------------------*/
    /* Get the FGPFCCR register value */
    tmp = hdma2d->Instance->FGPFCCR;
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
 800760e:	4014      	ands	r4, r2
 8007610:	f8de 7020 	ldr.w	r7, [lr, #32]
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8007614:	f8de 201c 	ldr.w	r2, [lr, #28]
 8007618:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800761c:	f1a2 0609 	sub.w	r6, r2, #9
 8007620:	4322      	orrs	r2, r4
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8007622:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    tmp = hdma2d->Instance->FGPFCCR;
    
    /* Clear Input color mode, alpha value and alpha mode bits */
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8007626:	2e01      	cmp	r6, #1
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8007628:	bf96      	itet	ls
 800762a:	f004 447f 	andls.w	r4, r4, #4278190080	; 0xff000000
    }
    else
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 800762e:	ea42 6204 	orrhi.w	r2, r2, r4, lsl #24
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
    
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
    {
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8007632:	4322      	orrls	r2, r4
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
    
    /* Prepare the value to be wrote to the FGOR register */
    tmp |= pLayerCfg->InputOffset;
 8007634:	69ac      	ldr	r4, [r5, #24]
    
    /* Write to DMA2D FGOR register */
    hdma2d->Instance->FGOR = tmp;
   
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8007636:	2e01      	cmp	r6, #1
      /* Prepare the value to be wrote to the FGPFCCR register */
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
    }
    
    /* Write to DMA2D FGPFCCR register */
    hdma2d->Instance->FGPFCCR = tmp; 
 8007638:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/  
    /* Get the FGOR register value */
    tmp = hdma2d->Instance->FGOR;
 800763a:	691a      	ldr	r2, [r3, #16]
    
    /* Clear colors bits */
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
 800763c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8007640:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    
    /* Prepare the value to be wrote to the FGOR register */
    tmp |= pLayerCfg->InputOffset;
 8007644:	ea42 0204 	orr.w	r2, r2, r4
    
    /* Write to DMA2D FGOR register */
    hdma2d->Instance->FGOR = tmp;
 8007648:	611a      	str	r2, [r3, #16]
   
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 800764a:	d805      	bhi.n	8007658 <HAL_DMA2D_ConfigLayer+0xb8>
    {
      /* Prepare the value to be wrote to the FGCOLR register */
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 800764c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007650:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8007652:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    
      /* Write to DMA2D FGCOLR register */
      hdma2d->Instance->FGCOLR = tmp;
 8007656:	621a      	str	r2, [r3, #32]
    }   
  }    
  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007658:	2301      	movs	r3, #1
 800765a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 800765e:	2300      	movs	r3, #0
 8007660:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
  
  uint32_t tmp = 0;
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007664:	4618      	mov	r0, r3
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
  
  return HAL_OK;
}
 8007666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007668:	00fcfff0 	.word	0x00fcfff0

0800766c <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800766c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8007670:	6804      	ldr	r4, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007672:	01d2      	lsls	r2, r2, #7
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8007674:	684f      	ldr	r7, [r1, #4]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007676:	f04f 0800 	mov.w	r8, #0
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800767a:	f104 0e84 	add.w	lr, r4, #132	; 0x84
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800767e:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8007680:	f8d1 c000 	ldr.w	ip, [r1]
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007684:	eb02 030e 	add.w	r3, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8007688:	f3c5 450b 	ubfx	r5, r5, #16, #12
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800768c:	6858      	ldr	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800768e:	19ee      	adds	r6, r5, r7
 8007690:	f10c 0501 	add.w	r5, ip, #1
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007694:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8007698:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800769a:	68e0      	ldr	r0, [r4, #12]
 800769c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80076a0:	4428      	add	r0, r5

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80076a2:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80076a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80076a8:	6058      	str	r0, [r3, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80076aa:	68e0      	ldr	r0, [r4, #12]
 80076ac:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80076b0:	1946      	adds	r6, r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076b2:	6898      	ldr	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80076b4:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076b6:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80076ba:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80076bc:	1c68      	adds	r0, r5, #1
 80076be:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80076c0:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80076c2:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80076c6:	4420      	add	r0, r4
 80076c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80076cc:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80076ce:	6098      	str	r0, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80076d0:	6918      	ldr	r0, [r3, #16]
 80076d2:	f020 0007 	bic.w	r0, r0, #7
 80076d6:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80076d8:	611e      	str	r6, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80076da:	6998      	ldr	r0, [r3, #24]
  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80076dc:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 80076e0:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80076e4:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80076e8:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 80076ec:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
 80076f0:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 80076f4:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80076f8:	619c      	str	r4, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80076fa:	6958      	ldr	r0, [r3, #20]
 80076fc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8007700:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007702:	6948      	ldr	r0, [r1, #20]
 8007704:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007706:	69d8      	ldr	r0, [r3, #28]
 8007708:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800770c:	f020 0007 	bic.w	r0, r0, #7
 8007710:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007712:	69cd      	ldr	r5, [r1, #28]
 8007714:	6a0c      	ldr	r4, [r1, #32]
 8007716:	432c      	orrs	r4, r5
 8007718:	61dc      	str	r4, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800771a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800771c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800771e:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007722:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007724:	b14e      	cbz	r6, 800773a <LTDC_SetConfig+0xce>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007726:	2e01      	cmp	r6, #1
 8007728:	d009      	beq.n	800773e <LTDC_SetConfig+0xd2>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800772a:	1eb0      	subs	r0, r6, #2
 800772c:	2802      	cmp	r0, #2
 800772e:	d908      	bls.n	8007742 <LTDC_SetConfig+0xd6>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007730:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8007732:	bf0c      	ite	eq
 8007734:	2002      	moveq	r0, #2
 8007736:	2001      	movne	r0, #1
 8007738:	e004      	b.n	8007744 <LTDC_SetConfig+0xd8>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
  {
    tmp = 4;
 800773a:	2004      	movs	r0, #4
 800773c:	e002      	b.n	8007744 <LTDC_SetConfig+0xd8>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
  {
    tmp = 3;
 800773e:	2003      	movs	r0, #3
 8007740:	e000      	b.n	8007744 <LTDC_SetConfig+0xd8>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 8007742:	2002      	movs	r0, #2
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007744:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8007746:	ebcc 0707 	rsb	r7, ip, r7
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800774a:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800774e:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8007750:	6a8c      	ldr	r4, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007752:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8007754:	4344      	muls	r4, r0
 8007756:	4378      	muls	r0, r7
 8007758:	3003      	adds	r0, #3
 800775a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800775e:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007760:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007762:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8007766:	f020 0007 	bic.w	r0, r0, #7
 800776a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800776c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800776e:	f852 300e 	ldr.w	r3, [r2, lr]
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	f842 300e 	str.w	r3, [r2, lr]
 800777a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800777e <HAL_LTDC_MspInit>:
 800777e:	4770      	bx	lr

08007780 <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007780:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8007782:	4604      	mov	r4, r0
 8007784:	2800      	cmp	r0, #0
 8007786:	d06a      	beq.n	800785e <HAL_LTDC_Init+0xde>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8007788:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800778c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007790:	b91b      	cbnz	r3, 800779a <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007792:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007796:	f7ff fff2 	bl	800777e <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800779a:	2302      	movs	r3, #2
 800779c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80077a8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80077aa:	6862      	ldr	r2, [r4, #4]
 80077ac:	6999      	ldr	r1, [r3, #24]
 80077ae:	4311      	orrs	r1, r2
 80077b0:	68a2      	ldr	r2, [r4, #8]
 80077b2:	4311      	orrs	r1, r2
 80077b4:	68e2      	ldr	r2, [r4, #12]
 80077b6:	4311      	orrs	r1, r2
 80077b8:	6922      	ldr	r2, [r4, #16]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	619a      	str	r2, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80077be:	4a29      	ldr	r2, [pc, #164]	; (8007864 <HAL_LTDC_Init+0xe4>)
 80077c0:	6899      	ldr	r1, [r3, #8]
 80077c2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80077c4:	6961      	ldr	r1, [r4, #20]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80077c6:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80077c8:	69a2      	ldr	r2, [r4, #24]
 80077ca:	6898      	ldr	r0, [r3, #8]
 80077cc:	4302      	orrs	r2, r0
 80077ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80077d2:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80077d4:	4a23      	ldr	r2, [pc, #140]	; (8007864 <HAL_LTDC_Init+0xe4>)
 80077d6:	68d9      	ldr	r1, [r3, #12]
 80077d8:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80077da:	69e1      	ldr	r1, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80077dc:	60da      	str	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80077de:	6a22      	ldr	r2, [r4, #32]
 80077e0:	68d8      	ldr	r0, [r3, #12]
 80077e2:	4302      	orrs	r2, r0
 80077e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80077e8:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80077ea:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <HAL_LTDC_Init+0xe4>)
 80077ec:	6919      	ldr	r1, [r3, #16]
 80077ee:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80077f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80077f2:	611a      	str	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80077f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80077f6:	6918      	ldr	r0, [r3, #16]
 80077f8:	4302      	orrs	r2, r0
 80077fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80077fe:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007800:	4a18      	ldr	r2, [pc, #96]	; (8007864 <HAL_LTDC_Init+0xe4>)
 8007802:	6959      	ldr	r1, [r3, #20]
 8007804:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007806:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007808:	615a      	str	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800780a:	6958      	ldr	r0, [r3, #20]
 800780c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800780e:	4302      	orrs	r2, r0
 8007810:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007814:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8007818:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800781c:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8007820:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007824:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007828:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 800782c:	4329      	orrs	r1, r5
 800782e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8007832:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8007836:	2000      	movs	r0, #0

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007838:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800783a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783c:	f042 0204 	orr.w	r2, r2, #4
 8007840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8007842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007844:	f042 0202 	orr.w	r2, r2, #2
 8007848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800784a:	699a      	ldr	r2, [r3, #24]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007852:	2301      	movs	r3, #1

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8007854:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007858:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
 800785c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
  {
    return HAL_ERROR;
 800785e:	2001      	movs	r0, #1

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  return HAL_OK;
}
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	f000f800 	.word	0xf000f800

08007868 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 800786a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800786e:	4606      	mov	r6, r0
 8007870:	468e      	mov	lr, r1
 8007872:	4694      	mov	ip, r2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007874:	2b01      	cmp	r3, #1
 8007876:	f04f 0002 	mov.w	r0, #2
 800787a:	d01d      	beq.n	80078b8 <HAL_LTDC_ConfigLayer+0x50>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800787c:	2434      	movs	r4, #52	; 0x34
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 800787e:	2701      	movs	r7, #1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8007880:	460d      	mov	r5, r1
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007882:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8007886:	fb04 6402 	mla	r4, r4, r2, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 800788a:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800788e:	3438      	adds	r4, #56	; 0x38
 8007890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800789a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800789c:	682b      	ldr	r3, [r5, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800789e:	4630      	mov	r0, r6
 80078a0:	4662      	mov	r2, ip
 80078a2:	4671      	mov	r1, lr
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80078a4:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80078a6:	f7ff fee1 	bl	800766c <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80078aa:	6833      	ldr	r3, [r6, #0]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80078ac:	2000      	movs	r0, #0

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80078ae:	625f      	str	r7, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80078b0:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80078b4:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0

  return HAL_OK;
}
 80078b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078ba <HAL_LTDC_GetState>:
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
  return hltdc->State;
 80078ba:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 80078be:	4770      	bx	lr

080078c0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078c0:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078c6:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078ca:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078cc:	d00b      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078ce:	4ab5      	ldr	r2, [pc, #724]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80078d0:	6891      	ldr	r1, [r2, #8]
 80078d2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80078d6:	6091      	str	r1, [r2, #8]
 80078d8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80078da:	6891      	ldr	r1, [r2, #8]
 80078dc:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 80078de:	fab6 f686 	clz	r6, r6
 80078e2:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078e4:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078e6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80078ea:	d012      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078ec:	49ad      	ldr	r1, [pc, #692]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80078ee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80078f0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80078f4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078f8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80078fc:	bf08      	it	eq
 80078fe:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007900:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8007904:	bf16      	itet	ne
 8007906:	fab5 f585 	clzne	r5, r5
 800790a:	2500      	moveq	r5, #0
 800790c:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800790e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007912:	02d8      	lsls	r0, r3, #11
 8007914:	d511      	bpl.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007916:	48a3      	ldr	r0, [pc, #652]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007918:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800791a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800791e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007922:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007926:	ea42 0201 	orr.w	r2, r2, r1
 800792a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800792e:	d003      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8007930:	2900      	cmp	r1, #0
 8007932:	bf08      	it	eq
 8007934:	2501      	moveq	r5, #1
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8007938:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800793a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800793e:	bf18      	it	ne
 8007940:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007942:	0699      	lsls	r1, r3, #26
 8007944:	d55b      	bpl.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007946:	2300      	movs	r3, #0
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007948:	4f97      	ldr	r7, [pc, #604]	; (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	4b95      	ldr	r3, [pc, #596]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800794e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007950:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007954:	641a      	str	r2, [r3, #64]	; 0x40
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	9b01      	ldr	r3, [sp, #4]
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007966:	603b      	str	r3, [r7, #0]
      
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007968:	f7fe fbee 	bl	8006148 <HAL_GetTick>
 800796c:	4680      	mov	r8, r0
      
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	05da      	lsls	r2, r3, #23
 8007972:	d407      	bmi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007974:	f7fe fbe8 	bl	8006148 <HAL_GetTick>
 8007978:	ebc8 0000 	rsb	r0, r8, r0
 800797c:	2864      	cmp	r0, #100	; 0x64
 800797e:	d9f6      	bls.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xae>
      {
        return HAL_TIMEOUT;
 8007980:	2003      	movs	r0, #3
 8007982:	e33c      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      }      
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007984:	4f87      	ldr	r7, [pc, #540]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007988:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800798a:	4053      	eors	r3, r2
 800798c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007990:	d035      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007992:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007996:	f422 7140 	bic.w	r1, r2, #768	; 0x300
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800799a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800799e:	673b      	str	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a6:	673b      	str	r3, [r7, #112]	; 0x70
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 80079a8:	0793      	lsls	r3, r2, #30
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079aa:	6739      	str	r1, [r7, #112]	; 0x70
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 80079ac:	d40f      	bmi.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 80079ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80079b0:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80079b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b8:	4b7a      	ldr	r3, [pc, #488]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80079ba:	d117      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80079bc:	6899      	ldr	r1, [r3, #8]
 80079be:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80079c2:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80079c6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80079ca:	4301      	orrs	r1, r0
 80079cc:	e011      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ce:	f7fe fbbb 	bl	8006148 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079d2:	f241 3988 	movw	r9, #5000	; 0x1388
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d6:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079da:	0798      	lsls	r0, r3, #30
 80079dc:	d4e7      	bmi.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079de:	f7fe fbb3 	bl	8006148 <HAL_GetTick>
 80079e2:	ebc8 0000 	rsb	r0, r8, r0
 80079e6:	4548      	cmp	r0, r9
 80079e8:	d9f6      	bls.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80079ea:	e7c9      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 80079ec:	6899      	ldr	r1, [r3, #8]
 80079ee:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80079f2:	6099      	str	r1, [r3, #8]
 80079f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80079f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80079fa:	430a      	orrs	r2, r1
 80079fc:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	06d9      	lsls	r1, r3, #27
 8007a02:	d50c      	bpl.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a04:	4a67      	ldr	r2, [pc, #412]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a06:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8007a0a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007a0e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8007a12:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8007a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a18:	4301      	orrs	r1, r0
 8007a1a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a1e:	045a      	lsls	r2, r3, #17
 8007a20:	d508      	bpl.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a22:	4860      	ldr	r0, [pc, #384]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a24:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007a28:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8007a2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a34:	041f      	lsls	r7, r3, #16
 8007a36:	d508      	bpl.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a38:	485a      	ldr	r0, [pc, #360]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a3a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007a3e:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8007a42:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007a44:	430a      	orrs	r2, r1
 8007a46:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a4a:	03d8      	lsls	r0, r3, #15
 8007a4c:	d508      	bpl.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a4e:	4855      	ldr	r0, [pc, #340]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a50:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007a54:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8007a58:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a60:	0399      	lsls	r1, r3, #14
 8007a62:	d508      	bpl.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a64:	484f      	ldr	r0, [pc, #316]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a66:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007a6a:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8007a6e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8007a70:	430a      	orrs	r2, r1
 8007a72:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a76:	065a      	lsls	r2, r3, #25
 8007a78:	d508      	bpl.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a7a:	484a      	ldr	r0, [pc, #296]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a7c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007a80:	f022 0103 	bic.w	r1, r2, #3
 8007a84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007a86:	430a      	orrs	r2, r1
 8007a88:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a8c:	061f      	lsls	r7, r3, #24
 8007a8e:	d508      	bpl.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a90:	4844      	ldr	r0, [pc, #272]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007a92:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007a96:	f022 010c 	bic.w	r1, r2, #12
 8007a9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aa2:	05d8      	lsls	r0, r3, #23
 8007aa4:	d508      	bpl.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007aa6:	483f      	ldr	r0, [pc, #252]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007aa8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007aac:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8007ab0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ab8:	0599      	lsls	r1, r3, #22
 8007aba:	d508      	bpl.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007abc:	4839      	ldr	r0, [pc, #228]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007abe:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007ac2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8007ac6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ace:	055a      	lsls	r2, r3, #21
 8007ad0:	d508      	bpl.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ad2:	4834      	ldr	r0, [pc, #208]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007ad4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007ad8:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8007adc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007ae4:	051f      	lsls	r7, r3, #20
 8007ae6:	d508      	bpl.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007ae8:	482e      	ldr	r0, [pc, #184]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007aea:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007aee:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8007af2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007af4:	430a      	orrs	r2, r1
 8007af6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007afa:	04d8      	lsls	r0, r3, #19
 8007afc:	d508      	bpl.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007afe:	4829      	ldr	r0, [pc, #164]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b00:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007b04:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8007b08:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b10:	0499      	lsls	r1, r3, #18
 8007b12:	d508      	bpl.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007b14:	4823      	ldr	r0, [pc, #140]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b16:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007b1a:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8007b1e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007b20:	430a      	orrs	r2, r1
 8007b22:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b26:	025a      	lsls	r2, r3, #9
 8007b28:	d508      	bpl.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b2a:	481e      	ldr	r0, [pc, #120]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b2c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007b30:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8007b34:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007b36:	430a      	orrs	r2, r1
 8007b38:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b3c:	029f      	lsls	r7, r3, #10
 8007b3e:	d50c      	bpl.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b40:	4818      	ldr	r0, [pc, #96]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b42:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007b44:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8007b48:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b4c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8007b50:	bf08      	it	eq
 8007b52:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b54:	430a      	orrs	r2, r1
 8007b56:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8007b5a:	f013 0f08 	tst.w	r3, #8
 8007b5e:	bf18      	it	ne
 8007b60:	2501      	movne	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b62:	0358      	lsls	r0, r3, #13
 8007b64:	d508      	bpl.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b66:	480f      	ldr	r0, [pc, #60]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b68:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007b6c:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8007b70:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007b72:	430a      	orrs	r2, r1
 8007b74:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b78:	0219      	lsls	r1, r3, #8
 8007b7a:	d509      	bpl.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b7c:	4809      	ldr	r0, [pc, #36]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b7e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007b82:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8007b86:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007b90:	2e01      	cmp	r6, #1
 8007b92:	d00b      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8007b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b98:	d008      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007b9a:	2d01      	cmp	r5, #1
 8007b9c:	f040 818c 	bne.w	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007ba0:	e123      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007ba2:	bf00      	nop
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8007bac:	4ec8      	ldr	r6, [pc, #800]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8007bae:	6833      	ldr	r3, [r6, #0]
 8007bb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bb4:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb6:	f7fe fac7 	bl	8006148 <HAL_GetTick>
 8007bba:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bbc:	6833      	ldr	r3, [r6, #0]
 8007bbe:	f8df e310 	ldr.w	lr, [pc, #784]	; 8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8007bc2:	011a      	lsls	r2, r3, #4
 8007bc4:	d505      	bpl.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bc6:	f7fe fabf 	bl	8006148 <HAL_GetTick>
 8007bca:	1bc0      	subs	r0, r0, r7
 8007bcc:	2864      	cmp	r0, #100	; 0x64
 8007bce:	d9f5      	bls.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007bd0:	e6d6      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007bd2:	6827      	ldr	r7, [r4, #0]
 8007bd4:	07fb      	lsls	r3, r7, #31
 8007bd6:	d53c      	bpl.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bda:	bbd3      	cbnz	r3, 8007c52 <HAL_RCCEx_PeriphCLKConfig+0x392>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8007bdc:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8007be0:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8007be4:	fa98 f9a8 	rbit	r9, r8
 8007be8:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8007bec:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8007bf0:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8007bf4:	fa96 fca6 	rbit	ip, r6
 8007bf8:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8007bfc:	fabc fc8c 	clz	ip, ip
 8007c00:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c04:	faba fa8a 	clz	sl, sl
 8007c08:	fa98 f8a8 	rbit	r8, r8
 8007c0c:	fab8 f888 	clz	r8, r8
 8007c10:	fa96 f6a6 	rbit	r6, r6
 8007c14:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007c18:	fab6 f686 	clz	r6, r6
 8007c1c:	fa93 f3a3 	rbit	r3, r3
 8007c20:	fab3 fb83 	clz	fp, r3
 8007c24:	6861      	ldr	r1, [r4, #4]
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8007c2c:	fa01 f10a 	lsl.w	r1, r1, sl
 8007c30:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8007c34:	fa03 f30b 	lsl.w	r3, r3, fp
 8007c38:	fa20 f009 	lsr.w	r0, r0, r9
 8007c3c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007c40:	430b      	orrs	r3, r1
 8007c42:	fa00 f108 	lsl.w	r1, r0, r8
 8007c46:	4319      	orrs	r1, r3
 8007c48:	fa02 f306 	lsl.w	r3, r2, r6
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c52:	033e      	lsls	r6, r7, #12
 8007c54:	d503      	bpl.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8007c56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c5c:	d005      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8007c5e:	02f8      	lsls	r0, r7, #11
 8007c60:	d549      	bpl.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8007c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c68:	d145      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8007c6a:	f8df e264 	ldr.w	lr, [pc, #612]	; 8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8007c6e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8007c72:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8007c76:	fa98 f9a8 	rbit	r9, r8
 8007c7a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8007c7e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8007c82:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8007c86:	fa96 fca6 	rbit	ip, r6
 8007c8a:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8007c8e:	fabc fc8c 	clz	ip, ip
 8007c92:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007c96:	fabb fb8b 	clz	fp, fp
 8007c9a:	fa98 f8a8 	rbit	r8, r8
 8007c9e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8007ca2:	fab8 f888 	clz	r8, r8
 8007ca6:	fa93 f3a3 	rbit	r3, r3
 8007caa:	fab3 fa83 	clz	sl, r3
 8007cae:	fa96 f6a6 	rbit	r6, r6
 8007cb2:	6863      	ldr	r3, [r4, #4]
 8007cb4:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8007cb8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007cbc:	fab6 f686 	clz	r6, r6
 8007cc0:	fa03 f10b 	lsl.w	r1, r3, fp
 8007cc4:	68e3      	ldr	r3, [r4, #12]
 8007cc6:	fa20 f009 	lsr.w	r0, r0, r9
 8007cca:	fa22 f20c 	lsr.w	r2, r2, ip
 8007cce:	fa03 f30a 	lsl.w	r3, r3, sl
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	fa00 f108 	lsl.w	r1, r0, r8
 8007cd8:	4319      	orrs	r1, r3
 8007cda:	fa02 f306 	lsl.w	r3, r2, r6
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8007ce4:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8007ce8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007cea:	f023 031f 	bic.w	r3, r3, #31
 8007cee:	3a01      	subs	r2, #1
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cf6:	01f9      	lsls	r1, r7, #7
 8007cf8:	d53c      	bpl.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8007cfa:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8007cfe:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8007d02:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8007d06:	fa98 f9a8 	rbit	r9, r8
 8007d0a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8007d0e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8007d12:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8007d16:	fa96 fca6 	rbit	ip, r6
 8007d1a:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8007d1e:	fabc fc8c 	clz	ip, ip
 8007d22:	fa9b fbab 	rbit	fp, fp
 8007d26:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007d2a:	fabb fb8b 	clz	fp, fp
 8007d2e:	fa93 f3a3 	rbit	r3, r3
 8007d32:	fab3 fa83 	clz	sl, r3
 8007d36:	fa98 f8a8 	rbit	r8, r8
 8007d3a:	fab8 f888 	clz	r8, r8
 8007d3e:	fa96 f6a6 	rbit	r6, r6
 8007d42:	6863      	ldr	r3, [r4, #4]
 8007d44:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8007d48:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007d4c:	fab6 f686 	clz	r6, r6
 8007d50:	fa03 f10b 	lsl.w	r1, r3, fp
 8007d54:	6923      	ldr	r3, [r4, #16]
 8007d56:	fa20 f009 	lsr.w	r0, r0, r9
 8007d5a:	fa22 f20c 	lsr.w	r2, r2, ip
 8007d5e:	fa03 f30a 	lsl.w	r3, r3, sl
 8007d62:	430b      	orrs	r3, r1
 8007d64:	fa00 f108 	lsl.w	r1, r0, r8
 8007d68:	4319      	orrs	r1, r3
 8007d6a:	fa02 f306 	lsl.w	r3, r2, r6
 8007d6e:	430b      	orrs	r3, r1
 8007d70:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d74:	01ba      	lsls	r2, r7, #6
 8007d76:	d526      	bpl.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007d78:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8007d7c:	fa9e feae 	rbit	lr, lr
 8007d80:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d84:	fabe fe8e 	clz	lr, lr
 8007d88:	fa90 f0a0 	rbit	r0, r0
 8007d8c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8007d90:	fab0 f780 	clz	r7, r0
 8007d94:	fa92 f2a2 	rbit	r2, r2
 8007d98:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007d9c:	fab2 f682 	clz	r6, r2
 8007da0:	fa93 f3a3 	rbit	r3, r3
 8007da4:	fab3 f183 	clz	r1, r3
 8007da8:	6920      	ldr	r0, [r4, #16]
 8007daa:	6863      	ldr	r3, [r4, #4]
 8007dac:	68e2      	ldr	r2, [r4, #12]
 8007dae:	40b8      	lsls	r0, r7
 8007db0:	fa03 f30e 	lsl.w	r3, r3, lr
 8007db4:	40b2      	lsls	r2, r6
 8007db6:	4303      	orrs	r3, r0
 8007db8:	431a      	orrs	r2, r3
 8007dba:	68a3      	ldr	r3, [r4, #8]
 8007dbc:	408b      	lsls	r3, r1
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	4a43      	ldr	r2, [pc, #268]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8007dc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007dc6:	4e42      	ldr	r6, [pc, #264]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8007dc8:	6833      	ldr	r3, [r6, #0]
 8007dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dce:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd0:	f7fe f9ba 	bl	8006148 <HAL_GetTick>
 8007dd4:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dd6:	6833      	ldr	r3, [r6, #0]
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	f53f aede 	bmi.w	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007dde:	f7fe f9b3 	bl	8006148 <HAL_GetTick>
 8007de2:	1bc0      	subs	r0, r0, r7
 8007de4:	2864      	cmp	r0, #100	; 0x64
 8007de6:	d9f6      	bls.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007de8:	e5ca      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8007dea:	4d39      	ldr	r5, [pc, #228]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df2:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df4:	f7fe f9a8 	bl	8006148 <HAL_GetTick>
 8007df8:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	009f      	lsls	r7, r3, #2
 8007dfe:	d45d      	bmi.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e00:	6825      	ldr	r5, [r4, #0]
 8007e02:	032e      	lsls	r6, r5, #12
 8007e04:	d460      	bmi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007e06:	02e8      	lsls	r0, r5, #11
 8007e08:	d464      	bmi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007e0a:	02a9      	lsls	r1, r5, #10
 8007e0c:	f100 80ad 	bmi.w	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F756xx) || defined(STM32F746xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e10:	072a      	lsls	r2, r5, #28
 8007e12:	d545      	bpl.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8007e14:	4f2e      	ldr	r7, [pc, #184]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8007e16:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8007e1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007e1e:	fa95 fca5 	rbit	ip, r5
 8007e22:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8007e26:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8007e2a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8007e2e:	fa96 f8a6 	rbit	r8, r6
 8007e32:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8007e36:	fab8 f888 	clz	r8, r8
 8007e3a:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e3e:	fab9 f989 	clz	r9, r9
 8007e42:	fa96 f6a6 	rbit	r6, r6
 8007e46:	fab6 f686 	clz	r6, r6
 8007e4a:	fa95 f5a5 	rbit	r5, r5
 8007e4e:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8007e52:	fab5 f585 	clz	r5, r5
 8007e56:	fa9e feae 	rbit	lr, lr
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	fabe fe8e 	clz	lr, lr
 8007e60:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8007e64:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8007e68:	fa03 f109 	lsl.w	r1, r3, r9
 8007e6c:	69e3      	ldr	r3, [r4, #28]
 8007e6e:	fa20 f008 	lsr.w	r0, r0, r8
 8007e72:	fa22 f20c 	lsr.w	r2, r2, ip
 8007e76:	fa03 fe0e 	lsl.w	lr, r3, lr
 8007e7a:	fa02 f305 	lsl.w	r3, r2, r5
 8007e7e:	ea41 0e0e 	orr.w	lr, r1, lr
 8007e82:	fa00 f106 	lsl.w	r1, r0, r6
 8007e86:	ea4e 0101 	orr.w	r1, lr, r1
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F756xx || STM32F746xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ea0:	4c0b      	ldr	r4, [pc, #44]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea8:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eaa:	f7fe f94d 	bl	8006148 <HAL_GetTick>
 8007eae:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	f140 809c 	bpl.w	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x730>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8007eb8:	2000      	movs	r0, #0
 8007eba:	e0a0      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ebc:	f7fe f944 	bl	8006148 <HAL_GetTick>
 8007ec0:	1b80      	subs	r0, r0, r6
 8007ec2:	2864      	cmp	r0, #100	; 0x64
 8007ec4:	d999      	bls.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8007ec6:	e55b      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ec8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007eca:	b133      	cbz	r3, 8007eda <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007ecc:	e79b      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8007ece:	bf00      	nop
 8007ed0:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d197      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8007eda:	4f4a      	ldr	r7, [pc, #296]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8007edc:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8007ee0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8007ee4:	fa9c f9ac 	rbit	r9, ip
 8007ee8:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8007eec:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8007ef0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007ef4:	fa96 fea6 	rbit	lr, r6
 8007ef8:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8007efc:	fabe fe8e 	clz	lr, lr
 8007f00:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f04:	faba fa8a 	clz	sl, sl
 8007f08:	fa9c fcac 	rbit	ip, ip
 8007f0c:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8007f10:	fabc fc8c 	clz	ip, ip
 8007f14:	fa98 f8a8 	rbit	r8, r8
 8007f18:	fab8 f888 	clz	r8, r8
 8007f1c:	fa96 f6a6 	rbit	r6, r6
 8007f20:	69a1      	ldr	r1, [r4, #24]
 8007f22:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8007f26:	6963      	ldr	r3, [r4, #20]
 8007f28:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007f2c:	fa01 f808 	lsl.w	r8, r1, r8
 8007f30:	fa20 f009 	lsr.w	r0, r0, r9
 8007f34:	fa03 f30a 	lsl.w	r3, r3, sl
 8007f38:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f3c:	fab6 f686 	clz	r6, r6
 8007f40:	fa00 f10c 	lsl.w	r1, r0, ip
 8007f44:	ea43 0308 	orr.w	r3, r3, r8
 8007f48:	4319      	orrs	r1, r3
 8007f4a:	fa02 f306 	lsl.w	r3, r2, r6
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007f5a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007f5e:	3a01      	subs	r2, #1
 8007f60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f68:	e74f      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f70:	f47f af4e 	bne.w	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8007f74:	4f23      	ldr	r7, [pc, #140]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8007f76:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8007f7a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8007f7e:	fa9c f9ac 	rbit	r9, ip
 8007f82:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8007f86:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8007f8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007f8e:	fa96 fea6 	rbit	lr, r6
 8007f92:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8007f96:	fabe fe8e 	clz	lr, lr
 8007f9a:	fa9a faaa 	rbit	sl, sl
 8007f9e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fa2:	faba fa8a 	clz	sl, sl
 8007fa6:	fa98 f8a8 	rbit	r8, r8
 8007faa:	fab8 f888 	clz	r8, r8
 8007fae:	fa9c fcac 	rbit	ip, ip
 8007fb2:	fabc fc8c 	clz	ip, ip
 8007fb6:	fa96 f6a6 	rbit	r6, r6
 8007fba:	6a21      	ldr	r1, [r4, #32]
 8007fbc:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8007fc0:	6963      	ldr	r3, [r4, #20]
 8007fc2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8007fc6:	fa01 f808 	lsl.w	r8, r1, r8
 8007fca:	fa20 f009 	lsr.w	r0, r0, r9
 8007fce:	fa03 f30a 	lsl.w	r3, r3, sl
 8007fd2:	fab6 f686 	clz	r6, r6
 8007fd6:	fa00 f10c 	lsl.w	r1, r0, ip
 8007fda:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fde:	ea43 0308 	orr.w	r3, r3, r8
 8007fe2:	4319      	orrs	r1, r3
 8007fe4:	fa02 f306 	lsl.w	r3, r2, r6
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fee:	e70f      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x550>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ff0:	f7fe f8aa 	bl	8006148 <HAL_GetTick>
 8007ff4:	1b40      	subs	r0, r0, r5
 8007ff6:	2864      	cmp	r0, #100	; 0x64
 8007ff8:	f67f af5a 	bls.w	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8007ffc:	e4c0      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8007ffe:	b003      	add	sp, #12
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	40023800 	.word	0x40023800

08008008 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 8008008:	6803      	ldr	r3, [r0, #0]
 800800a:	2118      	movs	r1, #24
 800800c:	b2da      	uxtb	r2, r3
 800800e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008012:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 8008014:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 8008018:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800801c:	4904      	ldr	r1, [pc, #16]	; (8008030 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3)
 800801e:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008020:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 8008022:	bf88      	it	hi
 8008024:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008026:	6541      	str	r1, [r0, #84]	; 0x54
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FF));
 8008028:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
}
 800802a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	0800afcc 	.word	0x0800afcc

08008034 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8008034:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008036:	4604      	mov	r4, r0
 8008038:	2800      	cmp	r0, #0
 800803a:	d031      	beq.n	80080a0 <HAL_DMA_Init+0x6c>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800803c:	6801      	ldr	r1, [r0, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800803e:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008040:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <HAL_DMA_Init+0x70>)
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008042:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008046:	680b      	ldr	r3, [r1, #0]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008048:	6840      	ldr	r0, [r0, #4]

  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800804a:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800804c:	68a3      	ldr	r3, [r4, #8]
 800804e:	4318      	orrs	r0, r3
 8008050:	68e3      	ldr	r3, [r4, #12]
 8008052:	4318      	orrs	r0, r3
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	4318      	orrs	r0, r3
 8008058:	6963      	ldr	r3, [r4, #20]
 800805a:	4318      	orrs	r0, r3
 800805c:	69a3      	ldr	r3, [r4, #24]
 800805e:	4318      	orrs	r0, r3
 8008060:	69e3      	ldr	r3, [r4, #28]
 8008062:	4318      	orrs	r0, r3
 8008064:	6a23      	ldr	r3, [r4, #32]
 8008066:	4303      	orrs	r3, r0
 8008068:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800806a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800806c:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800806e:	bf01      	itttt	eq
 8008070:	6b20      	ldreq	r0, [r4, #48]	; 0x30
 8008072:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8008074:	4328      	orreq	r0, r5
 8008076:	4303      	orreq	r3, r0

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008078:	2a04      	cmp	r2, #4
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800807a:	4620      	mov	r0, r4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800807c:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800807e:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008080:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008084:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008088:	bf04      	itt	eq
 800808a:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 800808c:	4313      	orreq	r3, r2
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800808e:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8008090:	f7ff ffba 	bl	8008008 <DMA_CalcBaseAndBitshift>
	
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008094:	2000      	movs	r0, #0

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008096:	2301      	movs	r3, #1
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
	
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008098:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800809a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 800809e:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80080a0:	2001      	movs	r0, #1

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	f010803f 	.word	0xf010803f

080080a8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80080a8:	b538      	push	{r3, r4, r5, lr}
	DMA_Base_Registers *regs;
	
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80080aa:	4605      	mov	r5, r0
 80080ac:	b1e8      	cbz	r0, 80080ea <HAL_DMA_DeInit+0x42>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80080ae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d019      	beq.n	80080ea <HAL_DMA_DeInit+0x42>
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80080b6:	6803      	ldr	r3, [r0, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 80080b8:	2400      	movs	r4, #0
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 80080c2:	2221      	movs	r2, #33	; 0x21

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 80080c4:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0;
 80080c6:	605c      	str	r4, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0;
 80080c8:	609c      	str	r4, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0;
 80080ca:	60dc      	str	r4, [r3, #12]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;
 80080cc:	611c      	str	r4, [r3, #16]

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 80080ce:	615a      	str	r2, [r3, #20]

  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080d0:	f7ff ff9a 	bl	8008008 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3F << hdma->StreamIndex;
 80080d4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80080d6:	233f      	movs	r3, #63	; 0x3f
 80080d8:	4093      	lsls	r3, r2
 80080da:	6083      	str	r3, [r0, #8]
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 80080dc:	4620      	mov	r0, r4
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3F << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080de:	64ec      	str	r4, [r5, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80080e0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80080e4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
	DMA_Base_Registers *regs;
	
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80080ea:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 80080ec:	bd38      	pop	{r3, r4, r5, pc}

080080ee <HAL_SDRAM_MspInit>:
 80080ee:	4770      	bx	lr

080080f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80080f4:	4604      	mov	r4, r0
 80080f6:	b1c8      	cbz	r0, 800812c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80080f8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80080fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008100:	b91b      	cbnz	r3, 800810a <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008102:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008106:	f7ff fff2 	bl	80080ee <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800810a:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800810c:	1d21      	adds	r1, r4, #4
 800810e:	6820      	ldr	r0, [r4, #0]
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008110:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008114:	f000 f835 	bl	8008182 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008118:	6862      	ldr	r2, [r4, #4]
 800811a:	4629      	mov	r1, r5
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	f000 f873 	bl	8008208 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008122:	2301      	movs	r3, #1
  
  return HAL_OK;
 8008124:	2000      	movs	r0, #0
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008126:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 800812a:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
  {
    return HAL_ERROR;
 800812c:	2001      	movs	r0, #1
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
  
  return HAL_OK;
}
 800812e:	bd38      	pop	{r3, r4, r5, pc}

08008130 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008134:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008138:	460d      	mov	r5, r1
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800813a:	b2c0      	uxtb	r0, r0
 800813c:	2802      	cmp	r0, #2
 800813e:	d00d      	beq.n	800815c <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008140:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008142:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008144:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008148:	f000 f8a9 	bl	800829e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800814c:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800814e:	2000      	movs	r0, #0
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008150:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008152:	bf0c      	ite	eq
 8008154:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008156:	2301      	movne	r3, #1
 8008158:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
}
 800815c:	bd38      	pop	{r3, r4, r5, pc}

0800815e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800815e:	b510      	push	{r4, lr}
 8008160:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008162:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8008166:	b2c0      	uxtb	r0, r0
 8008168:	2802      	cmp	r0, #2
 800816a:	d009      	beq.n	8008180 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800816c:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800816e:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008170:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008174:	f000 f8b9 	bl	80082ea <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008178:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800817a:	2000      	movs	r0, #0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800817c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
}
 8008180:	bd10      	pop	{r4, pc}

08008182 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008182:	680b      	ldr	r3, [r1, #0]
 8008184:	6a0a      	ldr	r2, [r1, #32]
 8008186:	2b01      	cmp	r3, #1
 8008188:	688b      	ldr	r3, [r1, #8]
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800818a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800818e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8008192:	68cf      	ldr	r7, [r1, #12]
 8008194:	690e      	ldr	r6, [r1, #16]
 8008196:	694d      	ldr	r5, [r1, #20]
 8008198:	698c      	ldr	r4, [r1, #24]
 800819a:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 800819e:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80081a2:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80081a4:	d013      	beq.n	80081ce <FMC_SDRAM_Init+0x4c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081a6:	ea4e 0e03 	orr.w	lr, lr, r3
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081aa:	f421 48ff 	bic.w	r8, r1, #32640	; 0x7f80
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081ae:	ea4e 0707 	orr.w	r7, lr, r7
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081b2:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081b6:	433e      	orrs	r6, r7
 80081b8:	4335      	orrs	r5, r6
 80081ba:	432c      	orrs	r4, r5
 80081bc:	ea44 010a 	orr.w	r1, r4, sl
 80081c0:	430a      	orrs	r2, r1
 80081c2:	ea42 0309 	orr.w	r3, r2, r9
 80081c6:	ea43 0308 	orr.w	r3, r3, r8
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80081ca:	6003      	str	r3, [r0, #0]
 80081cc:	e019      	b.n	8008202 <FMC_SDRAM_Init+0x80>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081ce:	ea4e 0e03 	orr.w	lr, lr, r3
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081d2:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081d6:	ea4a 0202 	orr.w	r2, sl, r2
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081da:	ea4e 0707 	orr.w	r7, lr, r7
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081de:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081e2:	ea42 0909 	orr.w	r9, r2, r9
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80081e6:	6842      	ldr	r2, [r0, #4]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081e8:	433e      	orrs	r6, r7
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80081ea:	ea49 010c 	orr.w	r1, r9, ip
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081ee:	f422 4cff 	bic.w	ip, r2, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081f2:	4335      	orrs	r5, r6
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081f4:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                       Init->MemoryDataWidth    |\
                       Init->InternalBankNumber |\
                       Init->CASLatency         |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80081f8:	6001      	str	r1, [r0, #0]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081fa:	432c      	orrs	r4, r5
 80081fc:	ea44 040c 	orr.w	r4, r4, ip
                       Init->InternalBankNumber |\
                       Init->CASLatency         |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008200:	6044      	str	r4, [r0, #4]
  }  
  
  return HAL_OK;
}
 8008202:	2000      	movs	r0, #0
 8008204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008208 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008208:	2a01      	cmp	r2, #1
 800820a:	694b      	ldr	r3, [r1, #20]
 800820c:	68ca      	ldr	r2, [r1, #12]
 800820e:	f8d1 c018 	ldr.w	ip, [r1, #24]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008212:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008216:	680e      	ldr	r6, [r1, #0]
 8008218:	684d      	ldr	r5, [r1, #4]
 800821a:	688c      	ldr	r4, [r1, #8]
 800821c:	f8d1 9010 	ldr.w	r9, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008220:	d01a      	beq.n	8008258 <FMC_SDRAM_Timing_Init+0x50>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008222:	6887      	ldr	r7, [r0, #8]
 8008224:	3e01      	subs	r6, #1
 8008226:	3d01      	subs	r5, #1
 8008228:	3c01      	subs	r4, #1
 800822a:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 800822e:	3a01      	subs	r2, #1
 8008230:	3b01      	subs	r3, #1
 8008232:	4337      	orrs	r7, r6
 8008234:	ea47 1605 	orr.w	r6, r7, r5, lsl #4
 8008238:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
 800823c:	ea45 3402 	orr.w	r4, r5, r2, lsl #12
 8008240:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8008244:	ea44 4102 	orr.w	r1, r4, r2, lsl #16
 8008248:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800824c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8008250:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008254:	6083      	str	r3, [r0, #8]
 8008256:	e01f      	b.n	8008298 <FMC_SDRAM_Timing_Init+0x90>
  }
  else /* FMC_Bank2_SDRAM */
  {  
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK2];
 8008258:	68c1      	ldr	r1, [r0, #12]
 800825a:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 800825e:	1e6f      	subs	r7, r5, #1
 8008260:	1e66      	subs	r6, r4, #1
 8008262:	f001 4870 	and.w	r8, r1, #4026531840	; 0xf0000000
 8008266:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800826a:	3b01      	subs	r3, #1
 800826c:	3a01      	subs	r2, #1
 800826e:	ea4e 0808 	orr.w	r8, lr, r8
 8008272:	051b      	lsls	r3, r3, #20
 8008274:	ea48 1e07 	orr.w	lr, r8, r7, lsl #4
 8008278:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800827c:	ea4e 2706 	orr.w	r7, lr, r6, lsl #8
 8008280:	ea47 4605 	orr.w	r6, r7, r5, lsl #16
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008284:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8008288:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RCDDelay)-1) << 24));   
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK1];
 800828c:	6886      	ldr	r6, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800828e:	f006 4670 	and.w	r6, r6, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
                        (((Timing->RPDelay)-1) << 20)); 

    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
 8008292:	60c5      	str	r5, [r0, #12]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008294:	4332      	orrs	r2, r6
                        (((Timing->RPDelay)-1) << 20)); 

    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr2;
 8008296:	6082      	str	r2, [r0, #8]
  }   
  
  return HAL_OK;
}
 8008298:	2000      	movs	r0, #0
 800829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800829e <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 800829e:	2300      	movs	r3, #0
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80082a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082a2:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80082a4:	9301      	str	r3, [sp, #4]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80082a6:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80082a8:	e891 0009 	ldmia.w	r1, {r0, r3}
 80082ac:	4303      	orrs	r3, r0
 80082ae:	68c8      	ldr	r0, [r1, #12]
 80082b0:	ea43 2040 	orr.w	r0, r3, r0, lsl #9
 80082b4:	688b      	ldr	r3, [r1, #8]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 80082bc:	9301      	str	r3, [sp, #4]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
                    );
    
  Device->SDCMR = tmpr;
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	6123      	str	r3, [r4, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80082c2:	f7fd ff41 	bl	8006148 <HAL_GetTick>
 80082c6:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80082c8:	69a0      	ldr	r0, [r4, #24]
 80082ca:	f010 0020 	ands.w	r0, r0, #32
 80082ce:	d00a      	beq.n	80082e6 <FMC_SDRAM_SendCommand+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80082d0:	1c6b      	adds	r3, r5, #1
 80082d2:	d0f9      	beq.n	80082c8 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80082d4:	b90d      	cbnz	r5, 80082da <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80082d6:	2003      	movs	r0, #3
 80082d8:	e005      	b.n	80082e6 <FMC_SDRAM_SendCommand+0x48>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80082da:	f7fd ff35 	bl	8006148 <HAL_GetTick>
 80082de:	1b80      	subs	r0, r0, r6
 80082e0:	4285      	cmp	r5, r0
 80082e2:	d2f1      	bcs.n	80082c8 <FMC_SDRAM_SendCommand+0x2a>
 80082e4:	e7f7      	b.n	80082d6 <FMC_SDRAM_SendCommand+0x38>
      }
    }     
  }
  
  return HAL_OK;  
}
 80082e6:	b002      	add	sp, #8
 80082e8:	bd70      	pop	{r4, r5, r6, pc}

080082ea <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80082ea:	6943      	ldr	r3, [r0, #20]
 80082ec:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80082f0:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80082f2:	2000      	movs	r0, #0
 80082f4:	4770      	bx	lr
	...

080082f8 <__errno>:
 80082f8:	4b01      	ldr	r3, [pc, #4]	; (8008300 <__errno+0x8>)
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	20000430 	.word	0x20000430
